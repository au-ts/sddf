
build/arp_requester.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000200000 <_start>:
  200000:	14000488 	b	201220 <main>
	...

0000000000200010 <hash>:
} hashtable_t;

// Simple hash function to map a uint32_t key to an index
uint32_t hash(uint32_t key) {
    return key % TABLE_SIZE;
}
  200010:	12002400 	and	w0, w0, #0x3ff
  200014:	d65f03c0 	ret
  200018:	d503201f 	nop
  20001c:	d503201f 	nop

0000000000200020 <hashtable_init>:

// Initialize the hash table
void hashtable_init(hashtable_t *table) {
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200020:	91400c03 	add	x3, x0, #0x3, lsl #12
  200024:	cb0303e1 	neg	x1, x3
  200028:	f2400c24 	ands	x4, x1, #0xf
  20002c:	54001340 	b.eq	200294 <hashtable_init+0x274>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200030:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200034:	f27f083f 	tst	x1, #0xe
  200038:	54001220 	b.eq	20027c <hashtable_init+0x25c>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20003c:	3900047f 	strb	wzr, [x3, #1]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200040:	f100089f 	cmp	x4, #0x2
  200044:	54001229 	b.ls	200288 <hashtable_init+0x268>  // b.plast
        table->used[i] = 0;  // Mark all slots as unused
  200048:	3900087f 	strb	wzr, [x3, #2]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  20004c:	f27e043f 	tst	x1, #0xc
  200050:	54001280 	b.eq	2002a0 <hashtable_init+0x280>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200054:	39000c7f 	strb	wzr, [x3, #3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200058:	f100109f 	cmp	x4, #0x4
  20005c:	54001289 	b.ls	2002ac <hashtable_init+0x28c>  // b.plast
        table->used[i] = 0;  // Mark all slots as unused
  200060:	3900107f 	strb	wzr, [x3, #4]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200064:	f100149f 	cmp	x4, #0x5
  200068:	540012e0 	b.eq	2002c4 <hashtable_init+0x2a4>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20006c:	3900147f 	strb	wzr, [x3, #5]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200070:	f100189f 	cmp	x4, #0x6
  200074:	54001340 	b.eq	2002dc <hashtable_init+0x2bc>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200078:	3900187f 	strb	wzr, [x3, #6]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  20007c:	361812a1 	tbz	w1, #3, 2002d0 <hashtable_init+0x2b0>
        table->used[i] = 0;  // Mark all slots as unused
  200080:	39001c7f 	strb	wzr, [x3, #7]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200084:	f100209f 	cmp	x4, #0x8
  200088:	54001309 	b.ls	2002e8 <hashtable_init+0x2c8>  // b.plast
        table->used[i] = 0;  // Mark all slots as unused
  20008c:	3900207f 	strb	wzr, [x3, #8]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200090:	f100249f 	cmp	x4, #0x9
  200094:	54001300 	b.eq	2002f4 <hashtable_init+0x2d4>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200098:	3900247f 	strb	wzr, [x3, #9]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  20009c:	f100289f 	cmp	x4, #0xa
  2000a0:	540010c0 	b.eq	2002b8 <hashtable_init+0x298>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2000a4:	3900287f 	strb	wzr, [x3, #10]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2000a8:	f1002c9f 	cmp	x4, #0xb
  2000ac:	540012a0 	b.eq	200300 <hashtable_init+0x2e0>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2000b0:	39002c7f 	strb	wzr, [x3, #11]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2000b4:	f100309f 	cmp	x4, #0xc
  2000b8:	54001300 	b.eq	200318 <hashtable_init+0x2f8>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2000bc:	3900307f 	strb	wzr, [x3, #12]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2000c0:	f100349f 	cmp	x4, #0xd
  2000c4:	54001300 	b.eq	200324 <hashtable_init+0x304>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2000c8:	3900347f 	strb	wzr, [x3, #13]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2000cc:	f1003c9f 	cmp	x4, #0xf
  2000d0:	540011e1 	b.ne	20030c <hashtable_init+0x2ec>  // b.any
        table->used[i] = 0;  // Mark all slots as unused
  2000d4:	aa0403e6 	mov	x6, x4
  2000d8:	d2807e22 	mov	x2, #0x3f1                 	// #1009
  2000dc:	3900387f 	strb	wzr, [x3, #14]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2000e0:	91400c81 	add	x1, x4, #0x3, lsl #12
  2000e4:	d2808005 	mov	x5, #0x400                 	// #1024
  2000e8:	cb0400a5 	sub	x5, x5, x4
  2000ec:	8b010001 	add	x1, x0, x1
        table->used[i] = 0;  // Mark all slots as unused
  2000f0:	4f000400 	movi	v0.4s, #0x0
  2000f4:	927ceca4 	and	x4, x5, #0xfffffffffffffff0
  2000f8:	8b010083 	add	x3, x4, x1
  2000fc:	d503201f 	nop
  200100:	3c810420 	str	q0, [x1], #16
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200104:	eb03003f 	cmp	x1, x3
  200108:	54ffffc1 	b.ne	200100 <hashtable_init+0xe0>  // b.any
  20010c:	8b0400c1 	add	x1, x6, x4
  200110:	cb040042 	sub	x2, x2, x4
  200114:	eb0400bf 	cmp	x5, x4
  200118:	54000b00 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20011c:	8b010003 	add	x3, x0, x1
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200120:	f100045f 	cmp	x2, #0x1
        table->used[i] = 0;  // Mark all slots as unused
  200124:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200128:	91000424 	add	x4, x1, #0x1
        table->used[i] = 0;  // Mark all slots as unused
  20012c:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200130:	54000a40 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200134:	8b040004 	add	x4, x0, x4
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200138:	f100085f 	cmp	x2, #0x2
        table->used[i] = 0;  // Mark all slots as unused
  20013c:	91400c84 	add	x4, x4, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200140:	91000823 	add	x3, x1, #0x2
        table->used[i] = 0;  // Mark all slots as unused
  200144:	3900009f 	strb	wzr, [x4]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200148:	54000980 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20014c:	8b030003 	add	x3, x0, x3
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200150:	f1000c5f 	cmp	x2, #0x3
        table->used[i] = 0;  // Mark all slots as unused
  200154:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200158:	91000c24 	add	x4, x1, #0x3
        table->used[i] = 0;  // Mark all slots as unused
  20015c:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200160:	540008c0 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200164:	8b040004 	add	x4, x0, x4
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200168:	f100105f 	cmp	x2, #0x4
        table->used[i] = 0;  // Mark all slots as unused
  20016c:	91400c84 	add	x4, x4, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200170:	91001023 	add	x3, x1, #0x4
        table->used[i] = 0;  // Mark all slots as unused
  200174:	3900009f 	strb	wzr, [x4]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200178:	54000800 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20017c:	8b030003 	add	x3, x0, x3
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200180:	f100145f 	cmp	x2, #0x5
        table->used[i] = 0;  // Mark all slots as unused
  200184:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200188:	91001424 	add	x4, x1, #0x5
        table->used[i] = 0;  // Mark all slots as unused
  20018c:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200190:	54000740 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200194:	8b040003 	add	x3, x0, x4
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200198:	f100185f 	cmp	x2, #0x6
        table->used[i] = 0;  // Mark all slots as unused
  20019c:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001a0:	91001824 	add	x4, x1, #0x6
        table->used[i] = 0;  // Mark all slots as unused
  2001a4:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001a8:	54000680 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2001ac:	8b040004 	add	x4, x0, x4
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001b0:	f1001c5f 	cmp	x2, #0x7
        table->used[i] = 0;  // Mark all slots as unused
  2001b4:	91400c84 	add	x4, x4, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001b8:	91001c23 	add	x3, x1, #0x7
        table->used[i] = 0;  // Mark all slots as unused
  2001bc:	3900009f 	strb	wzr, [x4]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001c0:	540005c0 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2001c4:	8b030003 	add	x3, x0, x3
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001c8:	f100205f 	cmp	x2, #0x8
        table->used[i] = 0;  // Mark all slots as unused
  2001cc:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001d0:	91002024 	add	x4, x1, #0x8
        table->used[i] = 0;  // Mark all slots as unused
  2001d4:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001d8:	54000500 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2001dc:	8b040004 	add	x4, x0, x4
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001e0:	f100245f 	cmp	x2, #0x9
        table->used[i] = 0;  // Mark all slots as unused
  2001e4:	91400c84 	add	x4, x4, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001e8:	91002423 	add	x3, x1, #0x9
        table->used[i] = 0;  // Mark all slots as unused
  2001ec:	3900009f 	strb	wzr, [x4]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001f0:	54000440 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  2001f4:	8b030003 	add	x3, x0, x3
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  2001f8:	f100285f 	cmp	x2, #0xa
        table->used[i] = 0;  // Mark all slots as unused
  2001fc:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200200:	91002824 	add	x4, x1, #0xa
        table->used[i] = 0;  // Mark all slots as unused
  200204:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200208:	54000380 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20020c:	8b040004 	add	x4, x0, x4
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200210:	f1002c5f 	cmp	x2, #0xb
        table->used[i] = 0;  // Mark all slots as unused
  200214:	91400c84 	add	x4, x4, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200218:	91002c23 	add	x3, x1, #0xb
        table->used[i] = 0;  // Mark all slots as unused
  20021c:	3900009f 	strb	wzr, [x4]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200220:	540002c0 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200224:	8b030003 	add	x3, x0, x3
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200228:	f100305f 	cmp	x2, #0xc
        table->used[i] = 0;  // Mark all slots as unused
  20022c:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200230:	91003024 	add	x4, x1, #0xc
        table->used[i] = 0;  // Mark all slots as unused
  200234:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200238:	54000200 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20023c:	8b040004 	add	x4, x0, x4
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200240:	f100345f 	cmp	x2, #0xd
        table->used[i] = 0;  // Mark all slots as unused
  200244:	91400c84 	add	x4, x4, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200248:	91003423 	add	x3, x1, #0xd
        table->used[i] = 0;  // Mark all slots as unused
  20024c:	3900009f 	strb	wzr, [x4]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200250:	54000140 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  200254:	8b030003 	add	x3, x0, x3
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200258:	91003821 	add	x1, x1, #0xe
        table->used[i] = 0;  // Mark all slots as unused
  20025c:	91400c63 	add	x3, x3, #0x3, lsl #12
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200260:	f100385f 	cmp	x2, #0xe
        table->used[i] = 0;  // Mark all slots as unused
  200264:	3900007f 	strb	wzr, [x3]
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  200268:	54000080 	b.eq	200278 <hashtable_init+0x258>  // b.none
        table->used[i] = 0;  // Mark all slots as unused
  20026c:	8b010000 	add	x0, x0, x1
  200270:	91400c00 	add	x0, x0, #0x3, lsl #12
  200274:	3900001f 	strb	wzr, [x0]
    }
}
  200278:	d65f03c0 	ret
    for (size_t i = 0; i < TABLE_SIZE; i++) {
  20027c:	d2807fe2 	mov	x2, #0x3ff                 	// #1023
  200280:	d2800026 	mov	x6, #0x1                   	// #1
  200284:	17ffff97 	b	2000e0 <hashtable_init+0xc0>
  200288:	d2807fc2 	mov	x2, #0x3fe                 	// #1022
  20028c:	d2800046 	mov	x6, #0x2                   	// #2
  200290:	17ffff94 	b	2000e0 <hashtable_init+0xc0>
  200294:	d2800006 	mov	x6, #0x0                   	// #0
  200298:	d2808002 	mov	x2, #0x400                 	// #1024
  20029c:	17ffff91 	b	2000e0 <hashtable_init+0xc0>
  2002a0:	d2807fa2 	mov	x2, #0x3fd                 	// #1021
  2002a4:	d2800066 	mov	x6, #0x3                   	// #3
  2002a8:	17ffff8e 	b	2000e0 <hashtable_init+0xc0>
  2002ac:	d2807f82 	mov	x2, #0x3fc                 	// #1020
  2002b0:	d2800086 	mov	x6, #0x4                   	// #4
  2002b4:	17ffff8b 	b	2000e0 <hashtable_init+0xc0>
  2002b8:	aa0403e6 	mov	x6, x4
  2002bc:	d2807ec2 	mov	x2, #0x3f6                 	// #1014
  2002c0:	17ffff88 	b	2000e0 <hashtable_init+0xc0>
  2002c4:	aa0403e6 	mov	x6, x4
  2002c8:	d2807f62 	mov	x2, #0x3fb                 	// #1019
  2002cc:	17ffff85 	b	2000e0 <hashtable_init+0xc0>
  2002d0:	d2807f22 	mov	x2, #0x3f9                 	// #1017
  2002d4:	d28000e6 	mov	x6, #0x7                   	// #7
  2002d8:	17ffff82 	b	2000e0 <hashtable_init+0xc0>
  2002dc:	aa0403e6 	mov	x6, x4
  2002e0:	d2807f42 	mov	x2, #0x3fa                 	// #1018
  2002e4:	17ffff7f 	b	2000e0 <hashtable_init+0xc0>
  2002e8:	d2807f02 	mov	x2, #0x3f8                 	// #1016
  2002ec:	d2800106 	mov	x6, #0x8                   	// #8
  2002f0:	17ffff7c 	b	2000e0 <hashtable_init+0xc0>
  2002f4:	d2800126 	mov	x6, #0x9                   	// #9
  2002f8:	d2807ee2 	mov	x2, #0x3f7                 	// #1015
  2002fc:	17ffff79 	b	2000e0 <hashtable_init+0xc0>
  200300:	aa0403e6 	mov	x6, x4
  200304:	d2807ea2 	mov	x2, #0x3f5                 	// #1013
  200308:	17ffff76 	b	2000e0 <hashtable_init+0xc0>
  20030c:	d2807e42 	mov	x2, #0x3f2                 	// #1010
  200310:	d28001c6 	mov	x6, #0xe                   	// #14
  200314:	17ffff73 	b	2000e0 <hashtable_init+0xc0>
  200318:	aa0403e6 	mov	x6, x4
  20031c:	d2807e82 	mov	x2, #0x3f4                 	// #1012
  200320:	17ffff70 	b	2000e0 <hashtable_init+0xc0>
  200324:	aa0403e6 	mov	x6, x4
  200328:	d2807e62 	mov	x2, #0x3f3                 	// #1011
  20032c:	17ffff6d 	b	2000e0 <hashtable_init+0xc0>

0000000000200330 <hashtable_insert>:
    return key % TABLE_SIZE;
  200330:	12002429 	and	w9, w1, #0x3ff
    uint32_t index = hash(key);
    uint32_t original_index = index;

    // Linear probing to handle collisions
    while (table->used[index]) {
        if (table->entries[index].key == key) {
  200334:	d2800188 	mov	x8, #0xc                   	// #12
    uint32_t index = hash(key);
  200338:	2a0903e3 	mov	w3, w9
    while (table->used[index]) {
  20033c:	14000007 	b	200358 <hashtable_insert+0x28>
        if (table->entries[index].key == key) {
  200340:	b8666804 	ldr	w4, [x0, x6]
  200344:	6b01009f 	cmp	w4, w1
  200348:	540004c0 	b.eq	2003e0 <hashtable_insert+0xb0>  // b.none
            // If key exists, overwrite the value
            sddf_memcpy(&table->entries[index].value, value, sizeof(entry_t));
            return;
        }
        index = (index + 1) % TABLE_SIZE;
  20034c:	120024e3 	and	w3, w7, #0x3ff
        if (index == original_index) {
  200350:	6b03013f 	cmp	w9, w3
  200354:	54000440 	b.eq	2003dc <hashtable_insert+0xac>  // b.none
    while (table->used[index]) {
  200358:	2a0303e5 	mov	w5, w3
        index = (index + 1) % TABLE_SIZE;
  20035c:	11000467 	add	w7, w3, #0x1
    while (table->used[index]) {
  200360:	8b050004 	add	x4, x0, x5
  200364:	91400c84 	add	x4, x4, #0x3, lsl #12
        if (table->entries[index].key == key) {
  200368:	9b087ca6 	mul	x6, x5, x8
    while (table->used[index]) {
  20036c:	39400084 	ldrb	w4, [x4]
  200370:	35fffe84 	cbnz	w4, 200340 <hashtable_insert+0x10>
            return;
        }
    }

    // Insert the new entry
    table->entries[index].key = key;
  200374:	d2800184 	mov	x4, #0xc                   	// #12
    sddf_memcpy(&table->entries[index].value, value, sizeof(entry_t));
  200378:	d2800087 	mov	x7, #0x4                   	// #4
  20037c:	91000446 	add	x6, x2, #0x1
  200380:	9ba41c63 	umaddl	x3, w3, w4, x7
    table->entries[index].key = key;
  200384:	9b047ca7 	mul	x7, x5, x4
    sddf_memcpy(&table->entries[index].value, value, sizeof(entry_t));
  200388:	8b030004 	add	x4, x0, x3
  20038c:	aa020088 	orr	x8, x4, x2
  200390:	cb060086 	sub	x6, x4, x6
  200394:	f2400908 	ands	x8, x8, #0x7
    table->entries[index].key = key;
  200398:	b8276801 	str	w1, [x0, x7]

static inline void *sddf_memcpy(void *dest, const void *src, size_t n)
{
    unsigned char *to = dest;
    const unsigned char *from = src;
    while (n-- > 0) {
  20039c:	fa4608c0 	ccmp	x6, #0x6, #0x0, eq	// eq = none
  2003a0:	54000489 	b.ls	200430 <hashtable_insert+0x100>  // b.plast
        *to++ = *from++;
  2003a4:	fd400040 	ldr	d0, [x2]
  2003a8:	fc236800 	str	d0, [x0, x3]
  2003ac:	39402041 	ldrb	w1, [x2, #8]
    table->used[index] = 1;  // Mark this slot as used
  2003b0:	8b050000 	add	x0, x0, x5
  2003b4:	39002081 	strb	w1, [x4, #8]
  2003b8:	91400c00 	add	x0, x0, #0x3, lsl #12
  2003bc:	39402441 	ldrb	w1, [x2, #9]
  2003c0:	39002481 	strb	w1, [x4, #9]
  2003c4:	39402841 	ldrb	w1, [x2, #10]
  2003c8:	39002881 	strb	w1, [x4, #10]
  2003cc:	39402c41 	ldrb	w1, [x2, #11]
  2003d0:	39002c81 	strb	w1, [x4, #11]
  2003d4:	52800021 	mov	w1, #0x1                   	// #1
  2003d8:	39000001 	strb	w1, [x0]
}
  2003dc:	d65f03c0 	ret
            sddf_memcpy(&table->entries[index].value, value, sizeof(entry_t));
  2003e0:	d2800081 	mov	x1, #0x4                   	// #4
  2003e4:	91000444 	add	x4, x2, #0x1
  2003e8:	9ba80463 	umaddl	x3, w3, w8, x1
  2003ec:	8b030001 	add	x1, x0, x3
    while (n-- > 0) {
  2003f0:	aa010045 	orr	x5, x2, x1
  2003f4:	cb040024 	sub	x4, x1, x4
  2003f8:	f24008a5 	ands	x5, x5, #0x7
  2003fc:	fa460880 	ccmp	x4, #0x6, #0x0, eq	// eq = none
  200400:	540003a9 	b.ls	200474 <hashtable_insert+0x144>  // b.plast
        *to++ = *from++;
  200404:	fd400040 	ldr	d0, [x2]
  200408:	fc236800 	str	d0, [x0, x3]
  20040c:	39402040 	ldrb	w0, [x2, #8]
  200410:	39002020 	strb	w0, [x1, #8]
  200414:	39402440 	ldrb	w0, [x2, #9]
  200418:	39002420 	strb	w0, [x1, #9]
  20041c:	39402840 	ldrb	w0, [x2, #10]
  200420:	39002820 	strb	w0, [x1, #10]
  200424:	39402c40 	ldrb	w0, [x2, #11]
  200428:	39002c20 	strb	w0, [x1, #11]
}
  20042c:	d65f03c0 	ret
  200430:	39400041 	ldrb	w1, [x2]
  200434:	38236801 	strb	w1, [x0, x3]
  200438:	39400441 	ldrb	w1, [x2, #1]
  20043c:	39000481 	strb	w1, [x4, #1]
  200440:	39400841 	ldrb	w1, [x2, #2]
  200444:	39000881 	strb	w1, [x4, #2]
  200448:	39400c41 	ldrb	w1, [x2, #3]
  20044c:	39000c81 	strb	w1, [x4, #3]
  200450:	39401041 	ldrb	w1, [x2, #4]
  200454:	39001081 	strb	w1, [x4, #4]
  200458:	39401441 	ldrb	w1, [x2, #5]
  20045c:	39001481 	strb	w1, [x4, #5]
  200460:	39401841 	ldrb	w1, [x2, #6]
  200464:	39001881 	strb	w1, [x4, #6]
  200468:	39401c41 	ldrb	w1, [x2, #7]
  20046c:	39001c81 	strb	w1, [x4, #7]
  200470:	17ffffcf 	b	2003ac <hashtable_insert+0x7c>
  200474:	39400044 	ldrb	w4, [x2]
  200478:	38236804 	strb	w4, [x0, x3]
  20047c:	39400440 	ldrb	w0, [x2, #1]
  200480:	39000420 	strb	w0, [x1, #1]
  200484:	39400840 	ldrb	w0, [x2, #2]
  200488:	39000820 	strb	w0, [x1, #2]
  20048c:	39400c40 	ldrb	w0, [x2, #3]
  200490:	39000c20 	strb	w0, [x1, #3]
  200494:	39401040 	ldrb	w0, [x2, #4]
  200498:	39001020 	strb	w0, [x1, #4]
  20049c:	39401440 	ldrb	w0, [x2, #5]
  2004a0:	39001420 	strb	w0, [x1, #5]
  2004a4:	39401840 	ldrb	w0, [x2, #6]
  2004a8:	39001820 	strb	w0, [x1, #6]
  2004ac:	39401c40 	ldrb	w0, [x2, #7]
  2004b0:	39001c20 	strb	w0, [x1, #7]
  2004b4:	17ffffd6 	b	20040c <hashtable_insert+0xdc>
  2004b8:	d503201f 	nop
  2004bc:	d503201f 	nop

00000000002004c0 <hashtable_search>:
    return key % TABLE_SIZE;
  2004c0:	12002428 	and	w8, w1, #0x3ff
void hashtable_search(hashtable_t *table, uint32_t key, arp_entry_t *value) {
    uint32_t index = hash(key);
    uint32_t original_index = index;

    while (table->used[index]) {
        if (table->entries[index].key == key) {
  2004c4:	d2800187 	mov	x7, #0xc                   	// #12
    uint32_t index = hash(key);
  2004c8:	2a0803e4 	mov	w4, w8
            sddf_memcpy(value, &table->entries[index].value, sizeof(entry_t));
  2004cc:	d2800089 	mov	x9, #0x4                   	// #4
    while (table->used[index]) {
  2004d0:	14000004 	b	2004e0 <hashtable_search+0x20>
        }
        index = (index + 1) % TABLE_SIZE;
  2004d4:	120024c4 	and	w4, w6, #0x3ff
        if (index == original_index) {
  2004d8:	6b04011f 	cmp	w8, w4
  2004dc:	54000500 	b.eq	20057c <hashtable_search+0xbc>  // b.none
    while (table->used[index]) {
  2004e0:	2a0403e3 	mov	w3, w4
        index = (index + 1) % TABLE_SIZE;
  2004e4:	11000486 	add	w6, w4, #0x1
    while (table->used[index]) {
  2004e8:	8b030005 	add	x5, x0, x3
  2004ec:	91400ca5 	add	x5, x5, #0x3, lsl #12
        if (table->entries[index].key == key) {
  2004f0:	9b077c63 	mul	x3, x3, x7
    while (table->used[index]) {
  2004f4:	394000a5 	ldrb	w5, [x5]
  2004f8:	34000425 	cbz	w5, 20057c <hashtable_search+0xbc>
        if (table->entries[index].key == key) {
  2004fc:	b8636803 	ldr	w3, [x0, x3]
  200500:	6b01007f 	cmp	w3, w1
  200504:	54fffe81 	b.ne	2004d4 <hashtable_search+0x14>  // b.any
            sddf_memcpy(value, &table->entries[index].value, sizeof(entry_t));
  200508:	9ba72484 	umaddl	x4, w4, w7, x9
  20050c:	8b040003 	add	x3, x0, x4
  200510:	38646804 	ldrb	w4, [x0, x4]
  200514:	39000044 	strb	w4, [x2]
  200518:	39400464 	ldrb	w4, [x3, #1]
  20051c:	39000444 	strb	w4, [x2, #1]
  200520:	39400864 	ldrb	w4, [x3, #2]
  200524:	39000844 	strb	w4, [x2, #2]
  200528:	39400c64 	ldrb	w4, [x3, #3]
  20052c:	39000c44 	strb	w4, [x2, #3]
  200530:	39401064 	ldrb	w4, [x3, #4]
  200534:	39001044 	strb	w4, [x2, #4]
  200538:	39401464 	ldrb	w4, [x3, #5]
  20053c:	39001444 	strb	w4, [x2, #5]
  200540:	39401864 	ldrb	w4, [x3, #6]
  200544:	39001844 	strb	w4, [x2, #6]
  200548:	39401c64 	ldrb	w4, [x3, #7]
  20054c:	39001c44 	strb	w4, [x2, #7]
  200550:	39402064 	ldrb	w4, [x3, #8]
  200554:	39002044 	strb	w4, [x2, #8]
  200558:	39402464 	ldrb	w4, [x3, #9]
  20055c:	39002444 	strb	w4, [x2, #9]
  200560:	39402864 	ldrb	w4, [x3, #10]
  200564:	39002844 	strb	w4, [x2, #10]
        index = (index + 1) % TABLE_SIZE;
  200568:	120024c4 	and	w4, w6, #0x3ff
        if (index == original_index) {
  20056c:	6b04011f 	cmp	w8, w4
  200570:	39402c63 	ldrb	w3, [x3, #11]
  200574:	39002c43 	strb	w3, [x2, #11]
  200578:	54fffb41 	b.ne	2004e0 <hashtable_search+0x20>  // b.any
            // Full cycle completed, element not found
            break;
        }
    }
    value = NULL;  // Not found
}
  20057c:	d65f03c0 	ret

0000000000200580 <hashtable_remove>:
    return key % TABLE_SIZE;
  200580:	12002426 	and	w6, w1, #0x3ff
void hashtable_remove(hashtable_t *table, uint32_t key) {
    uint32_t index = hash(key);
    uint32_t original_index = index;

    while (table->used[index]) {
        if (table->entries[index].key == key) {
  200584:	d2800187 	mov	x7, #0xc                   	// #12
    uint32_t index = hash(key);
  200588:	2a0603e2 	mov	w2, w6
    while (table->used[index]) {
  20058c:	14000006 	b	2005a4 <hashtable_remove+0x24>
        if (table->entries[index].key == key) {
  200590:	b8636803 	ldr	w3, [x0, x3]
  200594:	6b01007f 	cmp	w3, w1
  200598:	54000180 	b.eq	2005c8 <hashtable_remove+0x48>  // b.none
            // Mark the slot as unused and clear the entry
            table->used[index] = 0;
            return;
        }
        index = (index + 1) % TABLE_SIZE;
        if (index == original_index) {
  20059c:	6b0200df 	cmp	w6, w2
  2005a0:	54000120 	b.eq	2005c4 <hashtable_remove+0x44>  // b.none
    while (table->used[index]) {
  2005a4:	2a0203e3 	mov	w3, w2
        index = (index + 1) % TABLE_SIZE;
  2005a8:	11000442 	add	w2, w2, #0x1
    while (table->used[index]) {
  2005ac:	8b030004 	add	x4, x0, x3
        index = (index + 1) % TABLE_SIZE;
  2005b0:	12002442 	and	w2, w2, #0x3ff
    while (table->used[index]) {
  2005b4:	91400c84 	add	x4, x4, #0x3, lsl #12
        if (table->entries[index].key == key) {
  2005b8:	9b077c63 	mul	x3, x3, x7
    while (table->used[index]) {
  2005bc:	39400085 	ldrb	w5, [x4]
  2005c0:	35fffe85 	cbnz	w5, 200590 <hashtable_remove+0x10>
            // Full cycle completed, element not found
            break;
        }
    }
  2005c4:	d65f03c0 	ret
            table->used[index] = 0;
  2005c8:	3900009f 	strb	wzr, [x4]
  2005cc:	d65f03c0 	ret

00000000002005d0 <process_requests>:
/* This queue will hold all the ARP requests/responses that are needed by the
packets in the arp_waiting queue. */
arp_queue_handle_t *arp_query;

void process_requests()
{
  2005d0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
  2005d4:	910003fd 	mov	x29, sp
  2005d8:	a90153f3 	stp	x19, x20, [sp, #16]
    bool transmitted = false;
    // Loop through and generate ARP requests.
    while (!arp_queue_empty_request(arp_query) && !net_queue_empty_free(&virt_tx_queue)) {
  2005dc:	90000033 	adrp	x19, 204000 <broadcast_mac_addr>
  2005e0:	f9407260 	ldr	x0, [x19, #224]
 *
 * @return true indicates the queue is empty, false otherwise.
 */
static inline bool arp_queue_empty_request(arp_queue_handle_t *queue)
{
    return queue->request.tail - queue->request.head == 0;
  2005e4:	79400402 	ldrh	w2, [x0, #2]
  2005e8:	79400001 	ldrh	w1, [x0]
  2005ec:	6b02003f 	cmp	w1, w2
  2005f0:	54001dc0 	b.eq	2009a8 <process_requests+0x3d8>  // b.none
  2005f4:	91038273 	add	x19, x19, #0xe0
  2005f8:	a9025bf5 	stp	x21, x22, [sp, #32]
        // char buf[16];
        // sddf_dprintf("This is the Ip addr: %s\n", ipaddr_to_string(request.ip_addr, buf, 16));

        // buffer.len = 56;

        memcpy(&reply->ethdst_addr, broadcast_mac_addr, ETH_HWADDR_LEN);
  2005fc:	90000036 	adrp	x22, 204000 <broadcast_mac_addr>
  200600:	910002d6 	add	x22, x22, #0x0
  200604:	a90363f7 	stp	x23, x24, [sp, #48]
        memcpy(&reply->ethsrc_addr, hw_mac_addr, ETH_HWADDR_LEN);
  200608:	910022d5 	add	x21, x22, #0x8
 *
 * @return true indicates the queue is empty, false otherwise.
 */
static inline bool net_queue_empty_free(net_queue_handle_t *queue)
{
    return queue->free->tail - queue->free->head == 0;
  20060c:	f9400661 	ldr	x1, [x19, #8]
  200610:	a9046bf9 	stp	x25, x26, [sp, #64]
            sddf_dprintf("ARP request was invalid!\n");
  200614:	f0000017 	adrp	x23, 203000 <_vsnprintf+0xac0>
  200618:	911ca2f7 	add	x23, x23, #0x728
  20061c:	52800018 	mov	w24, #0x0                   	// #0
    while (!arp_queue_empty_request(arp_query) && !net_queue_empty_free(&virt_tx_queue)) {
  200620:	79400023 	ldrh	w3, [x1]
  200624:	79400421 	ldrh	w1, [x1, #2]
  200628:	6b01007f 	cmp	w3, w1
  20062c:	54001520 	b.eq	2008d0 <process_requests+0x300>  // b.none
    if (arp_queue_empty_request(queue)) {
        sddf_dprintf("ARp queue was empty???????\n");
        return -1;
    }

    sddf_memcpy(request, &queue->request.queue[queue->request.head % queue->capacity], sizeof(arp_request_t));
  200630:	b9700803 	ldr	w3, [x0, #12296]

    queue->request.queue[queue->request.head % queue->capacity].valid = false;
    queue->request.head++;
  200634:	11000444 	add	w4, w2, #0x1
    sddf_memcpy(request, &queue->request.queue[queue->request.head % queue->capacity], sizeof(arp_request_t));
  200638:	52800187 	mov	w7, #0xc                   	// #12
  20063c:	d2800086 	mov	x6, #0x4                   	// #4
    queue->request.queue[queue->request.head % queue->capacity].valid = false;
  200640:	d2800185 	mov	x5, #0xc                   	// #12
    sddf_memcpy(request, &queue->request.queue[queue->request.head % queue->capacity], sizeof(arp_request_t));
  200644:	1ac30841 	udiv	w1, w2, w3
  200648:	1b038822 	msub	w2, w1, w3, w2
  20064c:	9ba71841 	umaddl	x1, w2, w7, x6
    queue->request.queue[queue->request.head % queue->capacity].valid = false;
  200650:	9b050042 	madd	x2, x2, x5, x0
    sddf_memcpy(request, &queue->request.queue[queue->request.head % queue->capacity], sizeof(arp_request_t));
  200654:	8b010003 	add	x3, x0, x1
  200658:	38616805 	ldrb	w5, [x0, x1]
  20065c:	39402861 	ldrb	w1, [x3, #10]
  200660:	39400463 	ldrb	w3, [x3, #1]
    queue->request.queue[queue->request.head % queue->capacity].valid = false;
  200664:	3900385f 	strb	wzr, [x2, #14]
    queue->request.head++;
  200668:	79000404 	strh	w4, [x0, #2]
  20066c:	390183e5 	strb	w5, [sp, #96]
  200670:	390187e3 	strb	w3, [sp, #97]
        if (request.valid != true) {
  200674:	36001601 	tbz	w1, #0, 200934 <process_requests+0x364>
        sddf_dprintf("ARP_REQUESTER|This is the Ip addr: %s\n", ipaddr_to_string(HTONS(request.ip_addr), buf, 16));
  200678:	7940c3e0 	ldrh	w0, [sp, #96]
    rp = buf;
  20067c:	9101c3e8 	add	x8, sp, #0x70
    ap = (uint8_t *)&s_addr;
  200680:	910173e9 	add	x9, sp, #0x5c
  200684:	910163e5 	add	x5, sp, #0x58
  200688:	5ac00400 	rev16	w0, w0
            rem = *ap % (uint8_t)10;
  20068c:	529999a7 	mov	w7, #0xcccd                	// #52429
  200690:	72b99987 	movk	w7, #0xcccc, lsl #16
  200694:	12003c00 	and	w0, w0, #0xffff
    int len = 0;
  200698:	5280000a 	mov	w10, #0x0                   	// #0
            rem = *ap % (uint8_t)10;
  20069c:	52800146 	mov	w6, #0xa                   	// #10
  2006a0:	b9005fe0 	str	w0, [sp, #92]
    for (n = 0; n < 4; n++) {
  2006a4:	39400123 	ldrb	w3, [x9]
        i = 0;
  2006a8:	52800002 	mov	w2, #0x0                   	// #0
  2006ac:	d503201f 	nop
            rem = *ap % (uint8_t)10;
  2006b0:	9ba77c61 	umull	x1, w3, w7
  2006b4:	2a0203e4 	mov	w4, w2
            inv[i++] = (char)('0' + rem);
  2006b8:	11000442 	add	w2, w2, #0x1
        } while (*ap);
  2006bc:	7100247f 	cmp	w3, #0x9
            inv[i++] = (char)('0' + rem);
  2006c0:	12001c42 	and	w2, w2, #0xff
            rem = *ap % (uint8_t)10;
  2006c4:	d363fc21 	lsr	x1, x1, #35
  2006c8:	1b068c20 	msub	w0, w1, w6, w3
            *ap /= (uint8_t)10;
  2006cc:	12001c23 	and	w3, w1, #0xff
            rem = *ap % (uint8_t)10;
  2006d0:	12001c00 	and	w0, w0, #0xff
            inv[i++] = (char)('0' + rem);
  2006d4:	1100c000 	add	w0, w0, #0x30
  2006d8:	12001c00 	and	w0, w0, #0xff
  2006dc:	3824c8a0 	strb	w0, [x5, w4, sxtw]
        } while (*ap);
  2006e0:	54fffe88 	b.hi	2006b0 <process_requests+0xe0>  // b.pmore
  2006e4:	3900013f 	strb	wzr, [x9]
            if (len++ >= buflen) {
  2006e8:	11000541 	add	w1, w10, #0x1
        while (i--) {
  2006ec:	34001062 	cbz	w2, 2008f8 <process_requests+0x328>
            if (len++ >= buflen) {
  2006f0:	7100415f 	cmp	w10, #0x10
  2006f4:	540002a0 	b.eq	200748 <process_requests+0x178>  // b.none
            *rp++ = inv[i];
  2006f8:	39000100 	strb	w0, [x8]
        while (i--) {
  2006fc:	51000480 	sub	w0, w4, #0x1
  200700:	12001c00 	and	w0, w0, #0xff
            if (len++ >= buflen) {
  200704:	11000942 	add	w2, w10, #0x2
            *rp++ = inv[i];
  200708:	91000503 	add	x3, x8, #0x1
        while (i--) {
  20070c:	34000fa4 	cbz	w4, 200900 <process_requests+0x330>
            if (len++ >= buflen) {
  200710:	7100403f 	cmp	w1, #0x10
  200714:	540001a0 	b.eq	200748 <process_requests+0x178>  // b.none
            *rp++ = inv[i];
  200718:	3860c8a1 	ldrb	w1, [x5, w0, sxtw]
        while (i--) {
  20071c:	51000884 	sub	w4, w4, #0x2
            *rp++ = inv[i];
  200720:	39000501 	strb	w1, [x8, #1]
        while (i--) {
  200724:	12001c84 	and	w4, w4, #0xff
            *rp++ = inv[i];
  200728:	91000903 	add	x3, x8, #0x2
            if (len++ >= buflen) {
  20072c:	2a0203e1 	mov	w1, w2
        while (i--) {
  200730:	34000e80 	cbz	w0, 200900 <process_requests+0x330>
            if (len++ >= buflen) {
  200734:	7100405f 	cmp	w2, #0x10
  200738:	54000080 	b.eq	200748 <process_requests+0x178>  // b.none
            *rp++ = inv[i];
  20073c:	3864c8a0 	ldrb	w0, [x5, w4, sxtw]
  200740:	39000900 	strb	w0, [x8, #2]
        while (i--) {
  200744:	34000fe4 	cbz	w4, 200940 <process_requests+0x370>
                return NULL;
  200748:	d2800001 	mov	x1, #0x0                   	// #0
  20074c:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200750:	911d2000 	add	x0, x0, #0x748
  200754:	94000abb 	bl	203240 <sddf_printf_>
        sddf_dprintf("We have dequeued\n");
  200758:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  20075c:	911dc000 	add	x0, x0, #0x770
  200760:	94000ab8 	bl	203240 <sddf_printf_>
  200764:	f9400661 	ldr	x1, [x19, #8]
  200768:	79400422 	ldrh	w2, [x1, #2]
 *
 * @return -1 when queue is empty, 0 on success.
 */
static inline int net_dequeue_free(net_queue_handle_t *queue, net_buff_desc_t *buffer)
{
    if (net_queue_empty_free(queue)) {
  20076c:	79400023 	ldrh	w3, [x1]
  200770:	6b02007f 	cmp	w3, w2
  200774:	54000100 	b.eq	200794 <process_requests+0x1c4>  // b.none
        return -1;
    }

    *buffer = queue->free->buffers[queue->free->head % queue->capacity];
  200778:	b9401a63 	ldr	w3, [x19, #24]
#ifdef CONFIG_ENABLE_SMP_SUPPORT
    THREAD_MEMORY_RELEASE();
#endif
    queue->free->head++;
  20077c:	11000444 	add	w4, w2, #0x1
    *buffer = queue->free->buffers[queue->free->head % queue->capacity];
  200780:	1ac30840 	udiv	w0, w2, w3
  200784:	1b038800 	msub	w0, w0, w3, w2
  200788:	8b001020 	add	x0, x1, x0, lsl #4
  20078c:	f9400414 	ldr	x20, [x0, #8]
    queue->free->head++;
  200790:	79000424 	strh	w4, [x1, #2]
    struct arp_packet *reply = (struct arp_packet *)(net_config.tx_data.vaddr + buffer.io_or_offset);
  200794:	90000020 	adrp	x0, 204000 <broadcast_mac_addr>
  200798:	f9406018 	ldr	x24, [x0, #192]
        memcpy(&reply->ethdst_addr, broadcast_mac_addr, ETH_HWADDR_LEN);
  20079c:	aa1603e1 	mov	x1, x22
  2007a0:	d28000c2 	mov	x2, #0x6                   	// #6
        reply->hwlen = ETH_HWADDR_LEN;
        reply->protolen = IPV4_PROTO_LEN;
        reply->opcode = HTONS(ETHARP_OPCODE_REPLY);

        memcpy(&reply->hwsrc_addr, hw_mac_addr, ETH_HWADDR_LEN);
        reply->ipsrc_addr = HTONS(IPV4_ADDR(192, 168, 33, 0));
  2007a4:	12800afa 	mov	w26, #0xffffffa8            	// #-88
    struct arp_packet *reply = (struct arp_packet *)(net_config.tx_data.vaddr + buffer.io_or_offset);
  2007a8:	8b140318 	add	x24, x24, x20
        reply->ipsrc_addr = HTONS(IPV4_ADDR(192, 168, 33, 0));
  2007ac:	128007f9 	mov	w25, #0xffffffc0            	// #-64
        memcpy(&reply->ethdst_addr, broadcast_mac_addr, ETH_HWADDR_LEN);
  2007b0:	aa1803e0 	mov	x0, x24
  2007b4:	94000363 	bl	201540 <memcpy>
        memcpy(&reply->ethsrc_addr, hw_mac_addr, ETH_HWADDR_LEN);
  2007b8:	d28000c2 	mov	x2, #0x6                   	// #6
  2007bc:	aa1503e1 	mov	x1, x21
  2007c0:	8b020300 	add	x0, x24, x2
  2007c4:	9400035f 	bl	201540 <memcpy>
        reply->type = HTONS(ETH_TYPE_ARP);
  2007c8:	52800104 	mov	w4, #0x8                   	// #8
  2007cc:	528000c3 	mov	w3, #0x6                   	// #6
        reply->protolen = IPV4_PROTO_LEN;
  2007d0:	52800086 	mov	w6, #0x4                   	// #4
        reply->opcode = HTONS(ETHARP_OPCODE_REPLY);
  2007d4:	52800045 	mov	w5, #0x2                   	// #2
        reply->hwtype = HTONS(ETH_HWTYPE);
  2007d8:	52800022 	mov	w2, #0x1                   	// #1
        reply->type = HTONS(ETH_TYPE_ARP);
  2007dc:	39003304 	strb	w4, [x24, #12]
  2007e0:	39003703 	strb	w3, [x24, #13]
        memcpy(&reply->hwsrc_addr, hw_mac_addr, ETH_HWADDR_LEN);
  2007e4:	aa1503e1 	mov	x1, x21
        reply->hwtype = HTONS(ETH_HWTYPE);
  2007e8:	39003b1f 	strb	wzr, [x24, #14]
        memcpy(&reply->hwsrc_addr, hw_mac_addr, ETH_HWADDR_LEN);
  2007ec:	91005b00 	add	x0, x24, #0x16
        reply->hwtype = HTONS(ETH_HWTYPE);
  2007f0:	39003f02 	strb	w2, [x24, #15]
        memcpy(&reply->hwsrc_addr, hw_mac_addr, ETH_HWADDR_LEN);
  2007f4:	d28000c2 	mov	x2, #0x6                   	// #6
        reply->proto = HTONS(ETH_TYPE_IP);
  2007f8:	39004304 	strb	w4, [x24, #16]
  2007fc:	3900471f 	strb	wzr, [x24, #17]
        reply->hwlen = ETH_HWADDR_LEN;
  200800:	39004b03 	strb	w3, [x24, #18]
        reply->protolen = IPV4_PROTO_LEN;
  200804:	39004f06 	strb	w6, [x24, #19]
        reply->opcode = HTONS(ETHARP_OPCODE_REPLY);
  200808:	3900531f 	strb	wzr, [x24, #20]
  20080c:	39005705 	strb	w5, [x24, #21]
        memcpy(&reply->hwsrc_addr, hw_mac_addr, ETH_HWADDR_LEN);
  200810:	9400034c 	bl	201540 <memcpy>
        reply->ipsrc_addr = HTONS(IPV4_ADDR(192, 168, 33, 0));
  200814:	3900731a 	strb	w26, [x24, #28]
  200818:	39007719 	strb	w25, [x24, #29]
        memset(&reply->hwdst_addr, 0, ETH_HWADDR_LEN);
  20081c:	d28000c2 	mov	x2, #0x6                   	// #6
        reply->ipsrc_addr = HTONS(IPV4_ADDR(192, 168, 33, 0));
  200820:	39007b1f 	strb	wzr, [x24, #30]
        memset(&reply->hwdst_addr, 0, ETH_HWADDR_LEN);
  200824:	52800001 	mov	w1, #0x0                   	// #0
        reply->ipsrc_addr = HTONS(IPV4_ADDR(192, 168, 33, 0));
  200828:	39007f1f 	strb	wzr, [x24, #31]
        memset(&reply->hwdst_addr, 0, ETH_HWADDR_LEN);
  20082c:	91008300 	add	x0, x24, #0x20
  200830:	940003a4 	bl	2016c0 <memset>
        reply->ipdst_addr = HTONS(IPV4_ADDR(192, 168, 33, 5));
  200834:	39009b1a 	strb	w26, [x24, #38]
  200838:	39009f19 	strb	w25, [x24, #39]
        memset(&reply->padding, 0, 10);
  20083c:	d2800142 	mov	x2, #0xa                   	// #10
        reply->ipdst_addr = HTONS(IPV4_ADDR(192, 168, 33, 5));
  200840:	3900a31f 	strb	wzr, [x24, #40]
        memset(&reply->padding, 0, 10);
  200844:	9100ab00 	add	x0, x24, #0x2a
        reply->ipdst_addr = HTONS(IPV4_ADDR(192, 168, 33, 5));
  200848:	3900a71f 	strb	wzr, [x24, #41]
        memset(&reply->padding, 0, 10);
  20084c:	52800001 	mov	w1, #0x0                   	// #0
  200850:	9400039c 	bl	2016c0 <memset>
    return queue->active->tail - queue->active->head == queue->capacity;
  200854:	f9400a62 	ldr	x2, [x19, #16]
  200858:	b9401a64 	ldr	w4, [x19, #24]
  20085c:	79400043 	ldrh	w3, [x2]
  200860:	79400440 	ldrh	w0, [x2, #2]
  200864:	4b000060 	sub	w0, w3, w0
    if (net_queue_full_active(queue)) {
  200868:	6b04001f 	cmp	w0, w4
  20086c:	54000a80 	b.eq	2009bc <process_requests+0x3ec>  // b.none
    queue->active->buffers[queue->active->tail % queue->capacity] = buffer;
  200870:	1ac40861 	udiv	w1, w3, w4
  200874:	d2800107 	mov	x7, #0x8                   	// #8
    queue->active->tail++;
  200878:	11000465 	add	w5, w3, #0x1
    queue->active->buffers[queue->active->tail % queue->capacity] = buffer;
  20087c:	52800706 	mov	w6, #0x38                  	// #56

        buffer.len = 56;
        err = net_enqueue_active(&virt_tx_queue, buffer);
        assert(!err);
        transmitted = true;
        sddf_dprintf("Sent an arp request out to the network!\n");
  200880:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200884:	911f6000 	add	x0, x0, #0x7d8
  200888:	1b048c21 	msub	w1, w1, w4, w3
  20088c:	8b2150e1 	add	x1, x7, w1, uxtw #4
  200890:	8b010043 	add	x3, x2, x1
  200894:	f8216854 	str	x20, [x2, x1]
  200898:	79001066 	strh	w6, [x3, #8]
    queue->active->tail++;
  20089c:	79000045 	strh	w5, [x2]
  2008a0:	94000a68 	bl	203240 <sddf_printf_>
    while (!arp_queue_empty_request(arp_query) && !net_queue_empty_free(&virt_tx_queue)) {
  2008a4:	f9400260 	ldr	x0, [x19]
    return queue->request.tail - queue->request.head == 0;
  2008a8:	79400402 	ldrh	w2, [x0, #2]
  2008ac:	79400001 	ldrh	w1, [x0]
  2008b0:	6b02003f 	cmp	w1, w2
  2008b4:	540004c0 	b.eq	20094c <process_requests+0x37c>  // b.none
    return queue->free->tail - queue->free->head == 0;
  2008b8:	f9400661 	ldr	x1, [x19, #8]
    return buf;
  2008bc:	52800038 	mov	w24, #0x1                   	// #1
  2008c0:	79400023 	ldrh	w3, [x1]
  2008c4:	79400421 	ldrh	w1, [x1, #2]
  2008c8:	6b01007f 	cmp	w3, w1
  2008cc:	54ffeb21 	b.ne	200630 <process_requests+0x60>  // b.any
        request.valid = false;
    }
    sddf_dprintf("ARP_REQUESTER|The queue was empty\n");
  2008d0:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  2008d4:	911c0000 	add	x0, x0, #0x700
  2008d8:	94000a5a 	bl	203240 <sddf_printf_>
    if (transmitted && net_require_signal_active(&virt_tx_queue)) {
  2008dc:	350003f8 	cbnz	w24, 200958 <process_requests+0x388>
        net_cancel_signal_active(&virt_tx_queue);
        // @kwinter: Figure out how to get the channel ID.
        microkit_deferred_notify(net_config.tx.id);
    }
}
  2008e0:	a94153f3 	ldp	x19, x20, [sp, #16]
  2008e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
  2008e8:	a94363f7 	ldp	x23, x24, [sp, #48]
  2008ec:	a9446bf9 	ldp	x25, x26, [sp, #64]
  2008f0:	a8c87bfd 	ldp	x29, x30, [sp], #128
  2008f4:	d65f03c0 	ret
        while (i--) {
  2008f8:	aa0803e3 	mov	x3, x8
  2008fc:	2a0a03e1 	mov	w1, w10
        if (len++ >= buflen) {
  200900:	7100403f 	cmp	w1, #0x10
  200904:	1100042a 	add	w10, w1, #0x1
  200908:	54fff200 	b.eq	200748 <process_requests+0x178>  // b.none
        *rp++ = '.';
  20090c:	aa0303e8 	mov	x8, x3
  200910:	528005c0 	mov	w0, #0x2e                  	// #46
        ap++;
  200914:	91000529 	add	x9, x9, #0x1
    for (n = 0; n < 4; n++) {
  200918:	910183e1 	add	x1, sp, #0x60
  20091c:	eb01013f 	cmp	x9, x1
        *rp++ = '.';
  200920:	38001500 	strb	w0, [x8], #1
    for (n = 0; n < 4; n++) {
  200924:	54ffec01 	b.ne	2006a4 <process_requests+0xd4>  // b.any
    return buf;
  200928:	9101c3e1 	add	x1, sp, #0x70
    *--rp = 0;
  20092c:	3900007f 	strb	wzr, [x3]
    return buf;
  200930:	17ffff87 	b	20074c <process_requests+0x17c>
            sddf_dprintf("ARP request was invalid!\n");
  200934:	aa1703e0 	mov	x0, x23
  200938:	94000a42 	bl	203240 <sddf_printf_>
  20093c:	17ffff4f 	b	200678 <process_requests+0xa8>
            if (len++ >= buflen) {
  200940:	11000d41 	add	w1, w10, #0x3
            *rp++ = inv[i];
  200944:	91000d03 	add	x3, x8, #0x3
  200948:	17ffffee 	b	200900 <process_requests+0x330>
    sddf_dprintf("ARP_REQUESTER|The queue was empty\n");
  20094c:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200950:	911c0000 	add	x0, x0, #0x700
  200954:	94000a3b 	bl	203240 <sddf_printf_>
 *
 * @param queue queue handle of the active queue to check.
 */
static inline bool net_require_signal_active(net_queue_handle_t *queue)
{
    return !queue->active->consumer_signalled;
  200958:	f9400a60 	ldr	x0, [x19, #16]
    if (transmitted && net_require_signal_active(&virt_tx_queue)) {
  20095c:	b9400401 	ldr	w1, [x0, #4]
  200960:	35fffc01 	cbnz	w1, 2008e0 <process_requests+0x310>
    queue->active->consumer_signalled = 1;
  200964:	52800022 	mov	w2, #0x1                   	// #1
        microkit_deferred_notify(net_config.tx.id);
  200968:	90000021 	adrp	x1, 204000 <broadcast_mac_addr>
  20096c:	b9000402 	str	w2, [x0, #4]
}
#endif

static inline void microkit_deferred_notify(microkit_channel ch)
{
    microkit_have_signal = seL4_True;
  200970:	f0000025 	adrp	x5, 207000 <__global_pointer$+0x27e0>
    microkit_signal_msg = seL4_MessageInfo_new(0, 0, 0, 0);
    microkit_signal_cap = (BASE_OUTPUT_NOTIFICATION_CAP + ch);
  200974:	f0000023 	adrp	x3, 207000 <__global_pointer$+0x27e0>
    microkit_signal_msg = seL4_MessageInfo_new(0, 0, 0, 0);
  200978:	f0000024 	adrp	x4, 207000 <__global_pointer$+0x27e0>
    microkit_signal_cap = (BASE_OUTPUT_NOTIFICATION_CAP + ch);
  20097c:	3942e820 	ldrb	w0, [x1, #186]
    microkit_have_signal = seL4_True;
  200980:	391c84a2 	strb	w2, [x5, #1825]
    microkit_signal_cap = (BASE_OUTPUT_NOTIFICATION_CAP + ch);
  200984:	91002800 	add	x0, x0, #0xa
    microkit_signal_msg = seL4_MessageInfo_new(0, 0, 0, 0);
  200988:	f903949f 	str	xzr, [x4, #1832]
    microkit_signal_cap = (BASE_OUTPUT_NOTIFICATION_CAP + ch);
  20098c:	f9039860 	str	x0, [x3, #1840]
}
  200990:	a94153f3 	ldp	x19, x20, [sp, #16]
  200994:	a9425bf5 	ldp	x21, x22, [sp, #32]
  200998:	a94363f7 	ldp	x23, x24, [sp, #48]
  20099c:	a9446bf9 	ldp	x25, x26, [sp, #64]
  2009a0:	a8c87bfd 	ldp	x29, x30, [sp], #128
  2009a4:	d65f03c0 	ret
  2009a8:	a94153f3 	ldp	x19, x20, [sp, #16]
    sddf_dprintf("ARP_REQUESTER|The queue was empty\n");
  2009ac:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  2009b0:	911c0000 	add	x0, x0, #0x700
}
  2009b4:	a8c87bfd 	ldp	x29, x30, [sp], #128
    sddf_dprintf("ARP_REQUESTER|The queue was empty\n");
  2009b8:	14000a22 	b	203240 <sddf_printf_>
        assert(!err);
  2009bc:	f0000003 	adrp	x3, 203000 <_vsnprintf+0xac0>
  2009c0:	f0000001 	adrp	x1, 203000 <_vsnprintf+0xac0>
  2009c4:	9116e063 	add	x3, x3, #0x5b8
  2009c8:	911e2021 	add	x1, x1, #0x788
  2009cc:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  2009d0:	52801022 	mov	w2, #0x81                  	// #129
  2009d4:	911f4000 	add	x0, x0, #0x7d0
  2009d8:	94000ad6 	bl	203530 <_assert_fail>
        sddf_dprintf("Sent an arp request out to the network!\n");
  2009dc:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  2009e0:	911f6000 	add	x0, x0, #0x7d8
  2009e4:	17ffffaf 	b	2008a0 <process_requests+0x2d0>
  2009e8:	d503201f 	nop
  2009ec:	d503201f 	nop

00000000002009f0 <process_responses>:

    return 0;
}

void process_responses()
{
  2009f0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
  2009f4:	910003fd 	mov	x29, sp
  2009f8:	a9025bf5 	stp	x21, x22, [sp, #32]
    return queue->active->tail - queue->active->head == 0;
  2009fc:	90000036 	adrp	x22, 204000 <broadcast_mac_addr>
  200a00:	910382d6 	add	x22, x22, #0xe0
  200a04:	f94016c1 	ldr	x1, [x22, #40]
  200a08:	79400423 	ldrh	w3, [x1, #2]
    bool signal = false;
    while (!net_queue_empty_active(&virt_rx_queue)) {
  200a0c:	79400020 	ldrh	w0, [x1]
  200a10:	6b03001f 	cmp	w0, w3
  200a14:	540008a0 	b.eq	200b28 <process_responses+0x138>  // b.none
                sddf_memcpy(resp.mac_addr, entry.mac_addr, sizeof(uint8_t) * ETH_HWADDR_LEN);
                entry.valid = true;
                hashtable_insert(&arp_table, resp.ip_addr, &entry);
                signal = true;
            } else {
                if (pkt->ipdst_addr == IPV4_ADDR(192, 168, 33, 0)) {
  200a18:	52951815 	mov	w21, #0xa8c0                	// #43200
  200a1c:	72a00435 	movk	w21, #0x21, lsl #16
  200a20:	a90153f3 	stp	x19, x20, [sp, #16]
            sddf_dprintf("Was an arp packet!\n");
  200a24:	f0000014 	adrp	x20, 203000 <_vsnprintf+0xac0>
  200a28:	91202294 	add	x20, x20, #0x808
  200a2c:	a90363f7 	stp	x23, x24, [sp, #48]
  200a30:	90000037 	adrp	x23, 204000 <broadcast_mac_addr>
  200a34:	910162f7 	add	x23, x23, #0x58
  200a38:	a90573fb 	stp	x27, x28, [sp, #80]
    queue->free->buffers[queue->free->tail % queue->capacity] = buffer;
  200a3c:	d280011b 	mov	x27, #0x8                   	// #8
  200a40:	14000016 	b	200a98 <process_responses+0xa8>
    return queue->free->tail - queue->free->head == queue->capacity;
  200a44:	f94012c3 	ldr	x3, [x22, #32]
  200a48:	910082d3 	add	x19, x22, #0x20
  200a4c:	79400064 	ldrh	w4, [x3]
  200a50:	79400460 	ldrh	w0, [x3, #2]
  200a54:	4b000080 	sub	w0, w4, w0
    if (net_queue_full_free(queue)) {
  200a58:	6b02001f 	cmp	w0, w2
  200a5c:	540028a0 	b.eq	200f70 <process_responses+0x580>  // b.none
    queue->free->buffers[queue->free->tail % queue->capacity] = buffer;
  200a60:	1ac20880 	udiv	w0, w4, w2
    queue->free->tail++;
  200a64:	11000487 	add	w7, w4, #0x1
    queue->active->consumer_signalled = 0;
  200a68:	f9400661 	ldr	x1, [x19, #8]
    queue->free->buffers[queue->free->tail % queue->capacity] = buffer;
  200a6c:	1b029000 	msub	w0, w0, w2, w4
  200a70:	8b205360 	add	x0, x27, w0, uxtw #4
  200a74:	8b000062 	add	x2, x3, x0
  200a78:	f820687c 	str	x28, [x3, x0]
  200a7c:	7900105f 	strh	wzr, [x2, #8]
    queue->free->tail++;
  200a80:	79000067 	strh	w7, [x3]
    return queue->active->tail - queue->active->head == 0;
  200a84:	79400423 	ldrh	w3, [x1, #2]
    while (!net_queue_empty_active(&virt_rx_queue)) {
  200a88:	79400020 	ldrh	w0, [x1]
    queue->active->consumer_signalled = 0;
  200a8c:	b900043f 	str	wzr, [x1, #4]
  200a90:	6b03001f 	cmp	w0, w3
  200a94:	54000440 	b.eq	200b1c <process_responses+0x12c>  // b.none
    *buffer = queue->active->buffers[queue->active->head % queue->capacity];
  200a98:	b94032c2 	ldr	w2, [x22, #48]
    queue->active->head++;
  200a9c:	11000464 	add	w4, w3, #0x1
        struct ethernet_header *ethhdr = (struct ethernet_header *)(net_config.rx_data.vaddr + buffer.io_or_offset);
  200aa0:	f9401af3 	ldr	x19, [x23, #48]
    *buffer = queue->active->buffers[queue->active->head % queue->capacity];
  200aa4:	910082d8 	add	x24, x22, #0x20
  200aa8:	1ac20860 	udiv	w0, w3, w2
  200aac:	1b028c00 	msub	w0, w0, w2, w3
  200ab0:	8b001020 	add	x0, x1, x0, lsl #4
  200ab4:	f940041c 	ldr	x28, [x0, #8]
    queue->active->head++;
  200ab8:	79000424 	strh	w4, [x1, #2]
  200abc:	8b1c0273 	add	x19, x19, x28
        if (ethhdr->type == HTONS(ETH_TYPE_ARP)) {
  200ac0:	39403261 	ldrb	w1, [x19, #12]
  200ac4:	39403660 	ldrb	w0, [x19, #13]
  200ac8:	2a002020 	orr	w0, w1, w0, lsl #8
  200acc:	7118201f 	cmp	w0, #0x608
  200ad0:	54fffba1 	b.ne	200a44 <process_responses+0x54>  // b.any
            sddf_dprintf("Was an arp packet!\n");
  200ad4:	aa1403e0 	mov	x0, x20
  200ad8:	940009da 	bl	203240 <sddf_printf_>
            if (pkt->opcode == HTONS(ETHARP_OPCODE_REPLY)) {
  200adc:	39405261 	ldrb	w1, [x19, #20]
  200ae0:	39405660 	ldrb	w0, [x19, #21]
  200ae4:	2a002020 	orr	w0, w1, w0, lsl #8
  200ae8:	7108001f 	cmp	w0, #0x200
  200aec:	540019e0 	b.eq	200e28 <process_responses+0x438>  // b.none
                if (pkt->ipdst_addr == IPV4_ADDR(192, 168, 33, 0)) {
  200af0:	39409a63 	ldrb	w3, [x19, #38]
  200af4:	39409e62 	ldrb	w2, [x19, #39]
  200af8:	3940a261 	ldrb	w1, [x19, #40]
  200afc:	3940a660 	ldrb	w0, [x19, #41]
  200b00:	aa022062 	orr	x2, x3, x2, lsl #8
  200b04:	aa014041 	orr	x1, x2, x1, lsl #16
  200b08:	aa006020 	orr	x0, x1, x0, lsl #24
  200b0c:	6b15001f 	cmp	w0, w21
  200b10:	54000120 	b.eq	200b34 <process_responses+0x144>  // b.none
    return queue->free->tail - queue->free->head == queue->capacity;
  200b14:	b9401302 	ldr	w2, [x24, #16]
  200b18:	17ffffcb 	b	200a44 <process_responses+0x54>
  200b1c:	a94153f3 	ldp	x19, x20, [sp, #16]
  200b20:	a94363f7 	ldp	x23, x24, [sp, #48]
  200b24:	a94573fb 	ldp	x27, x28, [sp, #80]
        net_request_signal_active(&virt_rx_queue);
    }

    // @kwinter: Figure out how to get the channel for the routing ID.
    // microkit_deferred_notify(ROUTING_ID);
}
  200b28:	a9425bf5 	ldp	x21, x22, [sp, #32]
  200b2c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
  200b30:	d65f03c0 	ret
                    sddf_dprintf("We got the same ip address\n");
  200b34:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200b38:	91208000 	add	x0, x0, #0x820
  200b3c:	a9046bf9 	stp	x25, x26, [sp, #64]
  200b40:	940009c0 	bl	203240 <sddf_printf_>
                    arp_reply(mac_addr, pkt->ethsrc_addr, mac_addr, pkt->ipdst_addr, pkt->hwsrc_addr, pkt->ipsrc_addr);
  200b44:	39409a68 	ldrb	w8, [x19, #38]
  200b48:	39409e64 	ldrb	w4, [x19, #39]
  200b4c:	91005a60 	add	x0, x19, #0x16
  200b50:	39407267 	ldrb	w7, [x19, #28]
  200b54:	91001a78 	add	x24, x19, #0x6
  200b58:	f9003be0 	str	x0, [sp, #112]
    sddf_dprintf("Sending back an arp reply!\n");
  200b5c:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200b60:	91210000 	add	x0, x0, #0x840
                    arp_reply(mac_addr, pkt->ethsrc_addr, mac_addr, pkt->ipdst_addr, pkt->hwsrc_addr, pkt->ipsrc_addr);
  200b64:	aa042104 	orr	x4, x8, x4, lsl #8
  200b68:	39407663 	ldrb	w3, [x19, #29]
  200b6c:	3940a262 	ldrb	w2, [x19, #40]
  200b70:	39407a61 	ldrb	w1, [x19, #30]
  200b74:	3940a67a 	ldrb	w26, [x19, #41]
  200b78:	aa0320e3 	orr	x3, x7, x3, lsl #8
  200b7c:	aa024082 	orr	x2, x4, x2, lsl #16
  200b80:	39407e79 	ldrb	w25, [x19, #31]
  200b84:	aa014061 	orr	x1, x3, x1, lsl #16
  200b88:	aa1a6042 	orr	x2, x2, x26, lsl #24
  200b8c:	f9003fe2 	str	x2, [sp, #120]
  200b90:	aa196039 	orr	x25, x1, x25, lsl #24
    sddf_dprintf("Sending back an arp reply!\n");
  200b94:	940009ab 	bl	203240 <sddf_printf_>
    return queue->free->tail - queue->free->head == 0;
  200b98:	f94006c2 	ldr	x2, [x22, #8]
  200b9c:	910022c0 	add	x0, x22, #0x8
  200ba0:	79400443 	ldrh	w3, [x2, #2]
    if (net_queue_empty_free(&virt_tx_queue)) {
  200ba4:	79400041 	ldrh	w1, [x2]
  200ba8:	6b03003f 	cmp	w1, w3
  200bac:	540020c0 	b.eq	200fc4 <process_responses+0x5d4>  // b.none
    *buffer = queue->free->buffers[queue->free->head % queue->capacity];
  200bb0:	b9401004 	ldr	w4, [x0, #16]
    rp = buf;
  200bb4:	910243ed 	add	x13, sp, #0x90
  200bb8:	aa0d03eb 	mov	x11, x13
    ap = (uint8_t *)&s_addr;
  200bbc:	910233e1 	add	x1, sp, #0x8c
  200bc0:	910223e8 	add	x8, sp, #0x88
    queue->free->head++;
  200bc4:	11000467 	add	w7, w3, #0x1
            rem = *ap % (uint8_t)10;
  200bc8:	529999aa 	mov	w10, #0xcccd                	// #52429
  200bcc:	72b9998a 	movk	w10, #0xcccc, lsl #16
    *buffer = queue->free->buffers[queue->free->head % queue->capacity];
  200bd0:	1ac40860 	udiv	w0, w3, w4
    int len = 0;
  200bd4:	5280000c 	mov	w12, #0x0                   	// #0
            rem = *ap % (uint8_t)10;
  200bd8:	52800149 	mov	w9, #0xa                   	// #10
  200bdc:	b9008ff9 	str	w25, [sp, #140]
  200be0:	1b048c00 	msub	w0, w0, w4, w3
  200be4:	8b001040 	add	x0, x2, x0, lsl #4
  200be8:	f9400400 	ldr	x0, [x0, #8]
    queue->free->head++;
  200bec:	79000447 	strh	w7, [x2, #2]
    *buffer = queue->free->buffers[queue->free->head % queue->capacity];
  200bf0:	f90037e0 	str	x0, [sp, #104]
    for (n = 0; n < 4; n++) {
  200bf4:	39400024 	ldrb	w4, [x1]
        i = 0;
  200bf8:	52800003 	mov	w3, #0x0                   	// #0
  200bfc:	d503201f 	nop
            rem = *ap % (uint8_t)10;
  200c00:	9baa7c82 	umull	x2, w4, w10
  200c04:	2a0303e7 	mov	w7, w3
            inv[i++] = (char)('0' + rem);
  200c08:	11000463 	add	w3, w3, #0x1
        } while (*ap);
  200c0c:	7100249f 	cmp	w4, #0x9
            inv[i++] = (char)('0' + rem);
  200c10:	12001c63 	and	w3, w3, #0xff
            rem = *ap % (uint8_t)10;
  200c14:	d363fc42 	lsr	x2, x2, #35
  200c18:	1b099040 	msub	w0, w2, w9, w4
            *ap /= (uint8_t)10;
  200c1c:	12001c44 	and	w4, w2, #0xff
            rem = *ap % (uint8_t)10;
  200c20:	12001c00 	and	w0, w0, #0xff
            inv[i++] = (char)('0' + rem);
  200c24:	1100c000 	add	w0, w0, #0x30
  200c28:	12001c00 	and	w0, w0, #0xff
  200c2c:	3827c900 	strb	w0, [x8, w7, sxtw]
        } while (*ap);
  200c30:	54fffe88 	b.hi	200c00 <process_responses+0x210>  // b.pmore
  200c34:	3900003f 	strb	wzr, [x1]
            if (len++ >= buflen) {
  200c38:	11000582 	add	w2, w12, #0x1
        while (i--) {
  200c3c:	34001603 	cbz	w3, 200efc <process_responses+0x50c>
            if (len++ >= buflen) {
  200c40:	7100419f 	cmp	w12, #0x10
  200c44:	540002a0 	b.eq	200c98 <process_responses+0x2a8>  // b.none
            *rp++ = inv[i];
  200c48:	39000160 	strb	w0, [x11]
        while (i--) {
  200c4c:	510004e0 	sub	w0, w7, #0x1
  200c50:	12001c00 	and	w0, w0, #0xff
            if (len++ >= buflen) {
  200c54:	11000983 	add	w3, w12, #0x2
            *rp++ = inv[i];
  200c58:	91000564 	add	x4, x11, #0x1
        while (i--) {
  200c5c:	34001547 	cbz	w7, 200f04 <process_responses+0x514>
            if (len++ >= buflen) {
  200c60:	7100405f 	cmp	w2, #0x10
  200c64:	540001a0 	b.eq	200c98 <process_responses+0x2a8>  // b.none
            *rp++ = inv[i];
  200c68:	3860c902 	ldrb	w2, [x8, w0, sxtw]
        while (i--) {
  200c6c:	510008e7 	sub	w7, w7, #0x2
            *rp++ = inv[i];
  200c70:	39000562 	strb	w2, [x11, #1]
        while (i--) {
  200c74:	12001ce7 	and	w7, w7, #0xff
            *rp++ = inv[i];
  200c78:	91000964 	add	x4, x11, #0x2
            if (len++ >= buflen) {
  200c7c:	2a0303e2 	mov	w2, w3
        while (i--) {
  200c80:	34001420 	cbz	w0, 200f04 <process_responses+0x514>
            if (len++ >= buflen) {
  200c84:	7100407f 	cmp	w3, #0x10
  200c88:	54000080 	b.eq	200c98 <process_responses+0x2a8>  // b.none
            *rp++ = inv[i];
  200c8c:	3867c900 	ldrb	w0, [x8, w7, sxtw]
  200c90:	39000960 	strb	w0, [x11, #2]
        while (i--) {
  200c94:	34001687 	cbz	w7, 200f64 <process_responses+0x574>
                return NULL;
  200c98:	d2800001 	mov	x1, #0x0                   	// #0
  200c9c:	f0000013 	adrp	x19, 203000 <_vsnprintf+0xac0>
  200ca0:	91242273 	add	x19, x19, #0x908
    sddf_dprintf("This is the ip address we are sending back to: %s\nThis is the mac address: ", ipaddr_to_string(ipdst_addr, buf, 16));
  200ca4:	d280001a 	mov	x26, #0x0                   	// #0
  200ca8:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200cac:	9122e000 	add	x0, x0, #0x8b8
  200cb0:	94000964 	bl	203240 <sddf_printf_>
    for (int i = 0; i < 6; i++) {
  200cb4:	d503201f 	nop
        sddf_dprintf("MAC_ADDR[%d]: %x\n", i, ethdst_addr[i]);
  200cb8:	387a6b02 	ldrb	w2, [x24, x26]
  200cbc:	2a1a03e1 	mov	w1, w26
  200cc0:	aa1303e0 	mov	x0, x19
    for (int i = 0; i < 6; i++) {
  200cc4:	9100075a 	add	x26, x26, #0x1
        sddf_dprintf("MAC_ADDR[%d]: %x\n", i, ethdst_addr[i]);
  200cc8:	9400095e 	bl	203240 <sddf_printf_>
    for (int i = 0; i < 6; i++) {
  200ccc:	f1001b5f 	cmp	x26, #0x6
  200cd0:	54ffff41 	b.ne	200cb8 <process_responses+0x2c8>  // b.any
    struct arp_packet *reply = (struct arp_packet *)(net_config.tx_data.vaddr + buffer.io_or_offset);
  200cd4:	f94037e0 	ldr	x0, [sp, #104]
    memcpy(&reply->ethdst_addr, ethdst_addr, ETH_HWADDR_LEN);
  200cd8:	aa1803e1 	mov	x1, x24
    struct arp_packet *reply = (struct arp_packet *)(net_config.tx_data.vaddr + buffer.io_or_offset);
  200cdc:	f94036f3 	ldr	x19, [x23, #104]
    memcpy(&reply->ethsrc_addr, ethsrc_addr, ETH_HWADDR_LEN);
  200ce0:	90000038 	adrp	x24, 204000 <broadcast_mac_addr>
  200ce4:	91000318 	add	x24, x24, #0x0
    memcpy(&reply->ethdst_addr, ethdst_addr, ETH_HWADDR_LEN);
  200ce8:	aa1a03e2 	mov	x2, x26
    struct arp_packet *reply = (struct arp_packet *)(net_config.tx_data.vaddr + buffer.io_or_offset);
  200cec:	8b000273 	add	x19, x19, x0
    memcpy(&reply->ethsrc_addr, ethsrc_addr, ETH_HWADDR_LEN);
  200cf0:	91004318 	add	x24, x24, #0x10
    memcpy(&reply->ethdst_addr, ethdst_addr, ETH_HWADDR_LEN);
  200cf4:	aa1303e0 	mov	x0, x19
  200cf8:	94000212 	bl	201540 <memcpy>
    memcpy(&reply->ethsrc_addr, ethsrc_addr, ETH_HWADDR_LEN);
  200cfc:	aa1a03e2 	mov	x2, x26
  200d00:	aa1803e1 	mov	x1, x24
  200d04:	91001a60 	add	x0, x19, #0x6
  200d08:	9400020e 	bl	201540 <memcpy>
    reply->protolen = IPV4_PROTO_LEN;
  200d0c:	52800088 	mov	w8, #0x4                   	// #4
    reply->opcode = HTONS(ETHARP_OPCODE_REPLY);
  200d10:	52800047 	mov	w7, #0x2                   	// #2
    reply->type = HTONS(ETH_TYPE_ARP);
  200d14:	52800104 	mov	w4, #0x8                   	// #8
    reply->hwtype = HTONS(LWIP_IANA_HWTYPE_ETHERNET);
  200d18:	52800020 	mov	w0, #0x1                   	// #1
    reply->type = HTONS(ETH_TYPE_ARP);
  200d1c:	39003264 	strb	w4, [x19, #12]
    memcpy(&reply->hwsrc_addr, hwsrc_addr, ETH_HWADDR_LEN);
  200d20:	aa1803e1 	mov	x1, x24
    reply->type = HTONS(ETH_TYPE_ARP);
  200d24:	3900367a 	strb	w26, [x19, #13]
    memcpy(&reply->hwsrc_addr, hwsrc_addr, ETH_HWADDR_LEN);
  200d28:	aa1a03e2 	mov	x2, x26
    reply->hwtype = HTONS(LWIP_IANA_HWTYPE_ETHERNET);
  200d2c:	39003a7f 	strb	wzr, [x19, #14]
  200d30:	39003e60 	strb	w0, [x19, #15]
    memcpy(&reply->hwsrc_addr, hwsrc_addr, ETH_HWADDR_LEN);
  200d34:	91005a60 	add	x0, x19, #0x16
    reply->proto = HTONS(ETH_TYPE_IP);
  200d38:	39004264 	strb	w4, [x19, #16]
  200d3c:	3900467f 	strb	wzr, [x19, #17]
    reply->hwlen = ETH_HWADDR_LEN;
  200d40:	39004a7a 	strb	w26, [x19, #18]
    reply->protolen = IPV4_PROTO_LEN;
  200d44:	39004e68 	strb	w8, [x19, #19]
    reply->opcode = HTONS(ETHARP_OPCODE_REPLY);
  200d48:	3900527f 	strb	wzr, [x19, #20]
  200d4c:	39005667 	strb	w7, [x19, #21]
    memcpy(&reply->hwsrc_addr, hwsrc_addr, ETH_HWADDR_LEN);
  200d50:	940001fc 	bl	201540 <memcpy>
    reply->ipsrc_addr = ipsrc_addr;
  200d54:	f9403fe2 	ldr	x2, [sp, #120]
  200d58:	39007262 	strb	w2, [x19, #28]
  200d5c:	53083c41 	ubfx	w1, w2, #8, #8
  200d60:	39007661 	strb	w1, [x19, #29]
    memcpy(&reply->hwdst_addr, hwdst_addr, ETH_HWADDR_LEN);
  200d64:	f9403be1 	ldr	x1, [sp, #112]
    reply->ipsrc_addr = ipsrc_addr;
  200d68:	53187c44 	lsr	w4, w2, #24
  200d6c:	53105c40 	ubfx	w0, w2, #16, #8
  200d70:	39007a60 	strb	w0, [x19, #30]
  200d74:	39007e64 	strb	w4, [x19, #31]
    memcpy(&reply->hwdst_addr, hwdst_addr, ETH_HWADDR_LEN);
  200d78:	aa1a03e2 	mov	x2, x26
  200d7c:	91008260 	add	x0, x19, #0x20
  200d80:	940001f0 	bl	201540 <memcpy>
    reply->ipdst_addr = ipdst_addr;
  200d84:	39009a79 	strb	w25, [x19, #38]
  200d88:	53187f23 	lsr	w3, w25, #24
  200d8c:	53083f22 	ubfx	w2, w25, #8, #8
  200d90:	53105f21 	ubfx	w1, w25, #16, #8
  200d94:	39009e62 	strb	w2, [x19, #39]
  200d98:	3900a261 	strb	w1, [x19, #40]
    memset(&reply->padding, 0, 10);
  200d9c:	d2800142 	mov	x2, #0xa                   	// #10
    reply->ipdst_addr = ipdst_addr;
  200da0:	3900a663 	strb	w3, [x19, #41]
    memset(&reply->padding, 0, 10);
  200da4:	52800001 	mov	w1, #0x0                   	// #0
  200da8:	9100aa60 	add	x0, x19, #0x2a
  200dac:	94000245 	bl	2016c0 <memset>
    return queue->active->tail - queue->active->head == queue->capacity;
  200db0:	f9400ac1 	ldr	x1, [x22, #16]
  200db4:	b9401ac3 	ldr	w3, [x22, #24]
  200db8:	79400022 	ldrh	w2, [x1]
  200dbc:	79400420 	ldrh	w0, [x1, #2]
  200dc0:	4b000040 	sub	w0, w2, w0
    if (net_queue_full_active(queue)) {
  200dc4:	6b03001f 	cmp	w0, w3
  200dc8:	54000ea0 	b.eq	200f9c <process_responses+0x5ac>  // b.none
    queue->active->buffers[queue->active->tail % queue->capacity] = buffer;
  200dcc:	1ac30840 	udiv	w0, w2, w3
  200dd0:	d2800108 	mov	x8, #0x8                   	// #8
    queue->active->tail++;
  200dd4:	11000444 	add	w4, w2, #0x1
    queue->active->buffers[queue->active->tail % queue->capacity] = buffer;
  200dd8:	52800707 	mov	w7, #0x38                  	// #56
  200ddc:	1b038800 	msub	w0, w0, w3, w2
  200de0:	f94037e3 	ldr	x3, [sp, #104]
  200de4:	8b205100 	add	x0, x8, w0, uxtw #4
  200de8:	8b000022 	add	x2, x1, x0
  200dec:	f8206823 	str	x3, [x1, x0]
  200df0:	79001047 	strh	w7, [x2, #8]
    queue->active->tail++;
  200df4:	79000024 	strh	w4, [x1]
  200df8:	39418ae0 	ldrb	w0, [x23, #98]
  200dfc:	f0000024 	adrp	x4, 207000 <__global_pointer$+0x27e0>
    microkit_have_signal = seL4_True;
  200e00:	f0000022 	adrp	x2, 207000 <__global_pointer$+0x27e0>
    microkit_signal_msg = seL4_MessageInfo_new(0, 0, 0, 0);
  200e04:	f0000021 	adrp	x1, 207000 <__global_pointer$+0x27e0>
    microkit_signal_cap = (BASE_OUTPUT_NOTIFICATION_CAP + ch);
  200e08:	91002800 	add	x0, x0, #0xa
    microkit_have_signal = seL4_True;
  200e0c:	52800023 	mov	w3, #0x1                   	// #1
    microkit_signal_cap = (BASE_OUTPUT_NOTIFICATION_CAP + ch);
  200e10:	f9039880 	str	x0, [x4, #1840]
    microkit_have_signal = seL4_True;
  200e14:	391c8443 	strb	w3, [x2, #1825]
    microkit_signal_msg = seL4_MessageInfo_new(0, 0, 0, 0);
  200e18:	f903943f 	str	xzr, [x1, #1832]
    return queue->free->tail - queue->free->head == queue->capacity;
  200e1c:	a9446bf9 	ldp	x25, x26, [sp, #64]
  200e20:	b94032c2 	ldr	w2, [x22, #48]
  200e24:	17ffff08 	b	200a44 <process_responses+0x54>
                arp_enqueue_response(arp_query, resp);
  200e28:	f94002c0 	ldr	x0, [x22]
                resp.ip_addr = pkt->ipdst_addr;
  200e2c:	39409a61 	ldrb	w1, [x19, #38]
  200e30:	39409e64 	ldrb	w4, [x19, #39]
  200e34:	3940a263 	ldrb	w3, [x19, #40]
  200e38:	3940a66c 	ldrb	w12, [x19, #41]
  200e3c:	aa042024 	orr	x4, x1, x4, lsl #8
    return queue->response.tail - queue->response.head == queue->capacity;
  200e40:	79700c02 	ldrh	w2, [x0, #6150]
  200e44:	79700801 	ldrh	w1, [x0, #6148]
  200e48:	aa034083 	orr	x3, x4, x3, lsl #16
    if (arp_queue_full_response(queue)) {
  200e4c:	b9700804 	ldr	w4, [x0, #12296]
  200e50:	aa0c606c 	orr	x12, x3, x12, lsl #24
    return queue->response.tail - queue->response.head == queue->capacity;
  200e54:	4b020022 	sub	w2, w1, w2
  200e58:	2a0c03eb 	mov	w11, w12
    if (arp_queue_full_response(queue)) {
  200e5c:	6b04005f 	cmp	w2, w4
  200e60:	54000060 	b.eq	200e6c <process_responses+0x47c>  // b.none
    queue->response.tail++;
  200e64:	11000421 	add	w1, w1, #0x1
  200e68:	79300801 	strh	w1, [x0, #6148]
    return key % TABLE_SIZE;
  200e6c:	1200258a 	and	w10, w12, #0x3ff
    while (table->used[index]) {
  200e70:	90000023 	adrp	x3, 204000 <broadcast_mac_addr>
  200e74:	910b8063 	add	x3, x3, #0x2e0
    uint32_t index = hash(key);
  200e78:	2a0a03e0 	mov	w0, w10
        if (table->entries[index].key == key) {
  200e7c:	d2800189 	mov	x9, #0xc                   	// #12
    while (table->used[index]) {
  200e80:	14000007 	b	200e9c <process_responses+0x4ac>
        if (table->entries[index].key == key) {
  200e84:	b8676861 	ldr	w1, [x3, x7]
  200e88:	6b01017f 	cmp	w11, w1
  200e8c:	54000520 	b.eq	200f30 <process_responses+0x540>  // b.none
        index = (index + 1) % TABLE_SIZE;
  200e90:	12002500 	and	w0, w8, #0x3ff
        if (index == original_index) {
  200e94:	6b00015f 	cmp	w10, w0
  200e98:	540002e0 	b.eq	200ef4 <process_responses+0x504>  // b.none
    while (table->used[index]) {
  200e9c:	2a0003e2 	mov	w2, w0
        index = (index + 1) % TABLE_SIZE;
  200ea0:	11000408 	add	w8, w0, #0x1
    while (table->used[index]) {
  200ea4:	8b020061 	add	x1, x3, x2
  200ea8:	91400c21 	add	x1, x1, #0x3, lsl #12
        if (table->entries[index].key == key) {
  200eac:	9b097c47 	mul	x7, x2, x9
    while (table->used[index]) {
  200eb0:	39400024 	ldrb	w4, [x1]
  200eb4:	35fffe84 	cbnz	w4, 200e84 <process_responses+0x494>
    table->entries[index].key = key;
  200eb8:	d2800184 	mov	x4, #0xc                   	// #12
    sddf_memcpy(&table->entries[index].value, value, sizeof(entry_t));
  200ebc:	d280008a 	mov	x10, #0x4                   	// #4
  200ec0:	39425fe9 	ldrb	w9, [sp, #151]
  200ec4:	52800027 	mov	w7, #0x1                   	// #1
    table->entries[index].key = key;
  200ec8:	9b047c42 	mul	x2, x2, x4
  200ecc:	b9409be8 	ldr	w8, [sp, #152]
    sddf_memcpy(&table->entries[index].value, value, sizeof(entry_t));
  200ed0:	9ba42800 	umaddl	x0, w0, w4, x10
  200ed4:	8b000064 	add	x4, x3, x0
    table->entries[index].key = key;
  200ed8:	b822686c 	str	w12, [x3, x2]
  200edc:	b820687f 	str	wzr, [x3, x0]
  200ee0:	7900089f 	strh	wzr, [x4, #4]
  200ee4:	39001887 	strb	w7, [x4, #6]
  200ee8:	39001c89 	strb	w9, [x4, #7]
  200eec:	b9000888 	str	w8, [x4, #8]
    table->used[index] = 1;  // Mark this slot as used
  200ef0:	39000027 	strb	w7, [x1]
  200ef4:	b94032c2 	ldr	w2, [x22, #48]
  200ef8:	17fffed3 	b	200a44 <process_responses+0x54>
        while (i--) {
  200efc:	aa0b03e4 	mov	x4, x11
  200f00:	2a0c03e2 	mov	w2, w12
        if (len++ >= buflen) {
  200f04:	7100405f 	cmp	w2, #0x10
  200f08:	1100044c 	add	w12, w2, #0x1
  200f0c:	54ffec60 	b.eq	200c98 <process_responses+0x2a8>  // b.none
        *rp++ = '.';
  200f10:	aa0403eb 	mov	x11, x4
  200f14:	528005c0 	mov	w0, #0x2e                  	// #46
        ap++;
  200f18:	91000421 	add	x1, x1, #0x1
    for (n = 0; n < 4; n++) {
  200f1c:	eb0d003f 	cmp	x1, x13
        *rp++ = '.';
  200f20:	38001560 	strb	w0, [x11], #1
    for (n = 0; n < 4; n++) {
  200f24:	54ffe681 	b.ne	200bf4 <process_responses+0x204>  // b.any
    *--rp = 0;
  200f28:	3900009f 	strb	wzr, [x4]
    return buf;
  200f2c:	17ffff5c 	b	200c9c <process_responses+0x2ac>
            sddf_memcpy(&table->entries[index].value, value, sizeof(entry_t));
  200f30:	d2800081 	mov	x1, #0x4                   	// #4
  200f34:	b9409be2 	ldr	w2, [sp, #152]
  200f38:	39425fe4 	ldrb	w4, [sp, #151]
  200f3c:	52800027 	mov	w7, #0x1                   	// #1
  200f40:	9ba90400 	umaddl	x0, w0, w9, x1
  200f44:	8b000061 	add	x1, x3, x0
  200f48:	b820687f 	str	wzr, [x3, x0]
  200f4c:	7900083f 	strh	wzr, [x1, #4]
  200f50:	39001827 	strb	w7, [x1, #6]
  200f54:	39001c24 	strb	w4, [x1, #7]
  200f58:	b9000822 	str	w2, [x1, #8]
  200f5c:	b94032c2 	ldr	w2, [x22, #48]
  200f60:	17fffeb9 	b	200a44 <process_responses+0x54>
            if (len++ >= buflen) {
  200f64:	11000d82 	add	w2, w12, #0x3
            *rp++ = inv[i];
  200f68:	91000d64 	add	x4, x11, #0x3
  200f6c:	17ffffe6 	b	200f04 <process_responses+0x514>
        assert(!err);
  200f70:	f0000003 	adrp	x3, 203000 <_vsnprintf+0xac0>
  200f74:	9116e063 	add	x3, x3, #0x5b8
  200f78:	9100a063 	add	x3, x3, #0x28
  200f7c:	f0000001 	adrp	x1, 203000 <_vsnprintf+0xac0>
  200f80:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200f84:	911e2021 	add	x1, x1, #0x788
  200f88:	911f4000 	add	x0, x0, #0x7d0
  200f8c:	52801c42 	mov	w2, #0xe2                  	// #226
  200f90:	94000968 	bl	203530 <_assert_fail>
    queue->active->consumer_signalled = 0;
  200f94:	f9400661 	ldr	x1, [x19, #8]
  200f98:	17fffebb 	b	200a84 <process_responses+0x94>
    assert(!err);
  200f9c:	f0000003 	adrp	x3, 203000 <_vsnprintf+0xac0>
  200fa0:	9116e063 	add	x3, x3, #0x5b8
  200fa4:	91006063 	add	x3, x3, #0x18
  200fa8:	f0000001 	adrp	x1, 203000 <_vsnprintf+0xac0>
  200fac:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200fb0:	911e2021 	add	x1, x1, #0x788
  200fb4:	911f4000 	add	x0, x0, #0x7d0
  200fb8:	528016c2 	mov	w2, #0xb6                  	// #182
  200fbc:	9400095d 	bl	203530 <_assert_fail>
  200fc0:	17ffff8e 	b	200df8 <process_responses+0x408>
        sddf_dprintf("PROXY_ARP|LOG: Transmit free queue empty or transmit active queue full. Dropping reply\n");
  200fc4:	f0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  200fc8:	91218000 	add	x0, x0, #0x860
  200fcc:	9400089d 	bl	203240 <sddf_printf_>
        return -1;
  200fd0:	17ffff93 	b	200e1c <process_responses+0x42c>
  200fd4:	d503201f 	nop
  200fd8:	d503201f 	nop
  200fdc:	d503201f 	nop

0000000000200fe0 <init>:

void init(void)
{
  200fe0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
  200fe4:	910003fd 	mov	x29, sp
  200fe8:	a90153f3 	stp	x19, x20, [sp, #16]

static bool net_config_check_magic(void *config)
{
    char *magic = (char *)config;
    for (int i = 0; i < SDDF_NET_MAGIC_LEN; i++) {
        if (magic[i] != SDDF_NET_MAGIC[i]) {
  200fec:	90000020 	adrp	x0, 204000 <broadcast_mac_addr>
  200ff0:	91016013 	add	x19, x0, #0x58
  200ff4:	39416000 	ldrb	w0, [x0, #88]
  200ff8:	a9025bf5 	stp	x21, x22, [sp, #32]
  200ffc:	7101cc1f 	cmp	w0, #0x73
  201000:	54000881 	b.ne	201110 <init+0x130>  // b.any
  201004:	39400660 	ldrb	w0, [x19, #1]
  201008:	7101101f 	cmp	w0, #0x44
  20100c:	54000821 	b.ne	201110 <init+0x130>  // b.any
  201010:	39400a60 	ldrb	w0, [x19, #2]
  201014:	7101101f 	cmp	w0, #0x44
  201018:	540007c1 	b.ne	201110 <init+0x130>  // b.any
  20101c:	39400e60 	ldrb	w0, [x19, #3]
  201020:	7101181f 	cmp	w0, #0x46
  201024:	54000761 	b.ne	201110 <init+0x130>  // b.any
  201028:	39401260 	ldrb	w0, [x19, #4]
  20102c:	7100141f 	cmp	w0, #0x5
  201030:	54000701 	b.ne	201110 <init+0x130>  // b.any
    queue->free = free;
  201034:	f0000015 	adrp	x21, 204000 <broadcast_mac_addr>
  201038:	910382b5 	add	x21, x21, #0xe0
  20103c:	f9400664 	ldr	x4, [x19, #8]
    // @kwinter: We might want to do this initialisation ourselves. This
    // only needs to be the size of an ARP packet. However, the current implementation
    // will work, just not space efficient.
    assert(net_config_check_magic((void *)&net_config));

    net_queue_init(&virt_rx_queue, net_config.rx.free_queue.vaddr, net_config.rx.active_queue.vaddr,
  201040:	f9400e61 	ldr	x1, [x19, #24]
    queue->active = active;
  201044:	a90206a4 	stp	x4, x1, [x21, #32]
                   net_config.rx.num_buffers);
    net_queue_init(&virt_tx_queue, net_config.tx.free_queue.vaddr, net_config.tx.active_queue.vaddr,
  201048:	7940c263 	ldrh	w3, [x19, #96]
  20104c:	f9402261 	ldr	x1, [x19, #64]
    queue->free = free;
  201050:	f90006a1 	str	x1, [x21, #8]
  201054:	f9402a65 	ldr	x5, [x19, #80]
    queue->active = active;
  201058:	f9000aa5 	str	x5, [x21, #16]
    net_queue_init(&virt_rx_queue, net_config.rx.free_queue.vaddr, net_config.rx.active_queue.vaddr,
  20105c:	79405262 	ldrh	w2, [x19, #40]
    queue->capacity = capacity;
  201060:	b9001aa3 	str	w3, [x21, #24]
  201064:	b90032a2 	str	w2, [x21, #48]
    for (uint32_t i = 0; i < queue->capacity; i++) {
  201068:	340004c3 	cbz	w3, 201100 <init+0x120>
  20106c:	52800013 	mov	w19, #0x0                   	// #0
  201070:	52800014 	mov	w20, #0x0                   	// #0
    queue->free->buffers[queue->free->tail % queue->capacity] = buffer;
  201074:	d2800116 	mov	x22, #0x8                   	// #8
    return queue->free->tail - queue->free->head == queue->capacity;
  201078:	79400022 	ldrh	w2, [x1]
        net_buff_desc_t buffer = {(NET_BUFFER_SIZE * i) + base_addr, 0};
  20107c:	2a1303e5 	mov	w5, w19
    return queue->free->tail - queue->free->head == queue->capacity;
  201080:	79400420 	ldrh	w0, [x1, #2]
    queue->free->tail++;
  201084:	11000444 	add	w4, w2, #0x1
    return queue->free->tail - queue->free->head == queue->capacity;
  201088:	4b000040 	sub	w0, w2, w0
    if (net_queue_full_free(queue)) {
  20108c:	6b03001f 	cmp	w0, w3
  201090:	540001c0 	b.eq	2010c8 <init+0xe8>  // b.none
    queue->free->buffers[queue->free->tail % queue->capacity] = buffer;
  201094:	1ac30840 	udiv	w0, w2, w3
    for (uint32_t i = 0; i < queue->capacity; i++) {
  201098:	11000694 	add	w20, w20, #0x1
  20109c:	6b03029f 	cmp	w20, w3
  2010a0:	11200273 	add	w19, w19, #0x800
    queue->free->buffers[queue->free->tail % queue->capacity] = buffer;
  2010a4:	1b038800 	msub	w0, w0, w3, w2
  2010a8:	8b2052c0 	add	x0, x22, w0, uxtw #4
  2010ac:	8b000022 	add	x2, x1, x0
  2010b0:	f8206825 	str	x5, [x1, x0]
  2010b4:	7900105f 	strh	wzr, [x2, #8]
    queue->free->tail++;
  2010b8:	79000024 	strh	w4, [x1]
    for (uint32_t i = 0; i < queue->capacity; i++) {
  2010bc:	54000222 	b.cs	201100 <init+0x120>  // b.hs, b.nlast
    return queue->free->tail - queue->free->head == queue->capacity;
  2010c0:	f94006a1 	ldr	x1, [x21, #8]
  2010c4:	17ffffed 	b	201078 <init+0x98>
        assert(!err);
  2010c8:	d0000003 	adrp	x3, 203000 <_vsnprintf+0xac0>
  2010cc:	9116e063 	add	x3, x3, #0x5b8
  2010d0:	91012063 	add	x3, x3, #0x48
  2010d4:	d0000001 	adrp	x1, 203000 <_vsnprintf+0xac0>
  2010d8:	d0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  2010dc:	91254021 	add	x1, x1, #0x950
  2010e0:	911f4000 	add	x0, x0, #0x7d0
  2010e4:	52801ba2 	mov	w2, #0xdd                  	// #221
  2010e8:	94000912 	bl	203530 <_assert_fail>
    for (uint32_t i = 0; i < queue->capacity; i++) {
  2010ec:	11000694 	add	w20, w20, #0x1
  2010f0:	b9401aa3 	ldr	w3, [x21, #24]
  2010f4:	11200273 	add	w19, w19, #0x800
  2010f8:	6b03029f 	cmp	w20, w3
  2010fc:	54fffe23 	b.cc	2010c0 <init+0xe0>  // b.lo, b.ul, b.last

    // arp_query = (arp_queue_handle_t *) arp_config.router.arp_queue.vaddr;
    // /* This hashtable will have been initialised by the router component. */
    // hashtable_t *arp_table_vaddr = (hashtable_t*) arp_config.router.arp_cache.vaddr;
    // arp_table = *arp_table_vaddr;
}
  201100:	a94153f3 	ldp	x19, x20, [sp, #16]
  201104:	a9425bf5 	ldp	x21, x22, [sp, #32]
  201108:	a8c37bfd 	ldp	x29, x30, [sp], #48
  20110c:	d65f03c0 	ret
    assert(net_config_check_magic((void *)&net_config));
  201110:	d0000003 	adrp	x3, 203000 <_vsnprintf+0xac0>
  201114:	9116e063 	add	x3, x3, #0x5b8
  201118:	91010063 	add	x3, x3, #0x40
  20111c:	d0000001 	adrp	x1, 203000 <_vsnprintf+0xac0>
  201120:	d0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  201124:	911e2021 	add	x1, x1, #0x788
  201128:	91248000 	add	x0, x0, #0x920
  20112c:	52801e82 	mov	w2, #0xf4                  	// #244
  201130:	94000900 	bl	203530 <_assert_fail>
  201134:	17ffffc0 	b	201034 <init+0x54>
  201138:	d503201f 	nop
  20113c:	d503201f 	nop

0000000000201140 <notified>:

void notified(microkit_channel ch)
{
  201140:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
  201144:	910003fd 	mov	x29, sp
    // sddf_dprintf("This is the vaddr of the arp queue: %p\n", arp_config.router.arp_queue.vaddr);
    // sddf_dprintf("This is the channel: %d\n", ch);
    // @kwinter: Get the appropriate channel number for the router
    // sddf_dprintf("This is the router id: %d and this sit the rx id: %d\n", arp_config.router.id, net_config.rx.id);
    if (ch == arp_config.router.id) {
  201148:	f0000001 	adrp	x1, 204000 <broadcast_mac_addr>
  20114c:	39412021 	ldrb	w1, [x1, #72]
{
  201150:	f9000bf3 	str	x19, [sp, #16]
  201154:	2a0003f3 	mov	w19, w0
    if (ch == arp_config.router.id) {
  201158:	6b00003f 	cmp	w1, w0
  20115c:	54000100 	b.eq	20117c <notified+0x3c>  // b.none
        sddf_dprintf("Processing arp requests!\n");
        process_requests();
    } if (ch == net_config.rx.id) {
  201160:	f0000000 	adrp	x0, 204000 <broadcast_mac_addr>
  201164:	39420800 	ldrb	w0, [x0, #130]
  201168:	6b13001f 	cmp	w0, w19
  20116c:	54000180 	b.eq	20119c <notified+0x5c>  // b.none
        sddf_dprintf("Processing an arp response!\n");
        process_responses();
    }
}
  201170:	f9400bf3 	ldr	x19, [sp, #16]
  201174:	a8c27bfd 	ldp	x29, x30, [sp], #32
  201178:	d65f03c0 	ret
        sddf_dprintf("Processing arp requests!\n");
  20117c:	d0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  201180:	91264000 	add	x0, x0, #0x990
  201184:	9400082f 	bl	203240 <sddf_printf_>
        process_requests();
  201188:	97fffd12 	bl	2005d0 <process_requests>
    } if (ch == net_config.rx.id) {
  20118c:	f0000000 	adrp	x0, 204000 <broadcast_mac_addr>
  201190:	39420800 	ldrb	w0, [x0, #130]
  201194:	6b13001f 	cmp	w0, w19
  201198:	54fffec1 	b.ne	201170 <notified+0x30>  // b.any
        sddf_dprintf("Processing an arp response!\n");
  20119c:	d0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  2011a0:	9126c000 	add	x0, x0, #0x9b0
  2011a4:	94000827 	bl	203240 <sddf_printf_>
}
  2011a8:	f9400bf3 	ldr	x19, [sp, #16]
  2011ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
        process_responses();
  2011b0:	17fffe10 	b	2009f0 <process_responses>
	...

00000000002011c0 <protected>:
  2011c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
  2011c4:	d0000020 	adrp	x0, 207000 <__global_pointer$+0x27e0>
  2011c8:	911b8000 	add	x0, x0, #0x6e0
  2011cc:	910003fd 	mov	x29, sp
  2011d0:	94000078 	bl	2013b0 <microkit_dbg_puts>
  2011d4:	d0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  2011d8:	91274000 	add	x0, x0, #0x9d0
  2011dc:	94000075 	bl	2013b0 <microkit_dbg_puts>
  2011e0:	d2800000 	mov	x0, #0x0                   	// #0
  2011e4:	b900001f 	str	wzr, [x0]
  2011e8:	d4207d00 	brk	#0x3e8
  2011ec:	d503201f 	nop

00000000002011f0 <fault>:
  2011f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
  2011f4:	d0000020 	adrp	x0, 207000 <__global_pointer$+0x27e0>
  2011f8:	911b8000 	add	x0, x0, #0x6e0
  2011fc:	910003fd 	mov	x29, sp
  201200:	9400006c 	bl	2013b0 <microkit_dbg_puts>
  201204:	d0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  201208:	91280000 	add	x0, x0, #0xa00
  20120c:	94000069 	bl	2013b0 <microkit_dbg_puts>
  201210:	d2800000 	mov	x0, #0x0                   	// #0
  201214:	b900001f 	str	wzr, [x0]
  201218:	d4207d00 	brk	#0x3e8
  20121c:	00000000 	udf	#0

0000000000201220 <main>:
  201220:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
  201224:	f0000000 	adrp	x0, 204000 <broadcast_mac_addr>
  201228:	91000000 	add	x0, x0, #0x0
  20122c:	910003fd 	mov	x29, sp
  201230:	a90153f3 	stp	x19, x20, [sp, #16]
  201234:	f0000014 	adrp	x20, 204000 <broadcast_mac_addr>
  201238:	91000294 	add	x20, x20, #0x0
  20123c:	a9025bf5 	stp	x21, x22, [sp, #32]
  201240:	eb140015 	subs	x21, x0, x20
  201244:	54000100 	b.eq	201264 <main+0x44>  // b.none
  201248:	9343feb5 	asr	x21, x21, #3
  20124c:	d2800013 	mov	x19, #0x0                   	// #0
  201250:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
  201254:	91000673 	add	x19, x19, #0x1
  201258:	d63f0000 	blr	x0
  20125c:	eb1302bf 	cmp	x21, x19
  201260:	54ffff88 	b.hi	201250 <main+0x30>  // b.pmore
  201264:	d0000036 	adrp	x22, 207000 <__global_pointer$+0x27e0>
  201268:	911b82d6 	add	x22, x22, #0x6e0
  20126c:	97ffff5d 	bl	200fe0 <init>
  201270:	394102c0 	ldrb	w0, [x22, #64]
  201274:	340000a0 	cbz	w0, 201288 <main+0x68>
  201278:	52800021 	mov	w1, #0x1                   	// #1
  20127c:	d28000a0 	mov	x0, #0x5                   	// #5
  201280:	390106c1 	strb	w1, [x22, #65]
  201284:	a90482df 	stp	xzr, x0, [x22, #72]
  201288:	f0000015 	adrp	x21, 204000 <broadcast_mac_addr>
  20128c:	910062b5 	add	x21, x21, #0x18
  201290:	52800000 	mov	w0, #0x0                   	// #0
  201294:	d503201f 	nop
  201298:	35000220 	cbnz	w0, 2012dc <main+0xbc>
  20129c:	39c106c0 	ldrsb	w0, [x22, #65]
  2012a0:	350004e0 	cbnz	w0, 20133c <main+0x11c>
  2012a4:	d2800020 	mov	x0, #0x1                   	// #1
  2012a8:	d2800086 	mov	x6, #0x4                   	// #4
  2012ac:	928000c7 	mov	x7, #0xfffffffffffffff9    	// #-7
  2012b0:	d4000001 	svc	#0x0
  2012b4:	f94002a6 	ldr	x6, [x21]
  2012b8:	aa0003f3 	mov	x19, x0
  2012bc:	a9008cc2 	stp	x2, x3, [x6, #8]
  2012c0:	a90194c4 	stp	x4, x5, [x6, #24]
  2012c4:	b7f00313 	tbnz	x19, #62, 201324 <main+0x104>
  2012c8:	52800014 	mov	w20, #0x0                   	// #0
  2012cc:	b6f801b3 	tbz	x19, #63, 201300 <main+0xe0>
  2012d0:	12001660 	and	w0, w19, #0x3f
  2012d4:	97ffffbb 	bl	2011c0 <protected>
  2012d8:	f9001fe0 	str	x0, [sp, #56]
  2012dc:	f94002a5 	ldr	x5, [x21]
  2012e0:	d2800020 	mov	x0, #0x1                   	// #1
  2012e4:	f9401fe1 	ldr	x1, [sp, #56]
  2012e8:	d2800086 	mov	x6, #0x4                   	// #4
  2012ec:	a9408ca2 	ldp	x2, x3, [x5, #8]
  2012f0:	92800027 	mov	x7, #0xfffffffffffffffe    	// #-2
  2012f4:	a94194a4 	ldp	x4, x5, [x5, #24]
  2012f8:	d4000001 	svc	#0x0
  2012fc:	17ffffee 	b	2012b4 <main+0x94>
  201300:	370000d3 	tbnz	w19, #0, 201318 <main+0xf8>
  201304:	d503201f 	nop
  201308:	d341fe73 	lsr	x19, x19, #1
  20130c:	11000694 	add	w20, w20, #0x1
  201310:	b4fffc73 	cbz	x19, 20129c <main+0x7c>
  201314:	3607ffb3 	tbz	w19, #0, 201308 <main+0xe8>
  201318:	2a1403e0 	mov	w0, w20
  20131c:	97ffff89 	bl	201140 <notified>
  201320:	17fffffa 	b	201308 <main+0xe8>
  201324:	12001e60 	and	w0, w19, #0xff
  201328:	9100e3e2 	add	x2, sp, #0x38
  20132c:	97ffffb1 	bl	2011f0 <fault>
  201330:	72001c1f 	tst	w0, #0xff
  201334:	1a9f07e0 	cset	w0, ne	// ne = any
  201338:	17ffffd8 	b	201298 <main+0x78>
  20133c:	f94002a5 	ldr	x5, [x21]
  201340:	d2800020 	mov	x0, #0x1                   	// #1
  201344:	a944a2c1 	ldp	x1, x8, [x22, #72]
  201348:	d2800086 	mov	x6, #0x4                   	// #4
  20134c:	a9408ca2 	ldp	x2, x3, [x5, #8]
  201350:	92800047 	mov	x7, #0xfffffffffffffffd    	// #-3
  201354:	a94194a4 	ldp	x4, x5, [x5, #24]
  201358:	d4000001 	svc	#0x0
  20135c:	f94002a6 	ldr	x6, [x21]
  201360:	aa0003f3 	mov	x19, x0
  201364:	390106df 	strb	wzr, [x22, #65]
  201368:	a9008cc2 	stp	x2, x3, [x6, #8]
  20136c:	a90194c4 	stp	x4, x5, [x6, #24]
  201370:	17ffffd5 	b	2012c4 <main+0xa4>
	...

0000000000201380 <microkit_dbg_putc>:
  201380:	d2800001 	mov	x1, #0x0                   	// #0
  201384:	92401c00 	and	x0, x0, #0xff
  201388:	d2800002 	mov	x2, #0x0                   	// #0
  20138c:	d2800003 	mov	x3, #0x0                   	// #0
  201390:	d2800004 	mov	x4, #0x0                   	// #0
  201394:	d2800005 	mov	x5, #0x0                   	// #0
  201398:	d2800006 	mov	x6, #0x0                   	// #0
  20139c:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  2013a0:	d4000001 	svc	#0x0
  2013a4:	d65f03c0 	ret
  2013a8:	d503201f 	nop
  2013ac:	d503201f 	nop

00000000002013b0 <microkit_dbg_puts>:
  2013b0:	aa0003e8 	mov	x8, x0
  2013b4:	39400000 	ldrb	w0, [x0]
  2013b8:	34000180 	cbz	w0, 2013e8 <microkit_dbg_puts+0x38>
  2013bc:	d503201f 	nop
  2013c0:	d2800001 	mov	x1, #0x0                   	// #0
  2013c4:	d2800002 	mov	x2, #0x0                   	// #0
  2013c8:	d2800003 	mov	x3, #0x0                   	// #0
  2013cc:	d2800004 	mov	x4, #0x0                   	// #0
  2013d0:	d2800005 	mov	x5, #0x0                   	// #0
  2013d4:	d2800006 	mov	x6, #0x0                   	// #0
  2013d8:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  2013dc:	d4000001 	svc	#0x0
  2013e0:	38401d00 	ldrb	w0, [x8, #1]!
  2013e4:	35fffee0 	cbnz	w0, 2013c0 <microkit_dbg_puts+0x10>
  2013e8:	d65f03c0 	ret
  2013ec:	d503201f 	nop

00000000002013f0 <__assert_fail>:
  2013f0:	d000000b 	adrp	x11, 203000 <_vsnprintf+0xac0>
  2013f4:	9128a16b 	add	x11, x11, #0xa28
  2013f8:	aa0103e9 	mov	x9, x1
  2013fc:	aa0303e8 	mov	x8, x3
  201400:	aa0003ea 	mov	x10, x0
  201404:	d2800c20 	mov	x0, #0x61                  	// #97
  201408:	d2800001 	mov	x1, #0x0                   	// #0
  20140c:	d2800002 	mov	x2, #0x0                   	// #0
  201410:	d2800003 	mov	x3, #0x0                   	// #0
  201414:	d2800004 	mov	x4, #0x0                   	// #0
  201418:	d2800005 	mov	x5, #0x0                   	// #0
  20141c:	d2800006 	mov	x6, #0x0                   	// #0
  201420:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  201424:	d4000001 	svc	#0x0
  201428:	38401d60 	ldrb	w0, [x11, #1]!
  20142c:	35fffee0 	cbnz	w0, 201408 <__assert_fail+0x18>
  201430:	39400140 	ldrb	w0, [x10]
  201434:	34000160 	cbz	w0, 201460 <__assert_fail+0x70>
  201438:	d2800001 	mov	x1, #0x0                   	// #0
  20143c:	d2800002 	mov	x2, #0x0                   	// #0
  201440:	d2800003 	mov	x3, #0x0                   	// #0
  201444:	d2800004 	mov	x4, #0x0                   	// #0
  201448:	d2800005 	mov	x5, #0x0                   	// #0
  20144c:	d2800006 	mov	x6, #0x0                   	// #0
  201450:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  201454:	d4000001 	svc	#0x0
  201458:	38401d40 	ldrb	w0, [x10, #1]!
  20145c:	35fffee0 	cbnz	w0, 201438 <__assert_fail+0x48>
  201460:	d2800400 	mov	x0, #0x20                  	// #32
  201464:	d2800001 	mov	x1, #0x0                   	// #0
  201468:	d2800002 	mov	x2, #0x0                   	// #0
  20146c:	d2800003 	mov	x3, #0x0                   	// #0
  201470:	d2800004 	mov	x4, #0x0                   	// #0
  201474:	d2800005 	mov	x5, #0x0                   	// #0
  201478:	d2800006 	mov	x6, #0x0                   	// #0
  20147c:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  201480:	d4000001 	svc	#0x0
  201484:	39400120 	ldrb	w0, [x9]
  201488:	34000180 	cbz	w0, 2014b8 <__assert_fail+0xc8>
  20148c:	d503201f 	nop
  201490:	d2800001 	mov	x1, #0x0                   	// #0
  201494:	d2800002 	mov	x2, #0x0                   	// #0
  201498:	d2800003 	mov	x3, #0x0                   	// #0
  20149c:	d2800004 	mov	x4, #0x0                   	// #0
  2014a0:	d2800005 	mov	x5, #0x0                   	// #0
  2014a4:	d2800006 	mov	x6, #0x0                   	// #0
  2014a8:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  2014ac:	d4000001 	svc	#0x0
  2014b0:	38401d20 	ldrb	w0, [x9, #1]!
  2014b4:	35fffee0 	cbnz	w0, 201490 <__assert_fail+0xa0>
  2014b8:	d2800400 	mov	x0, #0x20                  	// #32
  2014bc:	d2800001 	mov	x1, #0x0                   	// #0
  2014c0:	d2800002 	mov	x2, #0x0                   	// #0
  2014c4:	d2800003 	mov	x3, #0x0                   	// #0
  2014c8:	d2800004 	mov	x4, #0x0                   	// #0
  2014cc:	d2800005 	mov	x5, #0x0                   	// #0
  2014d0:	d2800006 	mov	x6, #0x0                   	// #0
  2014d4:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  2014d8:	d4000001 	svc	#0x0
  2014dc:	39400100 	ldrb	w0, [x8]
  2014e0:	34000180 	cbz	w0, 201510 <__assert_fail+0x120>
  2014e4:	d503201f 	nop
  2014e8:	d2800001 	mov	x1, #0x0                   	// #0
  2014ec:	d2800002 	mov	x2, #0x0                   	// #0
  2014f0:	d2800003 	mov	x3, #0x0                   	// #0
  2014f4:	d2800004 	mov	x4, #0x0                   	// #0
  2014f8:	d2800005 	mov	x5, #0x0                   	// #0
  2014fc:	d2800006 	mov	x6, #0x0                   	// #0
  201500:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  201504:	d4000001 	svc	#0x0
  201508:	38401d00 	ldrb	w0, [x8, #1]!
  20150c:	35fffee0 	cbnz	w0, 2014e8 <__assert_fail+0xf8>
  201510:	d2800140 	mov	x0, #0xa                   	// #10
  201514:	d2800001 	mov	x1, #0x0                   	// #0
  201518:	d2800002 	mov	x2, #0x0                   	// #0
  20151c:	d2800003 	mov	x3, #0x0                   	// #0
  201520:	d2800004 	mov	x4, #0x0                   	// #0
  201524:	d2800005 	mov	x5, #0x0                   	// #0
  201528:	d2800006 	mov	x6, #0x0                   	// #0
  20152c:	92800167 	mov	x7, #0xfffffffffffffff4    	// #-12
  201530:	d4000001 	svc	#0x0
  201534:	d65f03c0 	ret
	...

0000000000201540 <memcpy>:
  201540:	f9800020 	prfm	pldl1keep, [x1]
  201544:	8b020024 	add	x4, x1, x2
  201548:	8b020005 	add	x5, x0, x2
  20154c:	f100405f 	cmp	x2, #0x10
  201550:	54000209 	b.ls	201590 <memcpy+0x50>  // b.plast
  201554:	f101805f 	cmp	x2, #0x60
  201558:	54000648 	b.hi	201620 <memcpy+0xe0>  // b.pmore
  20155c:	d1000449 	sub	x9, x2, #0x1
  201560:	a9401c26 	ldp	x6, x7, [x1]
  201564:	37300469 	tbnz	w9, #6, 2015f0 <memcpy+0xb0>
  201568:	a97f348c 	ldp	x12, x13, [x4, #-16]
  20156c:	362800a9 	tbz	w9, #5, 201580 <memcpy+0x40>
  201570:	a9412428 	ldp	x8, x9, [x1, #16]
  201574:	a97e2c8a 	ldp	x10, x11, [x4, #-32]
  201578:	a9012408 	stp	x8, x9, [x0, #16]
  20157c:	a93e2caa 	stp	x10, x11, [x5, #-32]
  201580:	a9001c06 	stp	x6, x7, [x0]
  201584:	a93f34ac 	stp	x12, x13, [x5, #-16]
  201588:	d65f03c0 	ret
  20158c:	d503201f 	nop
  201590:	f100205f 	cmp	x2, #0x8
  201594:	540000e3 	b.cc	2015b0 <memcpy+0x70>  // b.lo, b.ul, b.last
  201598:	f9400026 	ldr	x6, [x1]
  20159c:	f85f8087 	ldur	x7, [x4, #-8]
  2015a0:	f9000006 	str	x6, [x0]
  2015a4:	f81f80a7 	stur	x7, [x5, #-8]
  2015a8:	d65f03c0 	ret
  2015ac:	d503201f 	nop
  2015b0:	361000c2 	tbz	w2, #2, 2015c8 <memcpy+0x88>
  2015b4:	b9400026 	ldr	w6, [x1]
  2015b8:	b85fc087 	ldur	w7, [x4, #-4]
  2015bc:	b9000006 	str	w6, [x0]
  2015c0:	b81fc0a7 	stur	w7, [x5, #-4]
  2015c4:	d65f03c0 	ret
  2015c8:	b4000102 	cbz	x2, 2015e8 <memcpy+0xa8>
  2015cc:	d341fc49 	lsr	x9, x2, #1
  2015d0:	39400026 	ldrb	w6, [x1]
  2015d4:	385ff087 	ldurb	w7, [x4, #-1]
  2015d8:	38696828 	ldrb	w8, [x1, x9]
  2015dc:	39000006 	strb	w6, [x0]
  2015e0:	38296808 	strb	w8, [x0, x9]
  2015e4:	381ff0a7 	sturb	w7, [x5, #-1]
  2015e8:	d65f03c0 	ret
  2015ec:	d503201f 	nop
  2015f0:	a9412428 	ldp	x8, x9, [x1, #16]
  2015f4:	a9422c2a 	ldp	x10, x11, [x1, #32]
  2015f8:	a943342c 	ldp	x12, x13, [x1, #48]
  2015fc:	a97e0881 	ldp	x1, x2, [x4, #-32]
  201600:	a97f0c84 	ldp	x4, x3, [x4, #-16]
  201604:	a9001c06 	stp	x6, x7, [x0]
  201608:	a9012408 	stp	x8, x9, [x0, #16]
  20160c:	a9022c0a 	stp	x10, x11, [x0, #32]
  201610:	a903340c 	stp	x12, x13, [x0, #48]
  201614:	a93e08a1 	stp	x1, x2, [x5, #-32]
  201618:	a93f0ca4 	stp	x4, x3, [x5, #-16]
  20161c:	d65f03c0 	ret
  201620:	92400c09 	and	x9, x0, #0xf
  201624:	927cec03 	and	x3, x0, #0xfffffffffffffff0
  201628:	a940342c 	ldp	x12, x13, [x1]
  20162c:	cb090021 	sub	x1, x1, x9
  201630:	8b090042 	add	x2, x2, x9
  201634:	a9411c26 	ldp	x6, x7, [x1, #16]
  201638:	a900340c 	stp	x12, x13, [x0]
  20163c:	a9422428 	ldp	x8, x9, [x1, #32]
  201640:	a9432c2a 	ldp	x10, x11, [x1, #48]
  201644:	a9c4342c 	ldp	x12, x13, [x1, #64]!
  201648:	f1024042 	subs	x2, x2, #0x90
  20164c:	54000169 	b.ls	201678 <memcpy+0x138>  // b.plast
  201650:	a9011c66 	stp	x6, x7, [x3, #16]
  201654:	a9411c26 	ldp	x6, x7, [x1, #16]
  201658:	a9022468 	stp	x8, x9, [x3, #32]
  20165c:	a9422428 	ldp	x8, x9, [x1, #32]
  201660:	a9032c6a 	stp	x10, x11, [x3, #48]
  201664:	a9432c2a 	ldp	x10, x11, [x1, #48]
  201668:	a984346c 	stp	x12, x13, [x3, #64]!
  20166c:	a9c4342c 	ldp	x12, x13, [x1, #64]!
  201670:	f1010042 	subs	x2, x2, #0x40
  201674:	54fffee8 	b.hi	201650 <memcpy+0x110>  // b.pmore
  201678:	a97c0881 	ldp	x1, x2, [x4, #-64]
  20167c:	a9011c66 	stp	x6, x7, [x3, #16]
  201680:	a97d1c86 	ldp	x6, x7, [x4, #-48]
  201684:	a9022468 	stp	x8, x9, [x3, #32]
  201688:	a97e2488 	ldp	x8, x9, [x4, #-32]
  20168c:	a9032c6a 	stp	x10, x11, [x3, #48]
  201690:	a97f2c8a 	ldp	x10, x11, [x4, #-16]
  201694:	a904346c 	stp	x12, x13, [x3, #64]
  201698:	a93c08a1 	stp	x1, x2, [x5, #-64]
  20169c:	a93d1ca6 	stp	x6, x7, [x5, #-48]
  2016a0:	a93e24a8 	stp	x8, x9, [x5, #-32]
  2016a4:	a93f2caa 	stp	x10, x11, [x5, #-16]
  2016a8:	d65f03c0 	ret
	...

00000000002016c0 <memset>:
  2016c0:	4e010c20 	dup	v0.16b, w1
  2016c4:	8b020004 	add	x4, x0, x2
  2016c8:	f101805f 	cmp	x2, #0x60
  2016cc:	540003c8 	b.hi	201744 <memset+0x84>  // b.pmore
  2016d0:	f100405f 	cmp	x2, #0x10
  2016d4:	54000202 	b.cs	201714 <memset+0x54>  // b.hs, b.nlast
  2016d8:	4e083c01 	mov	x1, v0.d[0]
  2016dc:	361800a2 	tbz	w2, #3, 2016f0 <memset+0x30>
  2016e0:	f9000001 	str	x1, [x0]
  2016e4:	f81f8081 	stur	x1, [x4, #-8]
  2016e8:	d65f03c0 	ret
  2016ec:	d503201f 	nop
  2016f0:	36100082 	tbz	w2, #2, 201700 <memset+0x40>
  2016f4:	b9000001 	str	w1, [x0]
  2016f8:	b81fc081 	stur	w1, [x4, #-4]
  2016fc:	d65f03c0 	ret
  201700:	b4000082 	cbz	x2, 201710 <memset+0x50>
  201704:	39000001 	strb	w1, [x0]
  201708:	36080042 	tbz	w2, #1, 201710 <memset+0x50>
  20170c:	781fe081 	sturh	w1, [x4, #-2]
  201710:	d65f03c0 	ret
  201714:	3d800000 	str	q0, [x0]
  201718:	373000c2 	tbnz	w2, #6, 201730 <memset+0x70>
  20171c:	3c9f0080 	stur	q0, [x4, #-16]
  201720:	36280062 	tbz	w2, #5, 20172c <memset+0x6c>
  201724:	3d800400 	str	q0, [x0, #16]
  201728:	3c9e0080 	stur	q0, [x4, #-32]
  20172c:	d65f03c0 	ret
  201730:	3d800400 	str	q0, [x0, #16]
  201734:	ad010000 	stp	q0, q0, [x0, #32]
  201738:	ad3f0080 	stp	q0, q0, [x4, #-32]
  20173c:	d65f03c0 	ret
  201740:	d503201f 	nop
  201744:	12001c21 	and	w1, w1, #0xff
  201748:	927cec03 	and	x3, x0, #0xfffffffffffffff0
  20174c:	3d800000 	str	q0, [x0]
  201750:	f104005f 	cmp	x2, #0x100
  201754:	7a402820 	ccmp	w1, #0x0, #0x0, cs	// cs = hs, nlast
  201758:	54000180 	b.eq	201788 <memset+0xc8>  // b.none
  20175c:	cb030082 	sub	x2, x4, x3
  201760:	d1004063 	sub	x3, x3, #0x10
  201764:	d1014042 	sub	x2, x2, #0x50
  201768:	ad010060 	stp	q0, q0, [x3, #32]
  20176c:	ad820060 	stp	q0, q0, [x3, #64]!
  201770:	f1010042 	subs	x2, x2, #0x40
  201774:	54ffffa8 	b.hi	201768 <memset+0xa8>  // b.pmore
  201778:	ad3e0080 	stp	q0, q0, [x4, #-64]
  20177c:	ad3f0080 	stp	q0, q0, [x4, #-32]
  201780:	d65f03c0 	ret
  201784:	d503201f 	nop
  201788:	d53b00e5 	mrs	x5, dczid_el0
  20178c:	3727fe85 	tbnz	w5, #4, 20175c <memset+0x9c>
  201790:	12000ca5 	and	w5, w5, #0xf
  201794:	710010bf 	cmp	w5, #0x4
  201798:	54000281 	b.ne	2017e8 <memset+0x128>  // b.any
  20179c:	3d800460 	str	q0, [x3, #16]
  2017a0:	ad010060 	stp	q0, q0, [x3, #32]
  2017a4:	927ae463 	and	x3, x3, #0xffffffffffffffc0
  2017a8:	ad020060 	stp	q0, q0, [x3, #64]
  2017ac:	ad030060 	stp	q0, q0, [x3, #96]
  2017b0:	cb030082 	sub	x2, x4, x3
  2017b4:	d1040042 	sub	x2, x2, #0x100
  2017b8:	91020063 	add	x3, x3, #0x80
  2017bc:	d503201f 	nop
  2017c0:	d50b7423 	dc	zva, x3
  2017c4:	91010063 	add	x3, x3, #0x40
  2017c8:	f1010042 	subs	x2, x2, #0x40
  2017cc:	54ffffa8 	b.hi	2017c0 <memset+0x100>  // b.pmore
  2017d0:	ad000060 	stp	q0, q0, [x3]
  2017d4:	ad010060 	stp	q0, q0, [x3, #32]
  2017d8:	ad3e0080 	stp	q0, q0, [x4, #-64]
  2017dc:	ad3f0080 	stp	q0, q0, [x4, #-32]
  2017e0:	d65f03c0 	ret
  2017e4:	d503201f 	nop
  2017e8:	710014bf 	cmp	w5, #0x5
  2017ec:	54000241 	b.ne	201834 <memset+0x174>  // b.any
  2017f0:	3d800460 	str	q0, [x3, #16]
  2017f4:	ad010060 	stp	q0, q0, [x3, #32]
  2017f8:	ad020060 	stp	q0, q0, [x3, #64]
  2017fc:	ad030060 	stp	q0, q0, [x3, #96]
  201800:	9279e063 	and	x3, x3, #0xffffffffffffff80
  201804:	cb030082 	sub	x2, x4, x3
  201808:	d1040042 	sub	x2, x2, #0x100
  20180c:	91020063 	add	x3, x3, #0x80
  201810:	d50b7423 	dc	zva, x3
  201814:	91020063 	add	x3, x3, #0x80
  201818:	f1020042 	subs	x2, x2, #0x80
  20181c:	54ffffa8 	b.hi	201810 <memset+0x150>  // b.pmore
  201820:	ad3c0080 	stp	q0, q0, [x4, #-128]
  201824:	ad3d0080 	stp	q0, q0, [x4, #-96]
  201828:	ad3e0080 	stp	q0, q0, [x4, #-64]
  20182c:	ad3f0080 	stp	q0, q0, [x4, #-32]
  201830:	d65f03c0 	ret
  201834:	52800086 	mov	w6, #0x4                   	// #4
  201838:	1ac520c7 	lsl	w7, w6, w5
  20183c:	910100e5 	add	x5, x7, #0x40
  201840:	eb05005f 	cmp	x2, x5
  201844:	54fff8c3 	b.cc	20175c <memset+0x9c>  // b.lo, b.ul, b.last
  201848:	d10004e6 	sub	x6, x7, #0x1
  20184c:	8b070065 	add	x5, x3, x7
  201850:	91004063 	add	x3, x3, #0x10
  201854:	eb0300a2 	subs	x2, x5, x3
  201858:	8a2600a5 	bic	x5, x5, x6
  20185c:	540000a0 	b.eq	201870 <memset+0x1b0>  // b.none
  201860:	ac820060 	stp	q0, q0, [x3], #64
  201864:	ad3f0060 	stp	q0, q0, [x3, #-32]
  201868:	f1010042 	subs	x2, x2, #0x40
  20186c:	54ffffa8 	b.hi	201860 <memset+0x1a0>  // b.pmore
  201870:	aa0503e3 	mov	x3, x5
  201874:	cb050082 	sub	x2, x4, x5
  201878:	eb070042 	subs	x2, x2, x7
  20187c:	540000a3 	b.cc	201890 <memset+0x1d0>  // b.lo, b.ul, b.last
  201880:	d50b7423 	dc	zva, x3
  201884:	8b070063 	add	x3, x3, x7
  201888:	eb070042 	subs	x2, x2, x7
  20188c:	54ffffa2 	b.cs	201880 <memset+0x1c0>  // b.hs, b.nlast
  201890:	8b070042 	add	x2, x2, x7
  201894:	d1008063 	sub	x3, x3, #0x20
  201898:	17ffffb6 	b	201770 <memset+0xb0>
  20189c:	00000000 	udf	#0

00000000002018a0 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
  2018a0:	eb03005f 	cmp	x2, x3
{
  2018a4:	12001c00 	and	w0, w0, #0xff
  if (idx < maxlen) {
  2018a8:	54000042 	b.cs	2018b0 <_out_buffer+0x10>  // b.hs, b.nlast
    ((char*)buffer)[idx] = character;
  2018ac:	38226820 	strb	w0, [x1, x2]
  }
}
  2018b0:	d65f03c0 	ret
  2018b4:	d503201f 	nop
  2018b8:	d503201f 	nop
  2018bc:	d503201f 	nop

00000000002018c0 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
  2018c0:	d65f03c0 	ret
  2018c4:	d503201f 	nop
  2018c8:	d503201f 	nop
  2018cc:	d503201f 	nop

00000000002018d0 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
  2018d0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
  2018d4:	910003fd 	mov	x29, sp
  2018d8:	a90153f3 	stp	x19, x20, [sp, #16]
  2018dc:	aa0503f3 	mov	x19, x5
  2018e0:	a9025bf5 	stp	x21, x22, [sp, #32]
  2018e4:	aa0003f5 	mov	x21, x0
  2018e8:	aa0103f6 	mov	x22, x1
  2018ec:	a90363f7 	stp	x23, x24, [sp, #48]
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  2018f0:	120004e0 	and	w0, w7, #0x3
{
  2018f4:	aa0203f8 	mov	x24, x2
  2018f8:	a9046bf9 	stp	x25, x26, [sp, #64]
  2018fc:	aa0303f7 	mov	x23, x3
  201900:	aa0403f9 	mov	x25, x4
  201904:	a90573fb 	stp	x27, x28, [sp, #80]
  201908:	2a0603fa 	mov	w26, w6
  20190c:	2a0703fb 	mov	w27, w7
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  201910:	350005e0 	cbnz	w0, 2019cc <_out_rev+0xfc>
    for (size_t i = len; i < width; i++) {
  201914:	2a1a03e0 	mov	w0, w26
  201918:	aa0203f4 	mov	x20, x2
  20191c:	cb05001c 	sub	x28, x0, x5
  201920:	eb0000bf 	cmp	x5, x0
  201924:	8b02039c 	add	x28, x28, x2
  201928:	540005a2 	b.cs	2019dc <_out_rev+0x10c>  // b.hs, b.nlast
  20192c:	d503201f 	nop
      out(' ', buffer, idx++, maxlen);
  201930:	aa1403e2 	mov	x2, x20
  201934:	aa1703e3 	mov	x3, x23
  201938:	91000694 	add	x20, x20, #0x1
  20193c:	aa1603e1 	mov	x1, x22
  201940:	52800400 	mov	w0, #0x20                  	// #32
  201944:	d63f02a0 	blr	x21
    for (size_t i = len; i < width; i++) {
  201948:	eb1c029f 	cmp	x20, x28
  20194c:	54ffff21 	b.ne	201930 <_out_rev+0x60>  // b.any
    }
  }

  // reverse string
  while (len) {
  201950:	b40002f3 	cbz	x19, 2019ac <_out_rev+0xdc>
  201954:	8b13039c 	add	x28, x28, x19
  201958:	cb130382 	sub	x2, x28, x19
    out(buf[--len], buffer, idx++, maxlen);
  20195c:	d1000673 	sub	x19, x19, #0x1
  201960:	aa1c03f4 	mov	x20, x28
  201964:	aa1703e3 	mov	x3, x23
  201968:	aa1603e1 	mov	x1, x22
  20196c:	38736b20 	ldrb	w0, [x25, x19]
  201970:	d63f02a0 	blr	x21
  while (len) {
  201974:	b5ffff33 	cbnz	x19, 201958 <_out_rev+0x88>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
  201978:	360801bb 	tbz	w27, #1, 2019ac <_out_rev+0xdc>
    while (idx - start_idx < width) {
  20197c:	cb180298 	sub	x24, x20, x24
  201980:	eb1a031f 	cmp	x24, x26
  201984:	54000142 	b.cs	2019ac <_out_rev+0xdc>  // b.hs, b.nlast
      out(' ', buffer, idx++, maxlen);
  201988:	aa1403e2 	mov	x2, x20
  20198c:	aa1703e3 	mov	x3, x23
  201990:	aa1603e1 	mov	x1, x22
    while (idx - start_idx < width) {
  201994:	91000718 	add	x24, x24, #0x1
      out(' ', buffer, idx++, maxlen);
  201998:	52800400 	mov	w0, #0x20                  	// #32
  20199c:	d63f02a0 	blr	x21
  2019a0:	91000694 	add	x20, x20, #0x1
    while (idx - start_idx < width) {
  2019a4:	eb1a031f 	cmp	x24, x26
  2019a8:	54ffff03 	b.cc	201988 <_out_rev+0xb8>  // b.lo, b.ul, b.last
    }
  }

  return idx;
}
  2019ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
  2019b0:	aa1403e0 	mov	x0, x20
  2019b4:	a94153f3 	ldp	x19, x20, [sp, #16]
  2019b8:	a94363f7 	ldp	x23, x24, [sp, #48]
  2019bc:	a9446bf9 	ldp	x25, x26, [sp, #64]
  2019c0:	a94573fb 	ldp	x27, x28, [sp, #80]
  2019c4:	a8c67bfd 	ldp	x29, x30, [sp], #96
  2019c8:	d65f03c0 	ret
  while (len) {
  2019cc:	aa0203fc 	mov	x28, x2
  2019d0:	aa0203f4 	mov	x20, x2
  2019d4:	b5fffc05 	cbnz	x5, 201954 <_out_rev+0x84>
  2019d8:	17ffffe8 	b	201978 <_out_rev+0xa8>
  2019dc:	aa0203fc 	mov	x28, x2
  2019e0:	b5fffba5 	cbnz	x5, 201954 <_out_rev+0x84>
  2019e4:	17fffff2 	b	2019ac <_out_rev+0xdc>
  2019e8:	d503201f 	nop
  2019ec:	d503201f 	nop

00000000002019f0 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  2019f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
  2019f4:	aa0603ea 	mov	x10, x6
  2019f8:	aa0403e9 	mov	x9, x4
  2019fc:	910003fd 	mov	x29, sp
  201a00:	b9403be8 	ldr	w8, [sp, #56]
  201a04:	2a0703ee 	mov	w14, w7
  201a08:	b94033e6 	ldr	w6, [sp, #48]
  201a0c:	12001cb1 	and	w17, w5, #0xff
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
  201a10:	1216010f 	and	w15, w8, #0x400
  if (!value) {
  201a14:	b4000744 	cbz	x4, 201afc <_ntoa_long+0x10c>
  if (flags & FLAGS_HASH) {
  201a18:	121c0110 	and	w16, w8, #0x10
  201a1c:	2a0803e7 	mov	w7, w8
    do {
      const char digit = (char)(value % base);
  201a20:	9aca092b 	udiv	x11, x9, x10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a24:	721b00e4 	ands	w4, w7, #0x20
  201a28:	52800c24 	mov	w4, #0x61                  	// #97
  201a2c:	5280082c 	mov	w12, #0x41                  	// #65
  201a30:	1a84118c 	csel	w12, w12, w4, ne	// ne = any
  201a34:	d2800005 	mov	x5, #0x0                   	// #0
  201a38:	5100298c 	sub	w12, w12, #0xa
  201a3c:	910043e4 	add	x4, sp, #0x10
      const char digit = (char)(value % base);
  201a40:	9b0aa568 	msub	x8, x11, x10, x9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a44:	910004a5 	add	x5, x5, #0x1
  201a48:	f100251f 	cmp	x8, #0x9
      const char digit = (char)(value % base);
  201a4c:	12001d08 	and	w8, w8, #0xff
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a50:	1100c10d 	add	w13, w8, #0x30
  201a54:	0b0c0108 	add	w8, w8, w12
  201a58:	54000208 	b.hi	201a98 <_ntoa_long+0xa8>  // b.pmore
  201a5c:	d503201f 	nop
  201a60:	8b050088 	add	x8, x4, x5
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  201a64:	f1007cbf 	cmp	x5, #0x1f
  201a68:	fa4a9120 	ccmp	x9, x10, #0x0, ls	// ls = plast
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a6c:	381ff10d 	sturb	w13, [x8, #-1]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  201a70:	540001e3 	b.cc	201aac <_ntoa_long+0xbc>  // b.lo, b.ul, b.last
      value /= base;
  201a74:	aa0b03e9 	mov	x9, x11
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a78:	910004a5 	add	x5, x5, #0x1
      const char digit = (char)(value % base);
  201a7c:	9aca092b 	udiv	x11, x9, x10
  201a80:	9b0aa568 	msub	x8, x11, x10, x9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a84:	f100251f 	cmp	x8, #0x9
      const char digit = (char)(value % base);
  201a88:	12001d08 	and	w8, w8, #0xff
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a8c:	1100c10d 	add	w13, w8, #0x30
  201a90:	0b0c0108 	add	w8, w8, w12
  201a94:	54fffe69 	b.ls	201a60 <_ntoa_long+0x70>  // b.plast
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  201a98:	eb0a013f 	cmp	x9, x10
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201a9c:	8b050089 	add	x9, x4, x5
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  201aa0:	fa5f28a2 	ccmp	x5, #0x1f, #0x2, cs	// cs = hs, nlast
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  201aa4:	381ff128 	sturb	w8, [x9, #-1]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  201aa8:	54fffe69 	b.ls	201a74 <_ntoa_long+0x84>  // b.plast
  if (!(flags & FLAGS_LEFT)) {
  201aac:	36080367 	tbz	w7, #1, 201b18 <_ntoa_long+0x128>
  if (flags & FLAGS_HASH) {
  201ab0:	34000af0 	cbz	w16, 201c0c <_ntoa_long+0x21c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  201ab4:	350008ef 	cbnz	w15, 201bd0 <_ntoa_long+0x1e0>
  201ab8:	2a0e03e9 	mov	w9, w14
  201abc:	b5000825 	cbnz	x5, 201bc0 <_ntoa_long+0x1d0>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201ac0:	f100415f 	cmp	x10, #0x10
  201ac4:	54001460 	b.eq	201d50 <_ntoa_long+0x360>  // b.none
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201ac8:	f100095f 	cmp	x10, #0x2
  201acc:	54001201 	b.ne	201d0c <_ntoa_long+0x31c>  // b.any
  201ad0:	52800c48 	mov	w8, #0x62                  	// #98
      buf[len++] = '0';
  201ad4:	52800609 	mov	w9, #0x30                  	// #48
  201ad8:	d2800045 	mov	x5, #0x2                   	// #2
      buf[len++] = 'b';
  201adc:	390043e8 	strb	w8, [sp, #16]
      buf[len++] = '0';
  201ae0:	390047e9 	strb	w9, [sp, #17]
    if (negative) {
  201ae4:	37000b71 	tbnz	w17, #0, 201c50 <_ntoa_long+0x260>
    else if (flags & FLAGS_PLUS) {
  201ae8:	36100f87 	tbz	w7, #2, 201cd8 <_ntoa_long+0x2e8>
      buf[len++] = '+';  // ignore the space if the '+' exists
  201aec:	52800568 	mov	w8, #0x2b                  	// #43
  201af0:	38256888 	strb	w8, [x4, x5]
  201af4:	910004a5 	add	x5, x5, #0x1
  201af8:	14000047 	b	201c14 <_ntoa_long+0x224>
    flags &= ~FLAGS_HASH;
  201afc:	121b7907 	and	w7, w8, #0xffffffef
  if (!(flags & FLAGS_PRECISION) || value) {
  201b00:	3400090f 	cbz	w15, 201c20 <_ntoa_long+0x230>
  if (!(flags & FLAGS_LEFT)) {
  201b04:	121f0110 	and	w16, w8, #0x2
  201b08:	37080c48 	tbnz	w8, #1, 201c90 <_ntoa_long+0x2a0>
  201b0c:	910043e4 	add	x4, sp, #0x10
  size_t len = 0U;
  201b10:	d2800005 	mov	x5, #0x0                   	// #0
  if (!(flags & FLAGS_PRECISION) || value) {
  201b14:	5280800f 	mov	w15, #0x400                 	// #1024
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b18:	2a0e03e9 	mov	w9, w14
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  201b1c:	350003e6 	cbnz	w6, 201b98 <_ntoa_long+0x1a8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b20:	eb05013f 	cmp	x9, x5
  201b24:	54fffc69 	b.ls	201ab0 <_ntoa_long+0xc0>  // b.plast
  201b28:	f10080bf 	cmp	x5, #0x20
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  201b2c:	120000ec 	and	w12, w7, #0x1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b30:	54000400 	b.eq	201bb0 <_ntoa_long+0x1c0>  // b.none
      buf[len++] = '0';
  201b34:	5280060b 	mov	w11, #0x30                  	// #48
  201b38:	14000003 	b	201b44 <_ntoa_long+0x154>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b3c:	f10080bf 	cmp	x5, #0x20
  201b40:	54000740 	b.eq	201c28 <_ntoa_long+0x238>  // b.none
      buf[len++] = '0';
  201b44:	910004a5 	add	x5, x5, #0x1
  201b48:	8b050088 	add	x8, x4, x5
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b4c:	eb0900bf 	cmp	x5, x9
      buf[len++] = '0';
  201b50:	381ff10b 	sturb	w11, [x8, #-1]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b54:	54ffff43 	b.cc	201b3c <_ntoa_long+0x14c>  // b.lo, b.ul, b.last
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b58:	34fffacc 	cbz	w12, 201ab0 <_ntoa_long+0xc0>
  201b5c:	2a0603eb 	mov	w11, w6
  201b60:	eb05017f 	cmp	x11, x5
  201b64:	54fffa69 	b.ls	201ab0 <_ntoa_long+0xc0>  // b.plast
  201b68:	f10080bf 	cmp	x5, #0x20
      buf[len++] = '0';
  201b6c:	5280060c 	mov	w12, #0x30                  	// #48
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b70:	54000081 	b.ne	201b80 <_ntoa_long+0x190>  // b.any
  201b74:	14000030 	b	201c34 <_ntoa_long+0x244>
  201b78:	f10080bf 	cmp	x5, #0x20
  201b7c:	54000a80 	b.eq	201ccc <_ntoa_long+0x2dc>  // b.none
      buf[len++] = '0';
  201b80:	910004a5 	add	x5, x5, #0x1
  201b84:	8b050088 	add	x8, x4, x5
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b88:	eb0b00bf 	cmp	x5, x11
      buf[len++] = '0';
  201b8c:	381ff10c 	sturb	w12, [x8, #-1]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201b90:	54ffff41 	b.ne	201b78 <_ntoa_long+0x188>  // b.any
  201b94:	17ffffc7 	b	201ab0 <_ntoa_long+0xc0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  201b98:	120000ec 	and	w12, w7, #0x1
  201b9c:	37000667 	tbnz	w7, #0, 201c68 <_ntoa_long+0x278>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201ba0:	eb05013f 	cmp	x9, x5
  201ba4:	54fff869 	b.ls	201ab0 <_ntoa_long+0xc0>  // b.plast
  201ba8:	f10080bf 	cmp	x5, #0x20
  201bac:	54fffc41 	b.ne	201b34 <_ntoa_long+0x144>  // b.any
  if (flags & FLAGS_HASH) {
  201bb0:	340004d0 	cbz	w16, 201c48 <_ntoa_long+0x258>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  201bb4:	350004af 	cbnz	w15, 201c48 <_ntoa_long+0x258>
  201bb8:	d2800405 	mov	x5, #0x20                  	// #32
  201bbc:	d503201f 	nop
  201bc0:	eb05013f 	cmp	x9, x5
  201bc4:	54000720 	b.eq	201ca8 <_ntoa_long+0x2b8>  // b.none
  201bc8:	eb2640bf 	cmp	x5, w6, uxtw
  201bcc:	540006e0 	b.eq	201ca8 <_ntoa_long+0x2b8>  // b.none
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201bd0:	f100415f 	cmp	x10, #0x10
  201bd4:	540008c0 	b.eq	201cec <_ntoa_long+0x2fc>  // b.none
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201bd8:	7100095f 	cmp	w10, #0x2
  201bdc:	fa5f08a2 	ccmp	x5, #0x1f, #0x2, eq	// eq = none
  201be0:	540000a8 	b.hi	201bf4 <_ntoa_long+0x204>  // b.pmore
      buf[len++] = 'b';
  201be4:	aa0503e8 	mov	x8, x5
  201be8:	910004a5 	add	x5, x5, #0x1
  201bec:	52800c49 	mov	w9, #0x62                  	// #98
  201bf0:	38286889 	strb	w9, [x4, x8]
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
  201bf4:	f10080bf 	cmp	x5, #0x20
  201bf8:	540000e0 	b.eq	201c14 <_ntoa_long+0x224>  // b.none
      buf[len++] = '0';
  201bfc:	aa0503e8 	mov	x8, x5
  201c00:	910004a5 	add	x5, x5, #0x1
  201c04:	52800609 	mov	w9, #0x30                  	// #48
  201c08:	38286889 	strb	w9, [x4, x8]
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
  201c0c:	f10080bf 	cmp	x5, #0x20
  201c10:	54fff6a1 	b.ne	201ae4 <_ntoa_long+0xf4>  // b.any
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  201c14:	97ffff2f 	bl	2018d0 <_out_rev>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
  201c18:	a8c37bfd 	ldp	x29, x30, [sp], #48
  201c1c:	d65f03c0 	ret
  if (!(flags & FLAGS_PRECISION) || value) {
  201c20:	52800010 	mov	w16, #0x0                   	// #0
  201c24:	17ffff7f 	b	201a20 <_ntoa_long+0x30>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201c28:	3400052c 	cbz	w12, 201ccc <_ntoa_long+0x2dc>
  201c2c:	710080df 	cmp	w6, #0x20
  201c30:	540004e9 	b.ls	201ccc <_ntoa_long+0x2dc>  // b.plast
  if (flags & FLAGS_HASH) {
  201c34:	d2800405 	mov	x5, #0x20                  	// #32
  201c38:	34fffef0 	cbz	w16, 201c14 <_ntoa_long+0x224>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  201c3c:	34fffc2f 	cbz	w15, 201bc0 <_ntoa_long+0x1d0>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201c40:	f100415f 	cmp	x10, #0x10
  201c44:	54fffe81 	b.ne	201c14 <_ntoa_long+0x224>  // b.any
  201c48:	d2800405 	mov	x5, #0x20                  	// #32
  201c4c:	17fffff2 	b	201c14 <_ntoa_long+0x224>
      buf[len++] = '-';
  201c50:	528005a8 	mov	w8, #0x2d                  	// #45
  201c54:	38256888 	strb	w8, [x4, x5]
  201c58:	910004a5 	add	x5, x5, #0x1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  201c5c:	97ffff1d 	bl	2018d0 <_out_rev>
}
  201c60:	a8c37bfd 	ldp	x29, x30, [sp], #48
  201c64:	d65f03c0 	ret
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  201c68:	370001d1 	tbnz	w17, #0, 201ca0 <_ntoa_long+0x2b0>
  201c6c:	721e04ff 	tst	w7, #0xc
  201c70:	54000181 	b.ne	201ca0 <_ntoa_long+0x2b0>  // b.any
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201c74:	eb05013f 	cmp	x9, x5
  201c78:	54fff729 	b.ls	201b5c <_ntoa_long+0x16c>  // b.plast
  201c7c:	f10080bf 	cmp	x5, #0x20
  201c80:	54fff5a1 	b.ne	201b34 <_ntoa_long+0x144>  // b.any
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201c84:	710080df 	cmp	w6, #0x20
  201c88:	54fffd68 	b.hi	201c34 <_ntoa_long+0x244>  // b.pmore
  201c8c:	17ffffc9 	b	201bb0 <_ntoa_long+0x1c0>
  201c90:	910043e4 	add	x4, sp, #0x10
  size_t len = 0U;
  201c94:	d2800005 	mov	x5, #0x0                   	// #0
    if (negative) {
  201c98:	3607f291 	tbz	w17, #0, 201ae8 <_ntoa_long+0xf8>
  201c9c:	17ffffed 	b	201c50 <_ntoa_long+0x260>
      width--;
  201ca0:	510004c6 	sub	w6, w6, #0x1
  201ca4:	17fffff4 	b	201c74 <_ntoa_long+0x284>
      if (len && (base == 16U)) {
  201ca8:	f10004a8 	subs	x8, x5, #0x1
  201cac:	7a501940 	ccmp	w10, #0x10, #0x0, ne	// ne = any
  201cb0:	54000461 	b.ne	201d3c <_ntoa_long+0x34c>  // b.any
        len--;
  201cb4:	d10008a5 	sub	x5, x5, #0x2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201cb8:	36280567 	tbz	w7, #5, 201d64 <_ntoa_long+0x374>
      buf[len++] = 'X';
  201cbc:	52800b09 	mov	w9, #0x58                  	// #88
  201cc0:	38256889 	strb	w9, [x4, x5]
  201cc4:	aa0803e5 	mov	x5, x8
  201cc8:	17ffffcd 	b	201bfc <_ntoa_long+0x20c>
  if (flags & FLAGS_HASH) {
  201ccc:	d2800405 	mov	x5, #0x20                  	// #32
  201cd0:	35ffef30 	cbnz	w16, 201ab4 <_ntoa_long+0xc4>
  201cd4:	17ffffd0 	b	201c14 <_ntoa_long+0x224>
    else if (flags & FLAGS_SPACE) {
  201cd8:	361ff9e7 	tbz	w7, #3, 201c14 <_ntoa_long+0x224>
      buf[len++] = ' ';
  201cdc:	52800408 	mov	w8, #0x20                  	// #32
  201ce0:	38256888 	strb	w8, [x4, x5]
  201ce4:	910004a5 	add	x5, x5, #0x1
  201ce8:	17ffffcb 	b	201c14 <_ntoa_long+0x224>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201cec:	372801a7 	tbnz	w7, #5, 201d20 <_ntoa_long+0x330>
  201cf0:	f10080bf 	cmp	x5, #0x20
  201cf4:	54fffaa0 	b.eq	201c48 <_ntoa_long+0x258>  // b.none
      buf[len++] = 'X';
  201cf8:	aa0503e8 	mov	x8, x5
  201cfc:	910004a5 	add	x5, x5, #0x1
      buf[len++] = 'x';
  201d00:	52800f09 	mov	w9, #0x78                  	// #120
  201d04:	38286889 	strb	w9, [x4, x8]
  201d08:	17ffffbb 	b	201bf4 <_ntoa_long+0x204>
      buf[len++] = '0';
  201d0c:	52800608 	mov	w8, #0x30                  	// #48
  201d10:	390043e8 	strb	w8, [sp, #16]
  201d14:	d2800025 	mov	x5, #0x1                   	// #1
    if (negative) {
  201d18:	3607ee91 	tbz	w17, #0, 201ae8 <_ntoa_long+0xf8>
  201d1c:	17ffffcd 	b	201c50 <_ntoa_long+0x260>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201d20:	f10080bf 	cmp	x5, #0x20
  201d24:	54fff920 	b.eq	201c48 <_ntoa_long+0x258>  // b.none
      buf[len++] = 'X';
  201d28:	aa0503e8 	mov	x8, x5
  201d2c:	910004a5 	add	x5, x5, #0x1
  201d30:	52800b09 	mov	w9, #0x58                  	// #88
  201d34:	38286889 	strb	w9, [x4, x8]
  201d38:	17ffffaf 	b	201bf4 <_ntoa_long+0x204>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201d3c:	f100415f 	cmp	x10, #0x10
  201d40:	540001a0 	b.eq	201d74 <_ntoa_long+0x384>  // b.none
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201d44:	f100095f 	cmp	x10, #0x2
  201d48:	54fff520 	b.eq	201bec <_ntoa_long+0x1fc>  // b.none
  201d4c:	17ffffae 	b	201c04 <_ntoa_long+0x214>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201d50:	721b00e5 	ands	w5, w7, #0x20
  201d54:	52800b08 	mov	w8, #0x58                  	// #88
  201d58:	52800f05 	mov	w5, #0x78                  	// #120
  201d5c:	1a851108 	csel	w8, w8, w5, ne	// ne = any
  201d60:	17ffff5d 	b	201ad4 <_ntoa_long+0xe4>
      buf[len++] = 'x';
  201d64:	52800f09 	mov	w9, #0x78                  	// #120
  201d68:	38256889 	strb	w9, [x4, x5]
      buf[len++] = 'X';
  201d6c:	aa0803e5 	mov	x5, x8
  201d70:	17ffffa3 	b	201bfc <_ntoa_long+0x20c>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  201d74:	362ffc67 	tbz	w7, #5, 201d00 <_ntoa_long+0x310>
  201d78:	17ffffee 	b	201d30 <_ntoa_long+0x340>
  201d7c:	d503201f 	nop

0000000000201d80 <_out_char>:
  if (character) {
  201d80:	72001c00 	ands	w0, w0, #0xff
  201d84:	54000041 	b.ne	201d8c <_out_char+0xc>  // b.any
}
  201d88:	d65f03c0 	ret
    _sddf_putchar(character);
  201d8c:	140005f5 	b	203560 <_sddf_putchar>

0000000000201d90 <_out_fct>:
  if (character) {
  201d90:	72001c00 	ands	w0, w0, #0xff
  201d94:	54000080 	b.eq	201da4 <_out_fct+0x14>  // b.none
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
  201d98:	a9400422 	ldp	x2, x1, [x1]
  201d9c:	aa0203f0 	mov	x16, x2
  201da0:	d61f0200 	br	x16
}
  201da4:	d65f03c0 	ret
  201da8:	d503201f 	nop
  201dac:	d503201f 	nop

0000000000201db0 <_ftoa>:

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
  201db0:	1e602000 	fcmp	d0, d0
{
  201db4:	2a0603e7 	mov	w7, w6
  if (value != value)
  201db8:	54000fa1 	b.ne	201fac <_ftoa+0x1fc>  // b.any
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
  201dbc:	92e00206 	mov	x6, #0xffefffffffffffff    	// #-4503599627370497
  201dc0:	9e6700c1 	fmov	d1, x6
  201dc4:	1e612010 	fcmpe	d0, d1
  201dc8:	54001324 	b.mi	20202c <_ftoa+0x27c>  // b.first
  201dcc:	aa0003ef 	mov	x15, x0
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
  201dd0:	92f00200 	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
  201dd4:	9e670001 	fmov	d1, x0
  201dd8:	aa0103f0 	mov	x16, x1
  201ddc:	aa0203f1 	mov	x17, x2
  201de0:	aa0303f2 	mov	x18, x3
  201de4:	1e612010 	fcmpe	d0, d1
  201de8:	54000ccc 	b.gt	201f80 <_ftoa+0x1d0>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
  201dec:	d2d9aca0 	mov	x0, #0xcd6500000000        	// #225833675390976
  201df0:	f2e839a0 	movk	x0, #0x41cd, lsl #48
  201df4:	9e670001 	fmov	d1, x0
  201df8:	1e612010 	fcmpe	d0, d1
  201dfc:	540010cc 	b.gt	202014 <_ftoa+0x264>
  201e00:	d2d9aca0 	mov	x0, #0xcd6500000000        	// #225833675390976
  201e04:	f2f839a0 	movk	x0, #0xc1cd, lsl #48
  201e08:	9e670001 	fmov	d1, x0
  201e0c:	1e612010 	fcmpe	d0, d1
  201e10:	54001024 	b.mi	202014 <_ftoa+0x264>  // b.first
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
  201e14:	1e602018 	fcmpe	d0, #0.0
{
  201e18:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
  201e1c:	910003fd 	mov	x29, sp
  if (value < 0) {
  201e20:	54000e44 	b.mi	201fe8 <_ftoa+0x238>  // b.first
  bool negative = false;
  201e24:	52800003 	mov	w3, #0x0                   	// #0
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
  201e28:	36500e87 	tbz	w7, #10, 201ff8 <_ftoa+0x248>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
  201e2c:	7100249f 	cmp	w4, #0x9
  201e30:	54001ac9 	b.ls	202188 <_ftoa+0x3d8>  // b.plast
  201e34:	910043ec 	add	x12, sp, #0x10
  201e38:	d2800008 	mov	x8, #0x0                   	// #0
    buf[len++] = '0';
  201e3c:	52800601 	mov	w1, #0x30                  	// #48
  201e40:	91000508 	add	x8, x8, #0x1
    prec--;
  201e44:	51000484 	sub	w4, w4, #0x1
    buf[len++] = '0';
  201e48:	8b080180 	add	x0, x12, x8
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
  201e4c:	f1007d1f 	cmp	x8, #0x1f
  201e50:	7a499880 	ccmp	w4, #0x9, #0x0, ls	// ls = plast
    buf[len++] = '0';
  201e54:	381ff001 	sturb	w1, [x0, #-1]
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
  201e58:	54ffff48 	b.hi	201e40 <_ftoa+0x90>  // b.pmore
  201e5c:	d2d9aca0 	mov	x0, #0xcd6500000000        	// #225833675390976
  201e60:	f2e839a0 	movk	x0, #0x41cd, lsl #48
  201e64:	9e670002 	fmov	d2, x0
  }

  int whole = (int)value;
  201e68:	1e78000a 	fcvtzs	w10, d0
  double tmp = (value - whole) * pow10[prec];
  unsigned long frac = (unsigned long)tmp;
  diff = tmp - frac;

  if (diff > 0.5) {
  201e6c:	1e6c1003 	fmov	d3, #5.000000000000000000e-01
  double tmp = (value - whole) * pow10[prec];
  201e70:	1e620141 	scvtf	d1, w10
  201e74:	1e613801 	fsub	d1, d0, d1
  201e78:	1e620821 	fmul	d1, d1, d2
  unsigned long frac = (unsigned long)tmp;
  201e7c:	9e79002e 	fcvtzu	x14, d1
  diff = tmp - frac;
  201e80:	9e6301c4 	ucvtf	d4, x14
  201e84:	1e643821 	fsub	d1, d1, d4
  if (diff > 0.5) {
  201e88:	1e632030 	fcmpe	d1, d3
  201e8c:	5400106c 	b.gt	202098 <_ftoa+0x2e8>
    if (frac >= pow10[prec]) {
      frac = 0;
      ++whole;
    }
  }
  else if (diff < 0.5) {
  201e90:	54000084 	b.mi	201ea0 <_ftoa+0xf0>  // b.first
  }
  else if ((frac == 0U) || (frac & 1U)) {
  201e94:	b50016ae 	cbnz	x14, 202168 <_ftoa+0x3b8>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  201e98:	910005ce 	add	x14, x14, #0x1
  201e9c:	d503201f 	nop
  }

  if (prec == 0U) {
  201ea0:	35000d04 	cbnz	w4, 202040 <_ftoa+0x290>
    diff = value - (double)whole;
  201ea4:	1e620142 	scvtf	d2, w10
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
  201ea8:	1e6c1001 	fmov	d1, #5.000000000000000000e-01
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
  201eac:	12000140 	and	w0, w10, #0x1
  201eb0:	0b000140 	add	w0, w10, w0
    diff = value - (double)whole;
  201eb4:	1e623800 	fsub	d0, d0, d2
      ++whole;
  201eb8:	1e612010 	fcmpe	d0, d1
  201ebc:	1a80414a 	csel	w10, w10, w0, mi	// mi = first
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    buf[len++] = (char)(48 + (whole % 10));
  201ec0:	528ccce1 	mov	w1, #0x6667                	// #26215
  201ec4:	72acccc1 	movk	w1, #0x6666, lsl #16
  201ec8:	52800142 	mov	w2, #0xa                   	// #10
  201ecc:	1400000a 	b	201ef4 <_ftoa+0x144>
  201ed0:	9362fd29 	asr	x9, x9, #34
  201ed4:	91000508 	add	x8, x8, #0x1
  201ed8:	4b8a7d29 	sub	w9, w9, w10, asr #31
  201edc:	8b080180 	add	x0, x12, x8
  201ee0:	1b02a92b 	msub	w11, w9, w2, w10
    if (!(whole /= 10)) {
  201ee4:	2a0903ea 	mov	w10, w9
    buf[len++] = (char)(48 + (whole % 10));
  201ee8:	1100c169 	add	w9, w11, #0x30
  201eec:	381ff009 	sturb	w9, [x0, #-1]
    if (!(whole /= 10)) {
  201ef0:	34000e4a 	cbz	w10, 2020b8 <_ftoa+0x308>
    buf[len++] = (char)(48 + (whole % 10));
  201ef4:	9b217d49 	smull	x9, w10, w1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
  201ef8:	f100811f 	cmp	x8, #0x20
  201efc:	54fffea1 	b.ne	201ed0 <_ftoa+0x120>  // b.any
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
  201f00:	120004e0 	and	w0, w7, #0x3
  201f04:	7100041f 	cmp	w0, #0x1
  201f08:	54000281 	b.ne	201f58 <_ftoa+0x1a8>  // b.any
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  201f0c:	34000265 	cbz	w5, 201f58 <_ftoa+0x1a8>
  201f10:	35001323 	cbnz	w3, 202174 <_ftoa+0x3c4>
  201f14:	721e04ff 	tst	w7, #0xc
  201f18:	540012e1 	b.ne	202174 <_ftoa+0x3c4>  // b.any
      width--;
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
  201f1c:	2a0503e2 	mov	w2, w5
  201f20:	eb02011f 	cmp	x8, x2
  201f24:	54001002 	b.cs	202124 <_ftoa+0x374>  // b.hs, b.nlast
  201f28:	f100811f 	cmp	x8, #0x20
      buf[len++] = '0';
  201f2c:	52800601 	mov	w1, #0x30                  	// #48
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
  201f30:	54000120 	b.eq	201f54 <_ftoa+0x1a4>  // b.none
  201f34:	d503201f 	nop
      buf[len++] = '0';
  201f38:	91000508 	add	x8, x8, #0x1
  201f3c:	8b080180 	add	x0, x12, x8
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
  201f40:	eb02011f 	cmp	x8, x2
      buf[len++] = '0';
  201f44:	381ff001 	sturb	w1, [x0, #-1]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
  201f48:	54000be0 	b.eq	2020c4 <_ftoa+0x314>  // b.none
  201f4c:	f100811f 	cmp	x8, #0x20
  201f50:	54ffff41 	b.ne	201f38 <_ftoa+0x188>  // b.any
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
  201f54:	d2800408 	mov	x8, #0x20                  	// #32
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  201f58:	2a0503e6 	mov	w6, w5
  201f5c:	aa0c03e4 	mov	x4, x12
  201f60:	aa0803e5 	mov	x5, x8
  201f64:	aa1203e3 	mov	x3, x18
  201f68:	aa1103e2 	mov	x2, x17
  201f6c:	aa1003e1 	mov	x1, x16
  201f70:	aa0f03e0 	mov	x0, x15
  201f74:	97fffe57 	bl	2018d0 <_out_rev>
}
  201f78:	a8c37bfd 	ldp	x29, x30, [sp], #48
  201f7c:	d65f03c0 	ret
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
  201f80:	37100207 	tbnz	w7, #2, 201fc0 <_ftoa+0x210>
  201f84:	d2800060 	mov	x0, #0x3                   	// #3
  201f88:	2a0503e6 	mov	w6, w5
  201f8c:	d0000004 	adrp	x4, 203000 <_vsnprintf+0xac0>
  201f90:	91290084 	add	x4, x4, #0xa40
  201f94:	aa0003e5 	mov	x5, x0
  201f98:	aa1203e3 	mov	x3, x18
  201f9c:	aa1103e2 	mov	x2, x17
  201fa0:	aa1003e1 	mov	x1, x16
  201fa4:	aa0f03e0 	mov	x0, x15
  201fa8:	17fffe4a 	b	2018d0 <_out_rev>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  201fac:	2a0503e6 	mov	w6, w5
  201fb0:	d0000004 	adrp	x4, 203000 <_vsnprintf+0xac0>
  201fb4:	d2800065 	mov	x5, #0x3                   	// #3
  201fb8:	91292084 	add	x4, x4, #0xa48
  201fbc:	17fffe45 	b	2018d0 <_out_rev>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
  201fc0:	d2800080 	mov	x0, #0x4                   	// #4
  201fc4:	2a0503e6 	mov	w6, w5
  201fc8:	d0000004 	adrp	x4, 203000 <_vsnprintf+0xac0>
  201fcc:	9128e084 	add	x4, x4, #0xa38
  201fd0:	aa0003e5 	mov	x5, x0
  201fd4:	aa1203e3 	mov	x3, x18
  201fd8:	aa1103e2 	mov	x2, x17
  201fdc:	aa1003e1 	mov	x1, x16
  201fe0:	aa0f03e0 	mov	x0, x15
  201fe4:	17fffe3b 	b	2018d0 <_out_rev>
    value = 0 - value;
  201fe8:	2f00e401 	movi	d1, #0x0
    negative = true;
  201fec:	52800023 	mov	w3, #0x1                   	// #1
    value = 0 - value;
  201ff0:	1e603820 	fsub	d0, d1, d0
  if (!(flags & FLAGS_PRECISION)) {
  201ff4:	3757f1c7 	tbnz	w7, #10, 201e2c <_ftoa+0x7c>
  201ff8:	d2d09000 	mov	x0, #0x848000000000        	// #145685290680320
  201ffc:	910043ec 	add	x12, sp, #0x10
  202000:	f2e825c0 	movk	x0, #0x412e, lsl #48
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  202004:	528000c4 	mov	w4, #0x6                   	// #6
  202008:	9e670002 	fmov	d2, x0
  20200c:	d2800008 	mov	x8, #0x0                   	// #0
  202010:	17ffff96 	b	201e68 <_ftoa+0xb8>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
  202014:	2a0703e6 	mov	w6, w7
  202018:	aa1203e3 	mov	x3, x18
  20201c:	aa1103e2 	mov	x2, x17
  202020:	aa1003e1 	mov	x1, x16
  202024:	aa0f03e0 	mov	x0, x15
  202028:	14000062 	b	2021b0 <_etoa>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  20202c:	2a0503e6 	mov	w6, w5
  202030:	b0000004 	adrp	x4, 203000 <_vsnprintf+0xac0>
  202034:	d2800085 	mov	x5, #0x4                   	// #4
  202038:	91294084 	add	x4, x4, #0xa50
  20203c:	17fffe25 	b	2018d0 <_out_rev>
  202040:	51008081 	sub	w1, w4, #0x20
      buf[len++] = (char)(48U + (frac % 10U));
  202044:	b202e7e2 	mov	x2, #0xcccccccccccccccc    	// #-3689348814741910324
  202048:	0b080021 	add	w1, w1, w8
  20204c:	f29999a2 	movk	x2, #0xcccd
  202050:	1400000d 	b	202084 <_ftoa+0x2d4>
  202054:	d343fd6b 	lsr	x11, x11, #3
      if (!(frac /= 10U)) {
  202058:	f10025df 	cmp	x14, #0x9
      --count;
  20205c:	51000480 	sub	w0, w4, #0x1
      buf[len++] = (char)(48U + (frac % 10U));
  202060:	91000509 	add	x9, x8, #0x1
  202064:	8b0b096d 	add	x13, x11, x11, lsl #2
  202068:	cb0d05cd 	sub	x13, x14, x13, lsl #1
      if (!(frac /= 10U)) {
  20206c:	aa0b03ee 	mov	x14, x11
      buf[len++] = (char)(48U + (frac % 10U));
  202070:	1100c1ab 	add	w11, w13, #0x30
  202074:	3828698b 	strb	w11, [x12, x8]
      if (!(frac /= 10U)) {
  202078:	54000349 	b.ls	2020e0 <_ftoa+0x330>  // b.plast
      --count;
  20207c:	2a0003e4 	mov	w4, w0
      buf[len++] = (char)(48U + (frac % 10U));
  202080:	aa0903e8 	mov	x8, x9
  202084:	9bc27dcb 	umulh	x11, x14, x2
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
  202088:	6b01009f 	cmp	w4, w1
  20208c:	54fffe41 	b.ne	202054 <_ftoa+0x2a4>  // b.any
      buf[len++] = (char)(48U + (frac % 10U));
  202090:	d2800408 	mov	x8, #0x20                  	// #32
  202094:	17ffff8b 	b	201ec0 <_ftoa+0x110>
    ++frac;
  202098:	910005ce 	add	x14, x14, #0x1
    if (frac >= pow10[prec]) {
  20209c:	9e6301c1 	ucvtf	d1, x14
  2020a0:	1e622030 	fcmpe	d1, d2
  2020a4:	5400004a 	b.ge	2020ac <_ftoa+0x2fc>  // b.tcont
  2020a8:	17ffff7e 	b	201ea0 <_ftoa+0xf0>
      ++whole;
  2020ac:	1100054a 	add	w10, w10, #0x1
      frac = 0;
  2020b0:	d280000e 	mov	x14, #0x0                   	// #0
  2020b4:	17ffff7b 	b	201ea0 <_ftoa+0xf0>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
  2020b8:	120004e0 	and	w0, w7, #0x3
  2020bc:	7100041f 	cmp	w0, #0x1
  2020c0:	54000700 	b.eq	2021a0 <_ftoa+0x3f0>  // b.none
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
  2020c4:	f100811f 	cmp	x8, #0x20
  2020c8:	54fff480 	b.eq	201f58 <_ftoa+0x1a8>  // b.none
    if (negative) {
  2020cc:	34000323 	cbz	w3, 202130 <_ftoa+0x380>
      buf[len++] = '-';
  2020d0:	528005a0 	mov	w0, #0x2d                  	// #45
  2020d4:	38286980 	strb	w0, [x12, x8]
  2020d8:	91000508 	add	x8, x8, #0x1
  2020dc:	17ffff9f 	b	201f58 <_ftoa+0x1a8>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
  2020e0:	f100813f 	cmp	x9, #0x20
  2020e4:	54fffd60 	b.eq	202090 <_ftoa+0x2e0>  // b.none
  2020e8:	91000908 	add	x8, x8, #0x2
  2020ec:	51000884 	sub	w4, w4, #0x2
  2020f0:	8b040108 	add	x8, x8, x4
      buf[len++] = '0';
  2020f4:	52800601 	mov	w1, #0x30                  	// #48
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
  2020f8:	35000080 	cbnz	w0, 202108 <_ftoa+0x358>
  2020fc:	14000013 	b	202148 <_ftoa+0x398>
  202100:	eb08013f 	cmp	x9, x8
  202104:	54000220 	b.eq	202148 <_ftoa+0x398>  // b.none
      buf[len++] = '0';
  202108:	91000529 	add	x9, x9, #0x1
  20210c:	8b090180 	add	x0, x12, x9
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
  202110:	f100813f 	cmp	x9, #0x20
      buf[len++] = '0';
  202114:	381ff001 	sturb	w1, [x0, #-1]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
  202118:	54ffff41 	b.ne	202100 <_ftoa+0x350>  // b.any
      buf[len++] = (char)(48U + (frac % 10U));
  20211c:	d2800408 	mov	x8, #0x20                  	// #32
  202120:	17ffff68 	b	201ec0 <_ftoa+0x110>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
  202124:	f100811f 	cmp	x8, #0x20
  202128:	54fff180 	b.eq	201f58 <_ftoa+0x1a8>  // b.none
  20212c:	d503201f 	nop
    else if (flags & FLAGS_PLUS) {
  202130:	37100147 	tbnz	w7, #2, 202158 <_ftoa+0x3a8>
    else if (flags & FLAGS_SPACE) {
  202134:	361ff127 	tbz	w7, #3, 201f58 <_ftoa+0x1a8>
      buf[len++] = ' ';
  202138:	52800400 	mov	w0, #0x20                  	// #32
  20213c:	38286980 	strb	w0, [x12, x8]
  202140:	91000508 	add	x8, x8, #0x1
  202144:	17ffff85 	b	201f58 <_ftoa+0x1a8>
      buf[len++] = '.';
  202148:	528005c0 	mov	w0, #0x2e                  	// #46
  20214c:	91000528 	add	x8, x9, #0x1
  202150:	38296980 	strb	w0, [x12, x9]
  202154:	17ffff5b 	b	201ec0 <_ftoa+0x110>
      buf[len++] = '+';  // ignore the space if the '+' exists
  202158:	52800560 	mov	w0, #0x2b                  	// #43
  20215c:	38286980 	strb	w0, [x12, x8]
  202160:	91000508 	add	x8, x8, #0x1
  202164:	17ffff7d 	b	201f58 <_ftoa+0x1a8>
  else if ((frac == 0U) || (frac & 1U)) {
  202168:	3607e9ce 	tbz	w14, #0, 201ea0 <_ftoa+0xf0>
    ++frac;
  20216c:	910005ce 	add	x14, x14, #0x1
  202170:	17ffff4c 	b	201ea0 <_ftoa+0xf0>
      width--;
  202174:	510004a2 	sub	w2, w5, #0x1
  202178:	aa0203e5 	mov	x5, x2
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
  20217c:	eb08005f 	cmp	x2, x8
  202180:	54ffed48 	b.hi	201f28 <_ftoa+0x178>  // b.pmore
  202184:	17ffffd0 	b	2020c4 <_ftoa+0x314>
  double tmp = (value - whole) * pow10[prec];
  202188:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  20218c:	911ac000 	add	x0, x0, #0x6b0
  202190:	910043ec 	add	x12, sp, #0x10
  202194:	d2800008 	mov	x8, #0x0                   	// #0
  202198:	fc645802 	ldr	d2, [x0, w4, uxtw #3]
  20219c:	17ffff33 	b	201e68 <_ftoa+0xb8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  2021a0:	34fff925 	cbz	w5, 2020c4 <_ftoa+0x314>
  2021a4:	17ffff5b 	b	201f10 <_ftoa+0x160>
  2021a8:	d503201f 	nop
  2021ac:	d503201f 	nop

00000000002021b0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
  2021b0:	d10203ff 	sub	sp, sp, #0x80
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
  2021b4:	1e602000 	fcmp	d0, d0
{
  2021b8:	a9017bfd 	stp	x29, x30, [sp, #16]
  2021bc:	910043fd 	add	x29, sp, #0x10
  2021c0:	a90253f3 	stp	x19, x20, [sp, #32]
  2021c4:	aa0203f3 	mov	x19, x2
  2021c8:	2a0603f4 	mov	w20, w6
  2021cc:	a9035bf5 	stp	x21, x22, [sp, #48]
  2021d0:	aa0003f6 	mov	x22, x0
  2021d4:	a90463f7 	stp	x23, x24, [sp, #64]
  2021d8:	aa0103f7 	mov	x23, x1
  2021dc:	aa0303f8 	mov	x24, x3
  2021e0:	a90673fb 	stp	x27, x28, [sp, #96]
  2021e4:	2a0503fb 	mov	w27, w5
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
  2021e8:	54001301 	b.ne	202448 <_etoa+0x298>  // b.any
  2021ec:	92f00200 	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
  2021f0:	9e670001 	fmov	d1, x0
  2021f4:	1e612010 	fcmpe	d0, d1
  2021f8:	5400128c 	b.gt	202448 <_etoa+0x298>
  2021fc:	92e00200 	mov	x0, #0xffefffffffffffff    	// #-4503599627370497
  202200:	9e670001 	fmov	d1, x0
  202204:	1e612010 	fcmpe	d0, d1
  202208:	54001204 	b.mi	202448 <_etoa+0x298>  // b.first
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  }

  // determine the sign
  const bool negative = value < 0;
  if (negative) {
  20220c:	1e602018 	fcmpe	d0, #0.0
  202210:	1e614002 	fneg	d2, d0

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  202214:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  202218:	fd454416 	ldr	d22, [x0, #2696]
  20221c:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  202220:	fd454801 	ldr	d1, [x0, #2704]
  202224:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  202228:	fd454c15 	ldr	d21, [x0, #2712]
  20222c:	1e604c42 	fcsel	d2, d2, d0, mi	// mi = first
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  202230:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  202234:	fd455014 	ldr	d20, [x0, #2720]
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  202238:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  20223c:	fd455413 	ldr	d19, [x0, #2728]
  202240:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  202244:	fd455812 	ldr	d18, [x0, #2736]
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  202248:	1e6f1018 	fmov	d24, #1.500000000000000000e+00
  conv.F = value;
  20224c:	9e660040 	fmov	x0, d2
  202250:	a9056bf9 	stp	x25, x26, [sp, #80]
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  202254:	1e6c1005 	fmov	d5, #5.000000000000000000e-01
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  202258:	1e659003 	fmov	d3, #1.400000000000000000e+01
  20225c:	1e649007 	fmov	d7, #1.000000000000000000e+01
  202260:	1e631011 	fmov	d17, #6.000000000000000000e+00
  202264:	1e601006 	fmov	d6, #2.000000000000000000e+00
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  202268:	9240cc01 	and	x1, x0, #0xfffffffffffff
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  20226c:	d374f800 	ubfx	x0, x0, #52, #11
  202270:	510ffc00 	sub	w0, w0, #0x3ff
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  202274:	b24c2421 	orr	x1, x1, #0x3ff0000000000000
  202278:	9e670024 	fmov	d4, x1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  20227c:	1e6e1010 	fmov	d16, #1.000000000000000000e+00
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  202280:	1e620017 	scvtf	d23, w0
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  202284:	721600c3 	ands	w3, w6, #0x400
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  202288:	1e783884 	fsub	d4, d4, d24
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  20228c:	528000c2 	mov	w2, #0x6                   	// #6
  202290:	1a821084 	csel	w4, w4, w2, ne	// ne = any
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  202294:	1f5606e1 	fmadd	d1, d23, d22, d1
  202298:	1f550481 	fmadd	d1, d4, d21, d1
  20229c:	1e780039 	fcvtzs	w25, d1
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  2022a0:	1e620324 	scvtf	d4, w25
  2022a4:	1f541481 	fmadd	d1, d4, d20, d5
  2022a8:	1e780020 	fcvtzs	w0, d1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  2022ac:	1e620001 	scvtf	d1, w0
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  2022b0:	110ffc00 	add	w0, w0, #0x3ff
  2022b4:	9e670005 	fmov	d5, x0
  2022b8:	5f7454a5 	shl	d5, d5, #52
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  2022bc:	1e730821 	fmul	d1, d1, d19
  2022c0:	1f728481 	fnmsub	d1, d4, d18, d1
  const double z2 = z * z;
  2022c4:	1e610824 	fmul	d4, d1, d1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  2022c8:	1e6138c6 	fsub	d6, d6, d1
  2022cc:	1e612821 	fadd	d1, d1, d1
  2022d0:	1e631883 	fdiv	d3, d4, d3
  2022d4:	1e672863 	fadd	d3, d3, d7
  2022d8:	1e631883 	fdiv	d3, d4, d3
  2022dc:	1e712863 	fadd	d3, d3, d17
  2022e0:	1e631884 	fdiv	d4, d4, d3
  2022e4:	1e662884 	fadd	d4, d4, d6
  2022e8:	1e641821 	fdiv	d1, d1, d4
  2022ec:	1e702821 	fadd	d1, d1, d16
  2022f0:	1e650821 	fmul	d1, d1, d5
  // correct for rounding errors
  if (value < conv.F) {
  2022f4:	1e612050 	fcmpe	d2, d1
  2022f8:	54000c24 	b.mi	20247c <_etoa+0x2cc>  // b.first
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
  2022fc:	11018f20 	add	w0, w25, #0x63
  202300:	7103181f 	cmp	w0, #0xc6
  202304:	1a9f97fc 	cset	w28, hi	// hi = pmore
  202308:	1100139c 	add	w28, w28, #0x4

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
  20230c:	36580134 	tbz	w20, #11, 202330 <_etoa+0x180>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
  202310:	b0000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  202314:	fd455c03 	ldr	d3, [x0, #2744]
  202318:	1e632050 	fcmpe	d2, d3
  20231c:	54000d2a 	b.ge	2024c0 <_etoa+0x310>  // b.tcont
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
  202320:	34000084 	cbz	w4, 202330 <_etoa+0x180>
        --prec;
  202324:	7100007f 	cmp	w3, #0x0
  202328:	1a9f07e0 	cset	w0, ne	// ne = any
  20232c:	4b000084 	sub	w4, w4, w0

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
  202330:	6b1c0365 	subs	w5, w27, w28
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
  202334:	121f0280 	and	w0, w20, #0x2
    fwidth -= minwidth;
  202338:	1a9f80a5 	csel	w5, w5, wzr, hi	// hi = pmore
  if ((flags & FLAGS_LEFT) && minwidth) {
  20233c:	7100001f 	cmp	w0, #0x0
  202340:	1a9f07e0 	cset	w0, ne	// ne = any
  202344:	b9007fe0 	str	w0, [sp, #124]
  202348:	1a9f00a5 	csel	w5, w5, wzr, eq	// eq = none
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
  }

  // rescale the float value
  if (expval) {
  20234c:	5280003a 	mov	w26, #0x1                   	// #1
  202350:	34000059 	cbz	w25, 202358 <_etoa+0x1a8>
    value /= conv.F;
  202354:	1e611842 	fdiv	d2, d2, d1
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
  202358:	1e602018 	fcmpe	d0, #0.0
  20235c:	54000ae4 	b.mi	2024b8 <_etoa+0x308>  // b.first
  202360:	1e604040 	fmov	d0, d2
  202364:	12147a86 	and	w6, w20, #0xfffff7ff
  202368:	aa1803e3 	mov	x3, x24
  20236c:	aa1303e2 	mov	x2, x19
  202370:	aa1703e1 	mov	x1, x23
  202374:	aa1603e0 	mov	x0, x22
  202378:	97fffe8e 	bl	201db0 <_ftoa>
  20237c:	aa0003f5 	mov	x21, x0

  // output the exponent part
  if (minwidth) {
  202380:	3400053a 	cbz	w26, 202424 <_etoa+0x274>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
  202384:	721b0294 	ands	w20, w20, #0x20
  202388:	52800ca1 	mov	w1, #0x65                  	// #101
  20238c:	aa1503e2 	mov	x2, x21
  202390:	aa1803e3 	mov	x3, x24
  202394:	528008a0 	mov	w0, #0x45                  	// #69
  202398:	1a800020 	csel	w0, w1, w0, eq	// eq = none
  20239c:	aa1703e1 	mov	x1, x23
  2023a0:	d63f02c0 	blr	x22
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
  2023a4:	7100033f 	cmp	w25, #0x0
  2023a8:	528000a0 	mov	w0, #0x5                   	// #5
  2023ac:	5a99a724 	cneg	w4, w25, lt	// lt = tstop
  2023b0:	5100079c 	sub	w28, w28, #0x1
  2023b4:	b90003fc 	str	w28, [sp]
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
  2023b8:	910006b4 	add	x20, x21, #0x1
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
  2023bc:	b9000be0 	str	w0, [sp, #8]
  2023c0:	aa1403e2 	mov	x2, x20
  2023c4:	93407c84 	sxtw	x4, w4
  2023c8:	531f7f25 	lsr	w5, w25, #31
  2023cc:	aa1803e3 	mov	x3, x24
  2023d0:	aa1703e1 	mov	x1, x23
  2023d4:	aa1603e0 	mov	x0, x22
  2023d8:	52800007 	mov	w7, #0x0                   	// #0
  2023dc:	d2800146 	mov	x6, #0xa                   	// #10
  2023e0:	97fffd84 	bl	2019f0 <_ntoa_long>
  2023e4:	aa0003f5 	mov	x21, x0
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
  2023e8:	b9407fe0 	ldr	w0, [sp, #124]
  2023ec:	340001c0 	cbz	w0, 202424 <_etoa+0x274>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
  2023f0:	cb1302b3 	sub	x19, x21, x19
  2023f4:	eb1b027f 	cmp	x19, x27
  2023f8:	54000162 	b.cs	202424 <_etoa+0x274>  // b.hs, b.nlast
  2023fc:	d503201f 	nop
  202400:	aa1503e2 	mov	x2, x21
  202404:	aa1803e3 	mov	x3, x24
  202408:	aa1703e1 	mov	x1, x23
  20240c:	91000673 	add	x19, x19, #0x1
  202410:	52800400 	mov	w0, #0x20                  	// #32
  202414:	d63f02c0 	blr	x22
  202418:	910006b5 	add	x21, x21, #0x1
  20241c:	eb13037f 	cmp	x27, x19
  202420:	54ffff08 	b.hi	202400 <_etoa+0x250>  // b.pmore
    }
  }
  return idx;
}
  202424:	a9417bfd 	ldp	x29, x30, [sp, #16]
  202428:	aa1503e0 	mov	x0, x21
  20242c:	a94253f3 	ldp	x19, x20, [sp, #32]
  202430:	a9435bf5 	ldp	x21, x22, [sp, #48]
  202434:	a94463f7 	ldp	x23, x24, [sp, #64]
  202438:	a9456bf9 	ldp	x25, x26, [sp, #80]
  20243c:	a94673fb 	ldp	x27, x28, [sp, #96]
  202440:	910203ff 	add	sp, sp, #0x80
  202444:	d65f03c0 	ret
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  202448:	2a1403e6 	mov	w6, w20
  20244c:	2a1b03e5 	mov	w5, w27
  202450:	aa1803e3 	mov	x3, x24
  202454:	aa1303e2 	mov	x2, x19
  202458:	aa1703e1 	mov	x1, x23
  20245c:	aa1603e0 	mov	x0, x22
}
  202460:	a9417bfd 	ldp	x29, x30, [sp, #16]
  202464:	a94253f3 	ldp	x19, x20, [sp, #32]
  202468:	a9435bf5 	ldp	x21, x22, [sp, #48]
  20246c:	a94463f7 	ldp	x23, x24, [sp, #64]
  202470:	a94673fb 	ldp	x27, x28, [sp, #96]
  202474:	910203ff 	add	sp, sp, #0x80
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
  202478:	17fffe4e 	b	201db0 <_ftoa>
    conv.F /= 10;
  20247c:	1e671821 	fdiv	d1, d1, d7
    expval--;
  202480:	51000739 	sub	w25, w25, #0x1
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
  202484:	11018f20 	add	w0, w25, #0x63
  202488:	7103181f 	cmp	w0, #0xc6
  20248c:	1a9f97fc 	cset	w28, hi	// hi = pmore
  202490:	1100139c 	add	w28, w28, #0x4
  if (flags & FLAGS_ADAPT_EXP) {
  202494:	365ff4f4 	tbz	w20, #11, 202330 <_etoa+0x180>
  202498:	17ffff9e 	b	202310 <_etoa+0x160>
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
  20249c:	2a0103f4 	mov	w20, w1
    fwidth = 0U;
  2024a0:	52800005 	mov	w5, #0x0                   	// #0
      minwidth = 0U;
  2024a4:	5280001c 	mov	w28, #0x0                   	// #0
      expval   = 0;
  2024a8:	52800019 	mov	w25, #0x0                   	// #0
  if ((flags & FLAGS_LEFT) && minwidth) {
  2024ac:	5280001a 	mov	w26, #0x0                   	// #0
  2024b0:	b9007fff 	str	wzr, [sp, #124]
  2024b4:	d503201f 	nop
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
  2024b8:	1e614042 	fneg	d2, d2
  2024bc:	17ffffa9 	b	202360 <_etoa+0x1b0>
    if ((value >= 1e-4) && (value < 1e6)) {
  2024c0:	d2d09000 	mov	x0, #0x848000000000        	// #145685290680320
  2024c4:	f2e825c0 	movk	x0, #0x412e, lsl #48
  2024c8:	9e670003 	fmov	d3, x0
  2024cc:	1e632050 	fcmpe	d2, d3
  2024d0:	54000044 	b.mi	2024d8 <_etoa+0x328>  // b.first
  2024d4:	17ffff93 	b	202320 <_etoa+0x170>
        prec = (unsigned)((int)prec - expval - 1);
  2024d8:	4b190080 	sub	w0, w4, w25
  2024dc:	6b04033f 	cmp	w25, w4
  2024e0:	51000400 	sub	w0, w0, #0x1
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
  2024e4:	32160281 	orr	w1, w20, #0x400
        prec = (unsigned)((int)prec - expval - 1);
  2024e8:	1a9fb004 	csel	w4, w0, wzr, lt	// lt = tstop
  if (width > minwidth) {
  2024ec:	350001bb 	cbnz	w27, 202520 <_etoa+0x370>
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
  2024f0:	1e602018 	fcmpe	d0, #0.0
  2024f4:	54fffd44 	b.mi	20249c <_etoa+0x2ec>  // b.first
  2024f8:	12147a86 	and	w6, w20, #0xfffff7ff
  2024fc:	1e604040 	fmov	d0, d2
  202500:	a9456bf9 	ldp	x25, x26, [sp, #80]
  202504:	321600c6 	orr	w6, w6, #0x400
  202508:	aa1803e3 	mov	x3, x24
  20250c:	aa1303e2 	mov	x2, x19
  202510:	aa1703e1 	mov	x1, x23
  202514:	aa1603e0 	mov	x0, x22
  202518:	52800005 	mov	w5, #0x0                   	// #0
  20251c:	17ffffd1 	b	202460 <_etoa+0x2b0>
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
  202520:	2a0103f4 	mov	w20, w1
    fwidth -= minwidth;
  202524:	2a1b03e5 	mov	w5, w27
  if (width > minwidth) {
  202528:	5280001a 	mov	w26, #0x0                   	// #0
  20252c:	52800019 	mov	w25, #0x0                   	// #0
      minwidth = 0U;
  202530:	5280001c 	mov	w28, #0x0                   	// #0
  if (width > minwidth) {
  202534:	b9007fff 	str	wzr, [sp, #124]
  202538:	17ffff88 	b	202358 <_etoa+0x1a8>
  20253c:	d503201f 	nop

0000000000202540 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
  202540:	d102c3ff 	sub	sp, sp, #0xb0
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
  202544:	f100003f 	cmp	x1, #0x0
{
  202548:	a9017bfd 	stp	x29, x30, [sp, #16]
  20254c:	910043fd 	add	x29, sp, #0x10
  202550:	a90253f3 	stp	x19, x20, [sp, #32]
    out = _out_null;
  202554:	f0fffff3 	adrp	x19, 201000 <init+0x20>
  202558:	91230273 	add	x19, x19, #0x8c0
{
  20255c:	a9035bf5 	stp	x21, x22, [sp, #48]
    out = _out_null;
  202560:	9a800273 	csel	x19, x19, x0, eq	// eq = none
{
  202564:	aa0103f5 	mov	x21, x1
  202568:	a90463f7 	stp	x23, x24, [sp, #64]
  20256c:	aa0203f4 	mov	x20, x2
  202570:	a9056bf9 	stp	x25, x26, [sp, #80]
  202574:	b940189a 	ldr	w26, [x4, #24]
  202578:	a90673fb 	stp	x27, x28, [sp, #96]
  }

  while (*format)
  20257c:	d280001c 	mov	x28, #0x0                   	// #0
  202580:	f9400880 	ldr	x0, [x4, #16]
  202584:	f9004fe0 	str	x0, [sp, #152]
  202588:	39400061 	ldrb	w1, [x3]
  20258c:	a9400897 	ldp	x23, x2, [x4]
  202590:	f90047e2 	str	x2, [sp, #136]
  202594:	b9401c80 	ldr	w0, [x4, #28]
  202598:	b9007fe0 	str	w0, [sp, #124]
  20259c:	34004001 	cbz	w1, 202d9c <_vsnprintf+0x85c>
  2025a0:	aa0303fb 	mov	x27, x3
  2025a4:	52800158 	mov	w24, #0xa                   	// #10
  2025a8:	14000009 	b	2025cc <_vsnprintf+0x8c>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
  2025ac:	91000796 	add	x22, x28, #0x1
  2025b0:	aa1c03e2 	mov	x2, x28
  2025b4:	aa1603fc 	mov	x28, x22
  2025b8:	aa1403e3 	mov	x3, x20
  2025bc:	aa1503e1 	mov	x1, x21
  2025c0:	d63f0260 	blr	x19
  while (*format)
  2025c4:	39400361 	ldrb	w1, [x27]
  2025c8:	34001241 	cbz	w1, 202810 <_vsnprintf+0x2d0>
      format++;
  2025cc:	9100077b 	add	x27, x27, #0x1
      out(*format, buffer, idx++, maxlen);
  2025d0:	2a0103e0 	mov	w0, w1
    if (*format != '%') {
  2025d4:	7100943f 	cmp	w1, #0x25
  2025d8:	54fffea1 	b.ne	2025ac <_vsnprintf+0x6c>  // b.any
      switch (*format) {
  2025dc:	aa1b03e1 	mov	x1, x27
    flags = 0U;
  2025e0:	52800006 	mov	w6, #0x0                   	// #0
      switch (*format) {
  2025e4:	38401420 	ldrb	w0, [x1], #1
  2025e8:	7100ac1f 	cmp	w0, #0x2b
  2025ec:	54000180 	b.eq	20261c <_vsnprintf+0xdc>  // b.none
  2025f0:	540001c8 	b.hi	202628 <_vsnprintf+0xe8>  // b.pmore
  2025f4:	7100801f 	cmp	w0, #0x20
  2025f8:	54000260 	b.eq	202644 <_vsnprintf+0x104>  // b.none
  2025fc:	71008c1f 	cmp	w0, #0x23
  202600:	54000981 	b.ne	202730 <_vsnprintf+0x1f0>  // b.any
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
  202604:	321c00c6 	orr	w6, w6, #0x10
  while (*format)
  202608:	aa0103fb 	mov	x27, x1
      switch (*format) {
  20260c:	aa1b03e1 	mov	x1, x27
  202610:	38401420 	ldrb	w0, [x1], #1
  202614:	7100ac1f 	cmp	w0, #0x2b
  202618:	54fffec1 	b.ne	2025f0 <_vsnprintf+0xb0>  // b.any
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
  20261c:	321e00c6 	orr	w6, w6, #0x4
  while (*format)
  202620:	aa0103fb 	mov	x27, x1
  202624:	17fffffa 	b	20260c <_vsnprintf+0xcc>
      switch (*format) {
  202628:	7100b41f 	cmp	w0, #0x2d
  20262c:	54000120 	b.eq	202650 <_vsnprintf+0x110>  // b.none
  202630:	7100c01f 	cmp	w0, #0x30
  202634:	54000141 	b.ne	20265c <_vsnprintf+0x11c>  // b.any
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
  202638:	320000c6 	orr	w6, w6, #0x1
  while (*format)
  20263c:	aa0103fb 	mov	x27, x1
  202640:	17fffff3 	b	20260c <_vsnprintf+0xcc>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
  202644:	321d00c6 	orr	w6, w6, #0x8
  while (*format)
  202648:	aa0103fb 	mov	x27, x1
  20264c:	17fffff0 	b	20260c <_vsnprintf+0xcc>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
  202650:	321f00c6 	orr	w6, w6, #0x2
  while (*format)
  202654:	aa0103fb 	mov	x27, x1
  202658:	17ffffed 	b	20260c <_vsnprintf+0xcc>
  return (ch >= '0') && (ch <= '9');
  20265c:	5100c002 	sub	w2, w0, #0x30
  unsigned int i = 0U;
  202660:	52800019 	mov	w25, #0x0                   	// #0
    if (_is_digit(*format)) {
  202664:	12001c42 	and	w2, w2, #0xff
  202668:	7100245f 	cmp	w2, #0x9
  20266c:	54000148 	b.hi	202694 <_vsnprintf+0x154>  // b.pmore
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
  202670:	1b180325 	madd	w5, w25, w24, w0
  while (_is_digit(**str)) {
  202674:	39400020 	ldrb	w0, [x1]
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
  202678:	aa0103fb 	mov	x27, x1
  20267c:	91000421 	add	x1, x1, #0x1
  return (ch >= '0') && (ch <= '9');
  202680:	5100c002 	sub	w2, w0, #0x30
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
  202684:	5100c0b9 	sub	w25, w5, #0x30
  while (_is_digit(**str)) {
  202688:	12001c42 	and	w2, w2, #0xff
  20268c:	7100245f 	cmp	w2, #0x9
  202690:	54ffff09 	b.ls	202670 <_vsnprintf+0x130>  // b.plast
    if (*format == '.') {
  202694:	7100b81f 	cmp	w0, #0x2e
    precision = 0U;
  202698:	52800016 	mov	w22, #0x0                   	// #0
    if (*format == '.') {
  20269c:	540001a1 	b.ne	2026d0 <_vsnprintf+0x190>  // b.any
      if (_is_digit(*format)) {
  2026a0:	39400760 	ldrb	w0, [x27, #1]
      flags |= FLAGS_PRECISION;
  2026a4:	321600c6 	orr	w6, w6, #0x400
      format++;
  2026a8:	aa0103e2 	mov	x2, x1
  return (ch >= '0') && (ch <= '9');
  2026ac:	5100c003 	sub	w3, w0, #0x30
      if (_is_digit(*format)) {
  2026b0:	12001c63 	and	w3, w3, #0xff
  2026b4:	7100247f 	cmp	w3, #0x9
  2026b8:	54002709 	b.ls	202b98 <_vsnprintf+0x658>  // b.plast
      else if (*format == '*') {
  2026bc:	7100a81f 	cmp	w0, #0x2a
  2026c0:	54002840 	b.eq	202bc8 <_vsnprintf+0x688>  // b.none
      format++;
  2026c4:	aa0103fb 	mov	x27, x1
  2026c8:	91000421 	add	x1, x1, #0x1
  2026cc:	d503201f 	nop
    switch (*format) {
  2026d0:	7101b01f 	cmp	w0, #0x6c
        format++;
  2026d4:	aa0103e2 	mov	x2, x1
    switch (*format) {
  2026d8:	54002060 	b.eq	202ae4 <_vsnprintf+0x5a4>  // b.none
  2026dc:	540004a8 	b.hi	202770 <_vsnprintf+0x230>  // b.pmore
  2026e0:	7101a01f 	cmp	w0, #0x68
  2026e4:	54001f60 	b.eq	202ad0 <_vsnprintf+0x590>  // b.none
  2026e8:	7101a81f 	cmp	w0, #0x6a
  2026ec:	54002841 	b.ne	202bf4 <_vsnprintf+0x6b4>  // b.any
        if (*format == 'l') {
  2026f0:	39400760 	ldrb	w0, [x27, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  2026f4:	321800c6 	orr	w6, w6, #0x100
        format++;
  2026f8:	9100045b 	add	x27, x2, #0x1
    switch (*format) {
  2026fc:	71019c1f 	cmp	w0, #0x67
  202700:	54000428 	b.hi	202784 <_vsnprintf+0x244>  // b.pmore
  202704:	7100901f 	cmp	w0, #0x24
  202708:	54fff529 	b.ls	2025ac <_vsnprintf+0x6c>  // b.plast
  20270c:	51009401 	sub	w1, w0, #0x25
  202710:	7101083f 	cmp	w1, #0x42
  202714:	54fff4c8 	b.hi	2025ac <_vsnprintf+0x6c>  // b.pmore
  202718:	b0000002 	adrp	x2, 203000 <_vsnprintf+0xac0>
  20271c:	91188042 	add	x2, x2, #0x620
  202720:	78615842 	ldrh	w2, [x2, w1, uxtw #1]
  202724:	10000061 	adr	x1, 202730 <_vsnprintf+0x1f0>
  202728:	8b22a822 	add	x2, x1, w2, sxth #2
  20272c:	d61f0040 	br	x2
    else if (*format == '*') {
  202730:	7100a81f 	cmp	w0, #0x2a
    width = 0U;
  202734:	52800019 	mov	w25, #0x0                   	// #0
    precision = 0U;
  202738:	52800016 	mov	w22, #0x0                   	// #0
    else if (*format == '*') {
  20273c:	54fffca1 	b.ne	2026d0 <_vsnprintf+0x190>  // b.any
      const int w = va_arg(va, int);
  202740:	37f810fa 	tbnz	w26, #31, 20295c <_vsnprintf+0x41c>
  202744:	91002ee2 	add	x2, x23, #0xb
  202748:	aa1703e0 	mov	x0, x23
  20274c:	927df057 	and	x23, x2, #0xfffffffffffffff8
  202750:	b9400019 	ldr	w25, [x0]
      if (w < 0) {
  202754:	36f80079 	tbz	w25, #31, 202760 <_vsnprintf+0x220>
        flags |= FLAGS_LEFT;    // reverse padding
  202758:	321f00c6 	orr	w6, w6, #0x2
        width = (unsigned int)-w;
  20275c:	4b1903f9 	neg	w25, w25
    if (*format == '.') {
  202760:	39400760 	ldrb	w0, [x27, #1]
      format++;
  202764:	aa0103fb 	mov	x27, x1
  202768:	91000421 	add	x1, x1, #0x1
  20276c:	17ffffca 	b	202694 <_vsnprintf+0x154>
    switch (*format) {
  202770:	7101d01f 	cmp	w0, #0x74
  202774:	54fffbe0 	b.eq	2026f0 <_vsnprintf+0x1b0>  // b.none
  202778:	7101e81f 	cmp	w0, #0x7a
  20277c:	54fffba0 	b.eq	2026f0 <_vsnprintf+0x1b0>  // b.none
        format++;
  202780:	aa0103fb 	mov	x27, x1
    switch (*format) {
  202784:	5101a401 	sub	w1, w0, #0x69
  202788:	12001c21 	and	w1, w1, #0xff
  20278c:	71003c3f 	cmp	w1, #0xf
  202790:	54fff0e8 	b.hi	2025ac <_vsnprintf+0x6c>  // b.pmore
  202794:	d2800022 	mov	x2, #0x1                   	// #1
  202798:	d2920823 	mov	x3, #0x9041                	// #36929
  20279c:	9ac12042 	lsl	x2, x2, x1
  2027a0:	ea03005f 	tst	x2, x3
  2027a4:	54001ae1 	b.ne	202b00 <_vsnprintf+0x5c0>  // b.any
  2027a8:	7100283f 	cmp	w1, #0xa
  2027ac:	54000540 	b.eq	202854 <_vsnprintf+0x314>  // b.none
  2027b0:	71001c3f 	cmp	w1, #0x7
  2027b4:	54ffefc1 	b.ne	2025ac <_vsnprintf+0x6c>  // b.any
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
  2027b8:	52800420 	mov	w0, #0x21                  	// #33
  2027bc:	2a0000c0 	orr	w0, w6, w0
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
  2027c0:	37f8253a 	tbnz	w26, #31, 202c64 <_vsnprintf+0x724>
  2027c4:	91003ee2 	add	x2, x23, #0xf
  2027c8:	aa1703e1 	mov	x1, x23
  2027cc:	927df057 	and	x23, x2, #0xfffffffffffffff8
  2027d0:	2a1603e7 	mov	w7, w22
  2027d4:	aa1c03e2 	mov	x2, x28
  2027d8:	f9400024 	ldr	x4, [x1]
  2027dc:	d2800206 	mov	x6, #0x10                  	// #16
  2027e0:	52800201 	mov	w1, #0x10                  	// #16
  2027e4:	b90003e1 	str	w1, [sp]
  2027e8:	b9000be0 	str	w0, [sp, #8]
  2027ec:	52800005 	mov	w5, #0x0                   	// #0
  2027f0:	aa1503e1 	mov	x1, x21
  2027f4:	aa1403e3 	mov	x3, x20
  2027f8:	aa1303e0 	mov	x0, x19
  2027fc:	97fffc7d 	bl	2019f0 <_ntoa_long>
  while (*format)
  202800:	39400361 	ldrb	w1, [x27]
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
  202804:	aa0003fc 	mov	x28, x0
  while (*format)
  202808:	35ffee21 	cbnz	w1, 2025cc <_vsnprintf+0x8c>
  20280c:	d503201f 	nop

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
  202810:	2a1c03f6 	mov	w22, w28
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  202814:	eb1c029f 	cmp	x20, x28
  202818:	d1000682 	sub	x2, x20, #0x1
  20281c:	aa1503e1 	mov	x1, x21
  202820:	9a9c9042 	csel	x2, x2, x28, ls	// ls = plast
  202824:	aa1403e3 	mov	x3, x20
  202828:	52800000 	mov	w0, #0x0                   	// #0
  20282c:	d63f0260 	blr	x19
}
  202830:	a9417bfd 	ldp	x29, x30, [sp, #16]
  202834:	2a1603e0 	mov	w0, w22
  202838:	a94253f3 	ldp	x19, x20, [sp, #32]
  20283c:	a9435bf5 	ldp	x21, x22, [sp, #48]
  202840:	a94463f7 	ldp	x23, x24, [sp, #64]
  202844:	a9456bf9 	ldp	x25, x26, [sp, #80]
  202848:	a94673fb 	ldp	x27, x28, [sp, #96]
  20284c:	9102c3ff 	add	sp, sp, #0xb0
  202850:	d65f03c0 	ret
        const char* p = va_arg(va, char*);
  202854:	37f8219a 	tbnz	w26, #31, 202c84 <_vsnprintf+0x744>
  202858:	91003ee1 	add	x1, x23, #0xf
  20285c:	aa1703e0 	mov	x0, x23
  202860:	927df037 	and	x23, x1, #0xfffffffffffffff8
  202864:	f940000a 	ldr	x10, [x0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
  202868:	710002df 	cmp	w22, #0x0
  20286c:	2a1603e3 	mov	w3, w22
  202870:	da9f1063 	csinv	x3, x3, xzr, ne	// ne = any
  for (s = str; *s && maxsize--; ++s);
  202874:	aa0a03e1 	mov	x1, x10
  202878:	39400140 	ldrb	w0, [x10]
  20287c:	8b030143 	add	x3, x10, x3
  202880:	35000080 	cbnz	w0, 202890 <_vsnprintf+0x350>
  202884:	140001e4 	b	203014 <_vsnprintf+0xad4>
  202888:	eb03003f 	cmp	x1, x3
  20288c:	54000060 	b.eq	202898 <_vsnprintf+0x358>  // b.none
  202890:	38401c22 	ldrb	w2, [x1, #1]!
  202894:	35ffffa2 	cbnz	w2, 202888 <_vsnprintf+0x348>
  return (unsigned int)(s - str);
  202898:	4b0a0021 	sub	w1, w1, w10
  20289c:	b90093e1 	str	w1, [sp, #144]
        if (flags & FLAGS_PRECISION) {
  2028a0:	121600c1 	and	w1, w6, #0x400
  2028a4:	b900abe1 	str	w1, [sp, #168]
  2028a8:	365000a6 	tbz	w6, #10, 2028bc <_vsnprintf+0x37c>
          l = (l < precision ? l : precision);
  2028ac:	b94093e1 	ldr	w1, [sp, #144]
  2028b0:	6b16003f 	cmp	w1, w22
  2028b4:	1a969021 	csel	w1, w1, w22, ls	// ls = plast
  2028b8:	b90093e1 	str	w1, [sp, #144]
        if (!(flags & FLAGS_LEFT)) {
  2028bc:	121f00c1 	and	w1, w6, #0x2
  2028c0:	b900afe1 	str	w1, [sp, #172]
  2028c4:	36082866 	tbz	w6, #1, 202dd0 <_vsnprintf+0x890>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  2028c8:	34000280 	cbz	w0, 202918 <_vsnprintf+0x3d8>
  2028cc:	b940abe1 	ldr	w1, [sp, #168]
  2028d0:	34002481 	cbz	w1, 202d60 <_vsnprintf+0x820>
  2028d4:	aa1c03e2 	mov	x2, x28
  2028d8:	8b36439c 	add	x28, x28, w22, uxtw
  2028dc:	cb020141 	sub	x1, x10, x2
  2028e0:	f90043e1 	str	x1, [sp, #128]
  2028e4:	14000009 	b	202908 <_vsnprintf+0x3c8>
          out(*(p++), buffer, idx++, maxlen);
  2028e8:	91000456 	add	x22, x2, #0x1
  2028ec:	aa1403e3 	mov	x3, x20
  2028f0:	aa1503e1 	mov	x1, x21
  2028f4:	d63f0260 	blr	x19
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  2028f8:	f94043e0 	ldr	x0, [sp, #128]
  2028fc:	38766800 	ldrb	w0, [x0, x22]
  202900:	34002420 	cbz	w0, 202d84 <_vsnprintf+0x844>
          out(*(p++), buffer, idx++, maxlen);
  202904:	aa1603e2 	mov	x2, x22
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  202908:	eb02039f 	cmp	x28, x2
  20290c:	54fffee1 	b.ne	2028e8 <_vsnprintf+0x3a8>  // b.any
        if (flags & FLAGS_LEFT) {
  202910:	b940afe0 	ldr	w0, [sp, #172]
  202914:	34ffe580 	cbz	w0, 2025c4 <_vsnprintf+0x84>
          while (l++ < width) {
  202918:	b94093e1 	ldr	w1, [sp, #144]
  20291c:	aa1c03f6 	mov	x22, x28
  202920:	6b19003f 	cmp	w1, w25
  202924:	54ffe502 	b.cs	2025c4 <_vsnprintf+0x84>  // b.hs, b.nlast
  202928:	51000720 	sub	w0, w25, #0x1
  20292c:	91000789 	add	x9, x28, #0x1
  202930:	4b010000 	sub	w0, w0, w1
  202934:	8b09001c 	add	x28, x0, x9
            out(' ', buffer, idx++, maxlen);
  202938:	aa1603e2 	mov	x2, x22
  20293c:	aa1403e3 	mov	x3, x20
  202940:	910006d6 	add	x22, x22, #0x1
  202944:	aa1503e1 	mov	x1, x21
  202948:	52800400 	mov	w0, #0x20                  	// #32
  20294c:	d63f0260 	blr	x19
          while (l++ < width) {
  202950:	eb1c02df 	cmp	x22, x28
  202954:	54ffff21 	b.ne	202938 <_vsnprintf+0x3f8>  // b.any
  202958:	17ffff1b 	b	2025c4 <_vsnprintf+0x84>
      const int w = va_arg(va, int);
  20295c:	11002342 	add	w2, w26, #0x8
  202960:	7100005f 	cmp	w2, #0x0
  202964:	54001a0d 	b.le	202ca4 <_vsnprintf+0x764>
  202968:	91002ee3 	add	x3, x23, #0xb
  20296c:	aa1703e0 	mov	x0, x23
  202970:	2a0203fa 	mov	w26, w2
  202974:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202978:	17ffff76 	b	202750 <_vsnprintf+0x210>
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
  20297c:	121e7802 	and	w2, w0, #0xfffffffd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
  202980:	121a7801 	and	w1, w0, #0xffffffdf
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
  202984:	7101145f 	cmp	w2, #0x45
  202988:	1a9f17e0 	cset	w0, eq	// eq = none
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
  20298c:	71011c3f 	cmp	w1, #0x47
  202990:	1a9f17e1 	cset	w1, eq	// eq = none
  202994:	53155021 	lsl	w1, w1, #11
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
  202998:	2a001420 	orr	w0, w1, w0, lsl #5
  20299c:	2a060006 	orr	w6, w0, w6
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  2029a0:	b9407fe0 	ldr	w0, [sp, #124]
  2029a4:	37f812c0 	tbnz	w0, #31, 202bfc <_vsnprintf+0x6bc>
  2029a8:	91003ee1 	add	x1, x23, #0xf
  2029ac:	aa1703e0 	mov	x0, x23
  2029b0:	927df037 	and	x23, x1, #0xfffffffffffffff8
  2029b4:	fd400000 	ldr	d0, [x0]
  2029b8:	aa1c03e2 	mov	x2, x28
  2029bc:	2a1903e5 	mov	w5, w25
  2029c0:	2a1603e4 	mov	w4, w22
  2029c4:	aa1403e3 	mov	x3, x20
  2029c8:	aa1503e1 	mov	x1, x21
  2029cc:	aa1303e0 	mov	x0, x19
  2029d0:	97fffdf8 	bl	2021b0 <_etoa>
  2029d4:	aa0003fc 	mov	x28, x0
        break;
  2029d8:	17fffefb 	b	2025c4 <_vsnprintf+0x84>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
  2029dc:	7101181f 	cmp	w0, #0x46
  2029e0:	321b00c0 	orr	w0, w6, #0x20
  2029e4:	1a860006 	csel	w6, w0, w6, eq	// eq = none
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  2029e8:	b9407fe0 	ldr	w0, [sp, #124]
  2029ec:	37f811a0 	tbnz	w0, #31, 202c20 <_vsnprintf+0x6e0>
  2029f0:	91003ee1 	add	x1, x23, #0xf
  2029f4:	aa1703e0 	mov	x0, x23
  2029f8:	927df037 	and	x23, x1, #0xfffffffffffffff8
  2029fc:	fd400000 	ldr	d0, [x0]
  202a00:	aa1c03e2 	mov	x2, x28
  202a04:	2a1903e5 	mov	w5, w25
  202a08:	2a1603e4 	mov	w4, w22
  202a0c:	aa1403e3 	mov	x3, x20
  202a10:	aa1503e1 	mov	x1, x21
  202a14:	aa1303e0 	mov	x0, x19
  202a18:	97fffce6 	bl	201db0 <_ftoa>
  202a1c:	aa0003fc 	mov	x28, x0
        break;
  202a20:	17fffee9 	b	2025c4 <_vsnprintf+0x84>
        unsigned int l = 1U;
  202a24:	52800020 	mov	w0, #0x1                   	// #1
  202a28:	b90083e0 	str	w0, [sp, #128]
        if (!(flags & FLAGS_LEFT)) {
  202a2c:	121f00c0 	and	w0, w6, #0x2
  202a30:	b90093e0 	str	w0, [sp, #144]
  202a34:	36081406 	tbz	w6, #1, 202cb4 <_vsnprintf+0x774>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
  202a38:	37f8107a 	tbnz	w26, #31, 202c44 <_vsnprintf+0x704>
  202a3c:	91002ee1 	add	x1, x23, #0xb
  202a40:	aa1703e0 	mov	x0, x23
  202a44:	927df037 	and	x23, x1, #0xfffffffffffffff8
  202a48:	39400000 	ldrb	w0, [x0]
  202a4c:	aa1403e3 	mov	x3, x20
  202a50:	aa1c03e2 	mov	x2, x28
  202a54:	aa1503e1 	mov	x1, x21
  202a58:	91000796 	add	x22, x28, #0x1
  202a5c:	d63f0260 	blr	x19
        if (flags & FLAGS_LEFT) {
  202a60:	b94093e0 	ldr	w0, [sp, #144]
  202a64:	34000220 	cbz	w0, 202aa8 <_vsnprintf+0x568>
          while (l++ < width) {
  202a68:	b94083e0 	ldr	w0, [sp, #128]
  202a6c:	6b19001f 	cmp	w0, w25
  202a70:	540001c2 	b.cs	202aa8 <_vsnprintf+0x568>  // b.hs, b.nlast
  202a74:	51000725 	sub	w5, w25, #0x1
  202a78:	91000b89 	add	x9, x28, #0x2
  202a7c:	4b0000a0 	sub	w0, w5, w0
  202a80:	8b090019 	add	x25, x0, x9
  202a84:	d503201f 	nop
            out(' ', buffer, idx++, maxlen);
  202a88:	aa1603e2 	mov	x2, x22
  202a8c:	aa1403e3 	mov	x3, x20
  202a90:	910006d6 	add	x22, x22, #0x1
  202a94:	aa1503e1 	mov	x1, x21
  202a98:	52800400 	mov	w0, #0x20                  	// #32
  202a9c:	d63f0260 	blr	x19
          while (l++ < width) {
  202aa0:	eb1902df 	cmp	x22, x25
  202aa4:	54ffff21 	b.ne	202a88 <_vsnprintf+0x548>  // b.any
        out('%', buffer, idx++, maxlen);
  202aa8:	aa1603fc 	mov	x28, x22
        break;
  202aac:	17fffec6 	b	2025c4 <_vsnprintf+0x84>
        out('%', buffer, idx++, maxlen);
  202ab0:	91000796 	add	x22, x28, #0x1
  202ab4:	aa1c03e2 	mov	x2, x28
  202ab8:	aa1403e3 	mov	x3, x20
  202abc:	aa1503e1 	mov	x1, x21
  202ac0:	528004a0 	mov	w0, #0x25                  	// #37
  202ac4:	aa1603fc 	mov	x28, x22
  202ac8:	d63f0260 	blr	x19
        break;
  202acc:	17fffebe 	b	2025c4 <_vsnprintf+0x84>
        if (*format == 'h') {
  202ad0:	39400760 	ldrb	w0, [x27, #1]
  202ad4:	7101a01f 	cmp	w0, #0x68
  202ad8:	540015a0 	b.eq	202d8c <_vsnprintf+0x84c>  // b.none
        flags |= FLAGS_SHORT;
  202adc:	321900c6 	orr	w6, w6, #0x80
  202ae0:	17ffff06 	b	2026f8 <_vsnprintf+0x1b8>
        if (*format == 'l') {
  202ae4:	39400760 	ldrb	w0, [x27, #1]
  202ae8:	7101b01f 	cmp	w0, #0x6c
  202aec:	54ffe041 	b.ne	2026f4 <_vsnprintf+0x1b4>  // b.any
    switch (*format) {
  202af0:	39400b60 	ldrb	w0, [x27, #2]
          flags |= FLAGS_LONG_LONG;
  202af4:	321804c6 	orr	w6, w6, #0x300
          format++;
  202af8:	91000b62 	add	x2, x27, #0x2
  202afc:	17fffeff 	b	2026f8 <_vsnprintf+0x1b8>
        if (*format == 'x' || *format == 'X') {
  202b00:	7101bc1f 	cmp	w0, #0x6f
  202b04:	54001020 	b.eq	202d08 <_vsnprintf+0x7c8>  // b.none
  202b08:	540019c8 	b.hi	202e40 <_vsnprintf+0x900>  // b.pmore
        if ((*format != 'i') && (*format != 'd')) {
  202b0c:	7101a41f 	cmp	w0, #0x69
          flags &= ~FLAGS_HASH;   // no hash for dec format
  202b10:	121b78c1 	and	w1, w6, #0xffffffef
        if ((*format != 'i') && (*format != 'd')) {
  202b14:	540038a1 	b.ne	203228 <_vsnprintf+0xce8>  // b.any
        if (flags & FLAGS_PRECISION) {
  202b18:	d2800142 	mov	x2, #0xa                   	// #10
  202b1c:	36500046 	tbz	w6, #10, 202b24 <_vsnprintf+0x5e4>
          flags &= ~FLAGS_ZEROPAD;
  202b20:	121f7821 	and	w1, w1, #0xfffffffe
        if ((*format == 'i') || (*format == 'd')) {
  202b24:	7101a41f 	cmp	w0, #0x69
  202b28:	52800c83 	mov	w3, #0x64                  	// #100
  202b2c:	7a431004 	ccmp	w0, w3, #0x4, ne	// ne = any
  202b30:	54000f41 	b.ne	202d18 <_vsnprintf+0x7d8>  // b.any
          if (flags & FLAGS_LONG_LONG) {
  202b34:	37481c21 	tbnz	w1, #9, 202eb8 <_vsnprintf+0x978>
          else if (flags & FLAGS_LONG) {
  202b38:	374021e1 	tbnz	w1, #8, 202f74 <_vsnprintf+0xa34>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  202b3c:	37301961 	tbnz	w1, #6, 202e68 <_vsnprintf+0x928>
  202b40:	363826e1 	tbz	w1, #7, 20301c <_vsnprintf+0xadc>
  202b44:	37f830da 	tbnz	w26, #31, 20315c <_vsnprintf+0xc1c>
  202b48:	91002ee3 	add	x3, x23, #0xb
  202b4c:	aa1703e0 	mov	x0, x23
  202b50:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202b54:	79c00005 	ldrsh	w5, [x0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
  202b58:	710000bf 	cmp	w5, #0x0
  202b5c:	5a85a4a4 	cneg	w4, w5, lt	// lt = tstop
  202b60:	12003c84 	and	w4, w4, #0xffff
  202b64:	aa0203e6 	mov	x6, x2
  202b68:	2a1603e7 	mov	w7, w22
  202b6c:	531f7ca5 	lsr	w5, w5, #31
  202b70:	93407c84 	sxtw	x4, w4
  202b74:	aa1c03e2 	mov	x2, x28
  202b78:	b90003f9 	str	w25, [sp]
  202b7c:	b9000be1 	str	w1, [sp, #8]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  202b80:	aa1403e3 	mov	x3, x20
  202b84:	aa1503e1 	mov	x1, x21
  202b88:	aa1303e0 	mov	x0, x19
  202b8c:	97fffb99 	bl	2019f0 <_ntoa_long>
  202b90:	aa0003fc 	mov	x28, x0
        break;
  202b94:	17fffe8c 	b	2025c4 <_vsnprintf+0x84>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
  202b98:	52800143 	mov	w3, #0xa                   	// #10
  202b9c:	d503201f 	nop
  202ba0:	1b0302d6 	madd	w22, w22, w3, w0
  while (_is_digit(**str)) {
  202ba4:	38401c40 	ldrb	w0, [x2, #1]!
  return (ch >= '0') && (ch <= '9');
  202ba8:	5100c001 	sub	w1, w0, #0x30
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
  202bac:	5100c2d6 	sub	w22, w22, #0x30
  while (_is_digit(**str)) {
  202bb0:	12001c21 	and	w1, w1, #0xff
  202bb4:	7100243f 	cmp	w1, #0x9
  202bb8:	54ffff49 	b.ls	202ba0 <_vsnprintf+0x660>  // b.plast
  202bbc:	aa0203fb 	mov	x27, x2
  202bc0:	91000441 	add	x1, x2, #0x1
  202bc4:	17fffec3 	b	2026d0 <_vsnprintf+0x190>
        const int prec = (int)va_arg(va, int);
  202bc8:	37f80f5a 	tbnz	w26, #31, 202db0 <_vsnprintf+0x870>
  202bcc:	91002ee1 	add	x1, x23, #0xb
  202bd0:	aa1703e0 	mov	x0, x23
  202bd4:	927df037 	and	x23, x1, #0xfffffffffffffff8
        precision = prec > 0 ? (unsigned int)prec : 0U;
  202bd8:	b9400007 	ldr	w7, [x0]
        format++;
  202bdc:	91000b7b 	add	x27, x27, #0x2
    switch (*format) {
  202be0:	39400360 	ldrb	w0, [x27]
  202be4:	91000761 	add	x1, x27, #0x1
        precision = prec > 0 ? (unsigned int)prec : 0U;
  202be8:	710000ff 	cmp	w7, #0x0
  202bec:	1a9fa0f6 	csel	w22, w7, wzr, ge	// ge = tcont
        format++;
  202bf0:	17fffeb8 	b	2026d0 <_vsnprintf+0x190>
    switch (*format) {
  202bf4:	aa1b03e2 	mov	x2, x27
  202bf8:	17fffec0 	b	2026f8 <_vsnprintf+0x1b8>
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  202bfc:	b9407fe0 	ldr	w0, [sp, #124]
  202c00:	11004001 	add	w1, w0, #0x10
  202c04:	7100003f 	cmp	w1, #0x0
  202c08:	54001a2d 	b.le	202f4c <_vsnprintf+0xa0c>
  202c0c:	91003ee2 	add	x2, x23, #0xf
  202c10:	aa1703e0 	mov	x0, x23
  202c14:	927df057 	and	x23, x2, #0xfffffffffffffff8
  202c18:	b9007fe1 	str	w1, [sp, #124]
  202c1c:	17ffff66 	b	2029b4 <_vsnprintf+0x474>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  202c20:	b9407fe0 	ldr	w0, [sp, #124]
  202c24:	11004001 	add	w1, w0, #0x10
  202c28:	7100003f 	cmp	w1, #0x0
  202c2c:	540019ad 	b.le	202f60 <_vsnprintf+0xa20>
  202c30:	91003ee2 	add	x2, x23, #0xf
  202c34:	aa1703e0 	mov	x0, x23
  202c38:	927df057 	and	x23, x2, #0xfffffffffffffff8
  202c3c:	b9007fe1 	str	w1, [sp, #124]
  202c40:	17ffff6f 	b	2029fc <_vsnprintf+0x4bc>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
  202c44:	11002341 	add	w1, w26, #0x8
  202c48:	7100003f 	cmp	w1, #0x0
  202c4c:	5400168d 	b.le	202f1c <_vsnprintf+0x9dc>
  202c50:	91002ee2 	add	x2, x23, #0xb
  202c54:	aa1703e0 	mov	x0, x23
  202c58:	2a0103fa 	mov	w26, w1
  202c5c:	927df057 	and	x23, x2, #0xfffffffffffffff8
  202c60:	17ffff7a 	b	202a48 <_vsnprintf+0x508>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
  202c64:	11002342 	add	w2, w26, #0x8
  202c68:	7100005f 	cmp	w2, #0x0
  202c6c:	5400168d 	b.le	202f3c <_vsnprintf+0x9fc>
  202c70:	91003ee3 	add	x3, x23, #0xf
  202c74:	aa1703e1 	mov	x1, x23
  202c78:	2a0203fa 	mov	w26, w2
  202c7c:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202c80:	17fffed4 	b	2027d0 <_vsnprintf+0x290>
        const char* p = va_arg(va, char*);
  202c84:	11002341 	add	w1, w26, #0x8
  202c88:	7100003f 	cmp	w1, #0x0
  202c8c:	5400150d 	b.le	202f2c <_vsnprintf+0x9ec>
  202c90:	91003ee2 	add	x2, x23, #0xf
  202c94:	aa1703e0 	mov	x0, x23
  202c98:	2a0103fa 	mov	w26, w1
  202c9c:	927df057 	and	x23, x2, #0xfffffffffffffff8
  202ca0:	17fffef1 	b	202864 <_vsnprintf+0x324>
      const int w = va_arg(va, int);
  202ca4:	f94047e0 	ldr	x0, [sp, #136]
  202ca8:	8b3ac000 	add	x0, x0, w26, sxtw
  202cac:	2a0203fa 	mov	w26, w2
  202cb0:	17fffea8 	b	202750 <_vsnprintf+0x210>
          while (l++ < width) {
  202cb4:	7100073f 	cmp	w25, #0x1
  202cb8:	54002209 	b.ls	2030f8 <_vsnprintf+0xbb8>  // b.plast
  202cbc:	91000784 	add	x4, x28, #0x1
  202cc0:	51000b36 	sub	w22, w25, #0x2
  202cc4:	8b160096 	add	x22, x4, x22
  202cc8:	14000003 	b	202cd4 <_vsnprintf+0x794>
  202ccc:	f94043e4 	ldr	x4, [sp, #128]
  202cd0:	91000484 	add	x4, x4, #0x1
            out(' ', buffer, idx++, maxlen);
  202cd4:	f90043e4 	str	x4, [sp, #128]
  202cd8:	aa1c03e2 	mov	x2, x28
  202cdc:	aa1403e3 	mov	x3, x20
  202ce0:	aa0403fc 	mov	x28, x4
  202ce4:	aa1503e1 	mov	x1, x21
  202ce8:	52800400 	mov	w0, #0x20                  	// #32
  202cec:	d63f0260 	blr	x19
          while (l++ < width) {
  202cf0:	eb16039f 	cmp	x28, x22
  202cf4:	54fffec1 	b.ne	202ccc <_vsnprintf+0x78c>  // b.any
  202cf8:	11000720 	add	w0, w25, #0x1
  202cfc:	b90083e0 	str	w0, [sp, #128]
        out((char)va_arg(va, int), buffer, idx++, maxlen);
  202d00:	36ffe9fa 	tbz	w26, #31, 202a3c <_vsnprintf+0x4fc>
  202d04:	17ffffd0 	b	202c44 <_vsnprintf+0x704>
    switch (*format) {
  202d08:	d2800102 	mov	x2, #0x8                   	// #8
  202d0c:	d503201f 	nop
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
  202d10:	121c74c1 	and	w1, w6, #0xfffffff3
        if (flags & FLAGS_PRECISION) {
  202d14:	3757f066 	tbnz	w6, #10, 202b20 <_vsnprintf+0x5e0>
          if (flags & FLAGS_LONG_LONG) {
  202d18:	37480ec1 	tbnz	w1, #9, 202ef0 <_vsnprintf+0x9b0>
          else if (flags & FLAGS_LONG) {
  202d1c:	37401481 	tbnz	w1, #8, 202fac <_vsnprintf+0xa6c>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  202d20:	37300b21 	tbnz	w1, #6, 202e84 <_vsnprintf+0x944>
  202d24:	363818c1 	tbz	w1, #7, 20303c <_vsnprintf+0xafc>
  202d28:	37f822ba 	tbnz	w26, #31, 20317c <_vsnprintf+0xc3c>
  202d2c:	aa1703e0 	mov	x0, x23
  202d30:	91002ee3 	add	x3, x23, #0xb
  202d34:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202d38:	79400004 	ldrh	w4, [x0]
  202d3c:	14000057 	b	202e98 <_vsnprintf+0x958>
        if (*format == 'x' || *format == 'X') {
  202d40:	7101601f 	cmp	w0, #0x58
  202d44:	54000300 	b.eq	202da4 <_vsnprintf+0x864>  // b.none
  202d48:	7101881f 	cmp	w0, #0x62
    switch (*format) {
  202d4c:	d2800042 	mov	x2, #0x2                   	// #2
  202d50:	54fffe00 	b.eq	202d10 <_vsnprintf+0x7d0>  // b.none
          flags &= ~FLAGS_HASH;   // no hash for dec format
  202d54:	121b78c1 	and	w1, w6, #0xffffffef
  202d58:	52800c80 	mov	w0, #0x64                  	// #100
  202d5c:	17ffff6f 	b	202b18 <_vsnprintf+0x5d8>
          out(*(p++), buffer, idx++, maxlen);
  202d60:	aa1c03f6 	mov	x22, x28
  202d64:	cb1c015c 	sub	x28, x10, x28
  202d68:	aa1603e2 	mov	x2, x22
  202d6c:	910006d6 	add	x22, x22, #0x1
  202d70:	aa1403e3 	mov	x3, x20
  202d74:	aa1503e1 	mov	x1, x21
  202d78:	d63f0260 	blr	x19
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  202d7c:	38766b80 	ldrb	w0, [x28, x22]
  202d80:	35ffff40 	cbnz	w0, 202d68 <_vsnprintf+0x828>
          out(*(p++), buffer, idx++, maxlen);
  202d84:	aa1603fc 	mov	x28, x22
  202d88:	17fffee2 	b	202910 <_vsnprintf+0x3d0>
    switch (*format) {
  202d8c:	39400b60 	ldrb	w0, [x27, #2]
          flags |= FLAGS_CHAR;
  202d90:	321a04c6 	orr	w6, w6, #0xc0
          format++;
  202d94:	91000b62 	add	x2, x27, #0x2
  202d98:	17fffe58 	b	2026f8 <_vsnprintf+0x1b8>
  while (*format)
  202d9c:	52800016 	mov	w22, #0x0                   	// #0
  202da0:	17fffe9d 	b	202814 <_vsnprintf+0x2d4>
          flags |= FLAGS_UPPERCASE;
  202da4:	321b00c6 	orr	w6, w6, #0x20
  202da8:	d2800202 	mov	x2, #0x10                  	// #16
  202dac:	17ffffd9 	b	202d10 <_vsnprintf+0x7d0>
        const int prec = (int)va_arg(va, int);
  202db0:	11002341 	add	w1, w26, #0x8
  202db4:	7100003f 	cmp	w1, #0x0
  202db8:	5400050d 	b.le	202e58 <_vsnprintf+0x918>
  202dbc:	91002ee2 	add	x2, x23, #0xb
  202dc0:	aa1703e0 	mov	x0, x23
  202dc4:	2a0103fa 	mov	w26, w1
  202dc8:	927df057 	and	x23, x2, #0xfffffffffffffff8
  202dcc:	17ffff83 	b	202bd8 <_vsnprintf+0x698>
          while (l++ < width) {
  202dd0:	b94093e1 	ldr	w1, [sp, #144]
  202dd4:	6b19003f 	cmp	w1, w25
  202dd8:	54001862 	b.cs	2030e4 <_vsnprintf+0xba4>  // b.hs, b.nlast
  202ddc:	51000720 	sub	w0, w25, #0x1
  202de0:	91000784 	add	x4, x28, #0x1
  202de4:	4b010000 	sub	w0, w0, w1
  202de8:	8b040000 	add	x0, x0, x4
  202dec:	f90053e0 	str	x0, [sp, #160]
  202df0:	14000003 	b	202dfc <_vsnprintf+0x8bc>
  202df4:	f9404be4 	ldr	x4, [sp, #144]
  202df8:	91000484 	add	x4, x4, #0x1
  202dfc:	f90043ea 	str	x10, [sp, #128]
            out(' ', buffer, idx++, maxlen);
  202e00:	aa1c03e2 	mov	x2, x28
  202e04:	f9004be4 	str	x4, [sp, #144]
  202e08:	aa0403fc 	mov	x28, x4
  202e0c:	52800400 	mov	w0, #0x20                  	// #32
  202e10:	aa1403e3 	mov	x3, x20
  202e14:	aa1503e1 	mov	x1, x21
  202e18:	d63f0260 	blr	x19
          while (l++ < width) {
  202e1c:	f94053e0 	ldr	x0, [sp, #160]
  202e20:	f94043ea 	ldr	x10, [sp, #128]
  202e24:	eb00039f 	cmp	x28, x0
  202e28:	54fffe61 	b.ne	202df4 <_vsnprintf+0x8b4>  // b.any
  202e2c:	11000720 	add	w0, w25, #0x1
  202e30:	b90093e0 	str	w0, [sp, #144]
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  202e34:	39400140 	ldrb	w0, [x10]
  202e38:	35ffd4a0 	cbnz	w0, 2028cc <_vsnprintf+0x38c>
  202e3c:	17fffde2 	b	2025c4 <_vsnprintf+0x84>
  202e40:	7101e01f 	cmp	w0, #0x78
    switch (*format) {
  202e44:	d2800202 	mov	x2, #0x10                  	// #16
  202e48:	54fff640 	b.eq	202d10 <_vsnprintf+0x7d0>  // b.none
          flags &= ~FLAGS_HASH;   // no hash for dec format
  202e4c:	121b78c6 	and	w6, w6, #0xffffffef
  202e50:	d2800142 	mov	x2, #0xa                   	// #10
  202e54:	17ffffaf 	b	202d10 <_vsnprintf+0x7d0>
        const int prec = (int)va_arg(va, int);
  202e58:	f94047e0 	ldr	x0, [sp, #136]
  202e5c:	8b3ac000 	add	x0, x0, w26, sxtw
  202e60:	2a0103fa 	mov	w26, w1
  202e64:	17ffff5d 	b	202bd8 <_vsnprintf+0x698>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  202e68:	37f80f7a 	tbnz	w26, #31, 203054 <_vsnprintf+0xb14>
  202e6c:	91002ee3 	add	x3, x23, #0xb
  202e70:	aa1703e0 	mov	x0, x23
  202e74:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202e78:	39400005 	ldrb	w5, [x0]
  202e7c:	2a0503e4 	mov	w4, w5
  202e80:	17ffff39 	b	202b64 <_vsnprintf+0x624>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  202e84:	37f8109a 	tbnz	w26, #31, 203094 <_vsnprintf+0xb54>
  202e88:	91002ee3 	add	x3, x23, #0xb
  202e8c:	aa1703e0 	mov	x0, x23
  202e90:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202e94:	39400004 	ldrb	w4, [x0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  202e98:	2a1603e7 	mov	w7, w22
  202e9c:	aa0203e6 	mov	x6, x2
  202ea0:	2a0403e4 	mov	w4, w4
  202ea4:	b90003f9 	str	w25, [sp]
  202ea8:	b9000be1 	str	w1, [sp, #8]
  202eac:	aa1c03e2 	mov	x2, x28
  202eb0:	52800005 	mov	w5, #0x0                   	// #0
  202eb4:	17ffff33 	b	202b80 <_vsnprintf+0x640>
            const long long value = va_arg(va, long long);
  202eb8:	37f809fa 	tbnz	w26, #31, 202ff4 <_vsnprintf+0xab4>
  202ebc:	91003ee3 	add	x3, x23, #0xf
  202ec0:	aa1703e0 	mov	x0, x23
  202ec4:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202ec8:	f9400005 	ldr	x5, [x0]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
  202ecc:	aa0203e6 	mov	x6, x2
  202ed0:	2a1603e7 	mov	w7, w22
  202ed4:	aa1c03e2 	mov	x2, x28
  202ed8:	f10000bf 	cmp	x5, #0x0
  202edc:	b90003f9 	str	w25, [sp]
  202ee0:	da85a4a4 	cneg	x4, x5, lt	// lt = tstop
  202ee4:	d37ffca5 	lsr	x5, x5, #63
  202ee8:	b9000be1 	str	w1, [sp, #8]
  202eec:	17fffe41 	b	2027f0 <_vsnprintf+0x2b0>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  202ef0:	37f8073a 	tbnz	w26, #31, 202fd4 <_vsnprintf+0xa94>
  202ef4:	91003ee3 	add	x3, x23, #0xf
  202ef8:	aa1703e0 	mov	x0, x23
  202efc:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202f00:	f9400004 	ldr	x4, [x0]
  202f04:	aa0203e6 	mov	x6, x2
  202f08:	2a1603e7 	mov	w7, w22
  202f0c:	aa1c03e2 	mov	x2, x28
  202f10:	b90003f9 	str	w25, [sp]
  202f14:	b9000be1 	str	w1, [sp, #8]
  202f18:	17fffe35 	b	2027ec <_vsnprintf+0x2ac>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
  202f1c:	f94047e0 	ldr	x0, [sp, #136]
  202f20:	8b3ac000 	add	x0, x0, w26, sxtw
  202f24:	2a0103fa 	mov	w26, w1
  202f28:	17fffec8 	b	202a48 <_vsnprintf+0x508>
        const char* p = va_arg(va, char*);
  202f2c:	f94047e0 	ldr	x0, [sp, #136]
  202f30:	8b3ac000 	add	x0, x0, w26, sxtw
  202f34:	2a0103fa 	mov	w26, w1
  202f38:	17fffe4b 	b	202864 <_vsnprintf+0x324>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
  202f3c:	f94047e1 	ldr	x1, [sp, #136]
  202f40:	8b3ac021 	add	x1, x1, w26, sxtw
  202f44:	2a0203fa 	mov	w26, w2
  202f48:	17fffe22 	b	2027d0 <_vsnprintf+0x290>
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  202f4c:	f9404fe2 	ldr	x2, [sp, #152]
  202f50:	b9407fe0 	ldr	w0, [sp, #124]
  202f54:	b9007fe1 	str	w1, [sp, #124]
  202f58:	8b20c040 	add	x0, x2, w0, sxtw
  202f5c:	17fffe96 	b	2029b4 <_vsnprintf+0x474>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  202f60:	f9404fe2 	ldr	x2, [sp, #152]
  202f64:	b9407fe0 	ldr	w0, [sp, #124]
  202f68:	b9007fe1 	str	w1, [sp, #124]
  202f6c:	8b20c040 	add	x0, x2, w0, sxtw
  202f70:	17fffea3 	b	2029fc <_vsnprintf+0x4bc>
            const long value = va_arg(va, long);
  202f74:	37f80a1a 	tbnz	w26, #31, 2030b4 <_vsnprintf+0xb74>
  202f78:	91003ee3 	add	x3, x23, #0xf
  202f7c:	aa1703e0 	mov	x0, x23
  202f80:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202f84:	f9400005 	ldr	x5, [x0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
  202f88:	aa0203e6 	mov	x6, x2
  202f8c:	2a1603e7 	mov	w7, w22
  202f90:	aa1c03e2 	mov	x2, x28
  202f94:	f10000bf 	cmp	x5, #0x0
  202f98:	b90003f9 	str	w25, [sp]
  202f9c:	da85a4a4 	cneg	x4, x5, lt	// lt = tstop
  202fa0:	d37ffca5 	lsr	x5, x5, #63
  202fa4:	b9000be1 	str	w1, [sp, #8]
  202fa8:	17fffef6 	b	202b80 <_vsnprintf+0x640>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  202fac:	37f8065a 	tbnz	w26, #31, 203074 <_vsnprintf+0xb34>
  202fb0:	91003ee3 	add	x3, x23, #0xf
  202fb4:	aa1703e0 	mov	x0, x23
  202fb8:	927df077 	and	x23, x3, #0xfffffffffffffff8
  202fbc:	f9400004 	ldr	x4, [x0]
  202fc0:	2a1603e7 	mov	w7, w22
  202fc4:	aa0203e6 	mov	x6, x2
  202fc8:	b90003f9 	str	w25, [sp]
  202fcc:	b9000be1 	str	w1, [sp, #8]
  202fd0:	17ffffb7 	b	202eac <_vsnprintf+0x96c>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  202fd4:	11002343 	add	w3, w26, #0x8
  202fd8:	7100007f 	cmp	w3, #0x0
  202fdc:	5400096d 	b.le	203108 <_vsnprintf+0xbc8>
  202fe0:	91003ee4 	add	x4, x23, #0xf
  202fe4:	aa1703e0 	mov	x0, x23
  202fe8:	2a0303fa 	mov	w26, w3
  202fec:	927df097 	and	x23, x4, #0xfffffffffffffff8
  202ff0:	17ffffc4 	b	202f00 <_vsnprintf+0x9c0>
            const long long value = va_arg(va, long long);
  202ff4:	11002343 	add	w3, w26, #0x8
  202ff8:	7100007f 	cmp	w3, #0x0
  202ffc:	540006cd 	b.le	2030d4 <_vsnprintf+0xb94>
  203000:	91003ee4 	add	x4, x23, #0xf
  203004:	aa1703e0 	mov	x0, x23
  203008:	2a0303fa 	mov	w26, w3
  20300c:	927df097 	and	x23, x4, #0xfffffffffffffff8
  203010:	17ffffae 	b	202ec8 <_vsnprintf+0x988>
  for (s = str; *s && maxsize--; ++s);
  203014:	b90093ff 	str	wzr, [sp, #144]
  203018:	17fffe22 	b	2028a0 <_vsnprintf+0x360>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  20301c:	37f80cba 	tbnz	w26, #31, 2031b0 <_vsnprintf+0xc70>
  203020:	91002ee3 	add	x3, x23, #0xb
  203024:	aa1703e0 	mov	x0, x23
  203028:	927df077 	and	x23, x3, #0xfffffffffffffff8
  20302c:	b9400005 	ldr	w5, [x0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
  203030:	710000bf 	cmp	w5, #0x0
  203034:	5a85a4a4 	cneg	w4, w5, lt	// lt = tstop
  203038:	17fffecb 	b	202b64 <_vsnprintf+0x624>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  20303c:	37f807fa 	tbnz	w26, #31, 203138 <_vsnprintf+0xbf8>
  203040:	aa1703e0 	mov	x0, x23
  203044:	91002ee3 	add	x3, x23, #0xb
  203048:	927df077 	and	x23, x3, #0xfffffffffffffff8
  20304c:	b9400004 	ldr	w4, [x0]
  203050:	17ffff92 	b	202e98 <_vsnprintf+0x958>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  203054:	11002343 	add	w3, w26, #0x8
  203058:	7100007f 	cmp	w3, #0x0
  20305c:	540005ed 	b.le	203118 <_vsnprintf+0xbd8>
  203060:	91002ee4 	add	x4, x23, #0xb
  203064:	aa1703e0 	mov	x0, x23
  203068:	2a0303fa 	mov	w26, w3
  20306c:	927df097 	and	x23, x4, #0xfffffffffffffff8
  203070:	17ffff82 	b	202e78 <_vsnprintf+0x938>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  203074:	11002343 	add	w3, w26, #0x8
  203078:	7100007f 	cmp	w3, #0x0
  20307c:	5400092d 	b.le	2031a0 <_vsnprintf+0xc60>
  203080:	91003ee4 	add	x4, x23, #0xf
  203084:	aa1703e0 	mov	x0, x23
  203088:	2a0303fa 	mov	w26, w3
  20308c:	927df097 	and	x23, x4, #0xfffffffffffffff8
  203090:	17ffffcb 	b	202fbc <_vsnprintf+0xa7c>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  203094:	11002343 	add	w3, w26, #0x8
  203098:	7100007f 	cmp	w3, #0x0
  20309c:	540009ad 	b.le	2031d0 <_vsnprintf+0xc90>
  2030a0:	91002ee4 	add	x4, x23, #0xb
  2030a4:	aa1703e0 	mov	x0, x23
  2030a8:	2a0303fa 	mov	w26, w3
  2030ac:	927df097 	and	x23, x4, #0xfffffffffffffff8
  2030b0:	17ffff79 	b	202e94 <_vsnprintf+0x954>
            const long value = va_arg(va, long);
  2030b4:	11002343 	add	w3, w26, #0x8
  2030b8:	7100007f 	cmp	w3, #0x0
  2030bc:	5400036d 	b.le	203128 <_vsnprintf+0xbe8>
  2030c0:	91003ee4 	add	x4, x23, #0xf
  2030c4:	aa1703e0 	mov	x0, x23
  2030c8:	2a0303fa 	mov	w26, w3
  2030cc:	927df097 	and	x23, x4, #0xfffffffffffffff8
  2030d0:	17ffffad 	b	202f84 <_vsnprintf+0xa44>
            const long long value = va_arg(va, long long);
  2030d4:	f94047e0 	ldr	x0, [sp, #136]
  2030d8:	8b3ac000 	add	x0, x0, w26, sxtw
  2030dc:	2a0303fa 	mov	w26, w3
  2030e0:	17ffff7a 	b	202ec8 <_vsnprintf+0x988>
          while (l++ < width) {
  2030e4:	b94093e1 	ldr	w1, [sp, #144]
  2030e8:	11000421 	add	w1, w1, #0x1
  2030ec:	b90093e1 	str	w1, [sp, #144]
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  2030f0:	35ffbee0 	cbnz	w0, 2028cc <_vsnprintf+0x38c>
  2030f4:	17fffd34 	b	2025c4 <_vsnprintf+0x84>
          while (l++ < width) {
  2030f8:	52800040 	mov	w0, #0x2                   	// #2
  2030fc:	b90083e0 	str	w0, [sp, #128]
        out((char)va_arg(va, int), buffer, idx++, maxlen);
  203100:	36ffc9fa 	tbz	w26, #31, 202a3c <_vsnprintf+0x4fc>
  203104:	17fffed0 	b	202c44 <_vsnprintf+0x704>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  203108:	f94047e0 	ldr	x0, [sp, #136]
  20310c:	8b3ac000 	add	x0, x0, w26, sxtw
  203110:	2a0303fa 	mov	w26, w3
  203114:	17ffff7b 	b	202f00 <_vsnprintf+0x9c0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  203118:	f94047e0 	ldr	x0, [sp, #136]
  20311c:	8b3ac000 	add	x0, x0, w26, sxtw
  203120:	2a0303fa 	mov	w26, w3
  203124:	17ffff55 	b	202e78 <_vsnprintf+0x938>
            const long value = va_arg(va, long);
  203128:	f94047e0 	ldr	x0, [sp, #136]
  20312c:	8b3ac000 	add	x0, x0, w26, sxtw
  203130:	2a0303fa 	mov	w26, w3
  203134:	17ffff94 	b	202f84 <_vsnprintf+0xa44>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  203138:	11002343 	add	w3, w26, #0x8
  20313c:	7100007f 	cmp	w3, #0x0
  203140:	5400050d 	b.le	2031e0 <_vsnprintf+0xca0>
  203144:	aa1703e0 	mov	x0, x23
  203148:	91002ee4 	add	x4, x23, #0xb
  20314c:	927df097 	and	x23, x4, #0xfffffffffffffff8
  203150:	2a0303fa 	mov	w26, w3
  203154:	b9400004 	ldr	w4, [x0]
  203158:	17ffff50 	b	202e98 <_vsnprintf+0x958>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  20315c:	11002343 	add	w3, w26, #0x8
  203160:	7100007f 	cmp	w3, #0x0
  203164:	5400048d 	b.le	2031f4 <_vsnprintf+0xcb4>
  203168:	91002ee4 	add	x4, x23, #0xb
  20316c:	aa1703e0 	mov	x0, x23
  203170:	2a0303fa 	mov	w26, w3
  203174:	927df097 	and	x23, x4, #0xfffffffffffffff8
  203178:	17fffe77 	b	202b54 <_vsnprintf+0x614>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  20317c:	11002343 	add	w3, w26, #0x8
  203180:	7100007f 	cmp	w3, #0x0
  203184:	5400040d 	b.le	203204 <_vsnprintf+0xcc4>
  203188:	aa1703e0 	mov	x0, x23
  20318c:	91002ee4 	add	x4, x23, #0xb
  203190:	927df097 	and	x23, x4, #0xfffffffffffffff8
  203194:	2a0303fa 	mov	w26, w3
  203198:	79400004 	ldrh	w4, [x0]
  20319c:	17ffff3f 	b	202e98 <_vsnprintf+0x958>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  2031a0:	f94047e0 	ldr	x0, [sp, #136]
  2031a4:	8b3ac000 	add	x0, x0, w26, sxtw
  2031a8:	2a0303fa 	mov	w26, w3
  2031ac:	17ffff84 	b	202fbc <_vsnprintf+0xa7c>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  2031b0:	11002343 	add	w3, w26, #0x8
  2031b4:	7100007f 	cmp	w3, #0x0
  2031b8:	5400030d 	b.le	203218 <_vsnprintf+0xcd8>
  2031bc:	91002ee4 	add	x4, x23, #0xb
  2031c0:	aa1703e0 	mov	x0, x23
  2031c4:	2a0303fa 	mov	w26, w3
  2031c8:	927df097 	and	x23, x4, #0xfffffffffffffff8
  2031cc:	17ffff98 	b	20302c <_vsnprintf+0xaec>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  2031d0:	f94047e0 	ldr	x0, [sp, #136]
  2031d4:	8b3ac000 	add	x0, x0, w26, sxtw
  2031d8:	2a0303fa 	mov	w26, w3
  2031dc:	17ffff2e 	b	202e94 <_vsnprintf+0x954>
  2031e0:	f94047e0 	ldr	x0, [sp, #136]
  2031e4:	8b3ac000 	add	x0, x0, w26, sxtw
  2031e8:	2a0303fa 	mov	w26, w3
  2031ec:	b9400004 	ldr	w4, [x0]
  2031f0:	17ffff2a 	b	202e98 <_vsnprintf+0x958>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  2031f4:	f94047e0 	ldr	x0, [sp, #136]
  2031f8:	8b3ac000 	add	x0, x0, w26, sxtw
  2031fc:	2a0303fa 	mov	w26, w3
  203200:	17fffe55 	b	202b54 <_vsnprintf+0x614>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  203204:	f94047e0 	ldr	x0, [sp, #136]
  203208:	8b3ac000 	add	x0, x0, w26, sxtw
  20320c:	2a0303fa 	mov	w26, w3
  203210:	79400004 	ldrh	w4, [x0]
  203214:	17ffff21 	b	202e98 <_vsnprintf+0x958>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  203218:	f94047e0 	ldr	x0, [sp, #136]
  20321c:	8b3ac000 	add	x0, x0, w26, sxtw
  203220:	2a0303fa 	mov	w26, w3
  203224:	17ffff82 	b	20302c <_vsnprintf+0xaec>
  203228:	2a0103e6 	mov	w6, w1
  20322c:	d2800142 	mov	x2, #0xa                   	// #10
  203230:	17fffeb8 	b	202d10 <_vsnprintf+0x7d0>
  203234:	d503201f 	nop
  203238:	d503201f 	nop
  20323c:	d503201f 	nop

0000000000203240 <sddf_printf_>:


///////////////////////////////////////////////////////////////////////////////

int sddf_printf_(const char* format, ...)
{
  203240:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
  va_list va;
  va_start(va, format);
  203244:	12800fe9 	mov	w9, #0xffffff80            	// #-128
  203248:	128006ea 	mov	w10, #0xffffffc8            	// #-56
{
  20324c:	910003fd 	mov	x29, sp
  va_start(va, format);
  203250:	910383eb 	add	x11, sp, #0xe0
  203254:	910483e8 	add	x8, sp, #0x120
  203258:	a90423e8 	stp	x8, x8, [sp, #64]
{
  20325c:	aa0003e8 	mov	x8, x0
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  203260:	d0ffffe0 	adrp	x0, 201000 <init+0x20>
  203264:	91360000 	add	x0, x0, #0xd80
  va_start(va, format);
  203268:	f9002beb 	str	x11, [sp, #80]
  20326c:	290b27ea 	stp	w10, w9, [sp, #88]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  203270:	a94437ec 	ldp	x12, x13, [sp, #64]
  203274:	a90137ec 	stp	x12, x13, [sp, #16]
  203278:	a9452fea 	ldp	x10, x11, [sp, #80]
  20327c:	a9022fea 	stp	x10, x11, [sp, #32]
{
  203280:	3d801be0 	str	q0, [sp, #96]
  203284:	3d801fe1 	str	q1, [sp, #112]
  203288:	3d8023e2 	str	q2, [sp, #128]
  20328c:	3d8027e3 	str	q3, [sp, #144]
  203290:	3d802be4 	str	q4, [sp, #160]
  203294:	3d802fe5 	str	q5, [sp, #176]
  203298:	3d8033e6 	str	q6, [sp, #192]
  20329c:	3d8037e7 	str	q7, [sp, #208]
  2032a0:	a90e8be1 	stp	x1, x2, [sp, #232]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  2032a4:	9100e3e1 	add	x1, sp, #0x38
  2032a8:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
{
  2032ac:	a90f93e3 	stp	x3, x4, [sp, #248]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  2032b0:	910043e4 	add	x4, sp, #0x10
  2032b4:	aa0803e3 	mov	x3, x8
{
  2032b8:	a9109be5 	stp	x5, x6, [sp, #264]
  2032bc:	f9008fe7 	str	x7, [sp, #280]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  2032c0:	97fffca0 	bl	202540 <_vsnprintf>
  va_end(va);
  return ret;
}
  2032c4:	a8d27bfd 	ldp	x29, x30, [sp], #288
  2032c8:	d65f03c0 	ret
  2032cc:	d503201f 	nop

00000000002032d0 <sddf_sprintf_>:


int sddf_sprintf_(char* buffer, const char* format, ...)
{
  2032d0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
  va_list va;
  va_start(va, format);
  2032d4:	12800fe9 	mov	w9, #0xffffff80            	// #-128
  2032d8:	128005ea 	mov	w10, #0xffffffd0            	// #-48
{
  2032dc:	910003fd 	mov	x29, sp
  va_start(va, format);
  2032e0:	910343e8 	add	x8, sp, #0xd0
  2032e4:	910403eb 	add	x11, sp, #0x100
  2032e8:	a9032feb 	stp	x11, x11, [sp, #48]
  2032ec:	f90023e8 	str	x8, [sp, #64]
{
  2032f0:	aa0103e8 	mov	x8, x1
  va_start(va, format);
  2032f4:	290927ea 	stp	w10, w9, [sp, #72]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
  2032f8:	aa0003e1 	mov	x1, x0
  2032fc:	a94337ec 	ldp	x12, x13, [sp, #48]
  203300:	d0ffffe0 	adrp	x0, 201000 <init+0x20>
  203304:	a9442fea 	ldp	x10, x11, [sp, #64]
  203308:	91228000 	add	x0, x0, #0x8a0
  20330c:	a90137ec 	stp	x12, x13, [sp, #16]
  203310:	a9022fea 	stp	x10, x11, [sp, #32]
{
  203314:	3d8017e0 	str	q0, [sp, #80]
  203318:	3d801be1 	str	q1, [sp, #96]
  20331c:	3d801fe2 	str	q2, [sp, #112]
  203320:	3d8023e3 	str	q3, [sp, #128]
  203324:	3d8027e4 	str	q4, [sp, #144]
  203328:	3d802be5 	str	q5, [sp, #160]
  20332c:	3d802fe6 	str	q6, [sp, #176]
  203330:	3d8033e7 	str	q7, [sp, #192]
  203334:	a90d0fe2 	stp	x2, x3, [sp, #208]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
  203338:	aa0803e3 	mov	x3, x8
  20333c:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
{
  203340:	a90e17e4 	stp	x4, x5, [sp, #224]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
  203344:	910043e4 	add	x4, sp, #0x10
{
  203348:	a90f1fe6 	stp	x6, x7, [sp, #240]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
  20334c:	97fffc7d 	bl	202540 <_vsnprintf>
  va_end(va);
  return ret;
}
  203350:	a8d07bfd 	ldp	x29, x30, [sp], #256
  203354:	d65f03c0 	ret
  203358:	d503201f 	nop
  20335c:	d503201f 	nop

0000000000203360 <sddf_snprintf_>:


int sddf_snprintf_(char* buffer, size_t count, const char* format, ...)
{
  203360:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
  va_list va;
  va_start(va, format);
  203364:	128004e8 	mov	w8, #0xffffffd8            	// #-40
  203368:	12800fea 	mov	w10, #0xffffff80            	// #-128
{
  20336c:	910003fd 	mov	x29, sp
  va_start(va, format);
  203370:	910343e9 	add	x9, sp, #0xd0
  203374:	910403eb 	add	x11, sp, #0x100
  203378:	a9032feb 	stp	x11, x11, [sp, #48]
  20337c:	f90023e9 	str	x9, [sp, #64]
{
  203380:	aa0103e9 	mov	x9, x1
  va_start(va, format);
  203384:	29092be8 	stp	w8, w10, [sp, #72]
{
  203388:	aa0203e8 	mov	x8, x2
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
  20338c:	a94337ec 	ldp	x12, x13, [sp, #48]
  203390:	aa0003e1 	mov	x1, x0
  203394:	a9442fea 	ldp	x10, x11, [sp, #64]
  203398:	aa0903e2 	mov	x2, x9
  20339c:	d0ffffe0 	adrp	x0, 201000 <init+0x20>
  2033a0:	91228000 	add	x0, x0, #0x8a0
  2033a4:	a90137ec 	stp	x12, x13, [sp, #16]
  2033a8:	a9022fea 	stp	x10, x11, [sp, #32]
{
  2033ac:	3d8017e0 	str	q0, [sp, #80]
  2033b0:	3d801be1 	str	q1, [sp, #96]
  2033b4:	3d801fe2 	str	q2, [sp, #112]
  2033b8:	3d8023e3 	str	q3, [sp, #128]
  2033bc:	3d8027e4 	str	q4, [sp, #144]
  2033c0:	3d802be5 	str	q5, [sp, #160]
  2033c4:	3d802fe6 	str	q6, [sp, #176]
  2033c8:	3d8033e7 	str	q7, [sp, #192]
  2033cc:	a90d93e3 	stp	x3, x4, [sp, #216]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
  2033d0:	910043e4 	add	x4, sp, #0x10
  2033d4:	aa0803e3 	mov	x3, x8
{
  2033d8:	a90e9be5 	stp	x5, x6, [sp, #232]
  2033dc:	f9007fe7 	str	x7, [sp, #248]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
  2033e0:	97fffc58 	bl	202540 <_vsnprintf>
  va_end(va);
  return ret;
}
  2033e4:	a8d07bfd 	ldp	x29, x30, [sp], #256
  2033e8:	d65f03c0 	ret
  2033ec:	d503201f 	nop

00000000002033f0 <sddf_vprintf_>:


int sddf_vprintf_(const char* format, va_list va)
{
  2033f0:	aa0103e5 	mov	x5, x1
  2033f4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  2033f8:	aa0003e3 	mov	x3, x0
{
  2033fc:	910003fd 	mov	x29, sp
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  203400:	a9401ca6 	ldp	x6, x7, [x5]
  203404:	f9000be6 	str	x6, [sp, #16]
  203408:	910043e4 	add	x4, sp, #0x10
  20340c:	9100e3e1 	add	x1, sp, #0x38
  203410:	f94008a6 	ldr	x6, [x5, #16]
  203414:	f9000fe7 	str	x7, [sp, #24]
  203418:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
  20341c:	d0ffffe0 	adrp	x0, 201000 <init+0x20>
  203420:	f9400ca5 	ldr	x5, [x5, #24]
  203424:	91360000 	add	x0, x0, #0xd80
  203428:	a90217e6 	stp	x6, x5, [sp, #32]
  20342c:	97fffc45 	bl	202540 <_vsnprintf>
}
  203430:	a8c47bfd 	ldp	x29, x30, [sp], #64
  203434:	d65f03c0 	ret
  203438:	d503201f 	nop
  20343c:	d503201f 	nop

0000000000203440 <sddf_vsnprintf_>:


int sddf_vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
  203440:	aa0303e5 	mov	x5, x3
  203444:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
  203448:	aa0103e4 	mov	x4, x1
  20344c:	910003fd 	mov	x29, sp
  return _vsnprintf(_out_buffer, buffer, count, format, va);
  203450:	a9401ca8 	ldp	x8, x7, [x5]
  203454:	aa0003e1 	mov	x1, x0
  203458:	a94114a6 	ldp	x6, x5, [x5, #16]
  20345c:	aa0203e3 	mov	x3, x2
  203460:	d0ffffe0 	adrp	x0, 201000 <init+0x20>
  203464:	91228000 	add	x0, x0, #0x8a0
  203468:	aa0403e2 	mov	x2, x4
  20346c:	910043e4 	add	x4, sp, #0x10
  203470:	a9011fe8 	stp	x8, x7, [sp, #16]
  203474:	a90217e6 	stp	x6, x5, [sp, #32]
  203478:	97fffc32 	bl	202540 <_vsnprintf>
}
  20347c:	a8c37bfd 	ldp	x29, x30, [sp], #48
  203480:	d65f03c0 	ret
  203484:	d503201f 	nop
  203488:	d503201f 	nop
  20348c:	d503201f 	nop

0000000000203490 <sddf_fctprintf>:


int sddf_fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
{
  203490:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
  va_list va;
  va_start(va, format);
  203494:	12800feb 	mov	w11, #0xffffff80            	// #-128
  203498:	128004e9 	mov	w9, #0xffffffd8            	// #-40
{
  20349c:	910003fd 	mov	x29, sp
  va_start(va, format);
  2034a0:	910383ea 	add	x10, sp, #0xe0
  2034a4:	910443e8 	add	x8, sp, #0x110
  2034a8:	a90423e8 	stp	x8, x8, [sp, #64]
{
  2034ac:	aa0203e8 	mov	x8, x2
  const out_fct_wrap_type out_fct_wrap = { out, arg };
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
  2034b0:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
  va_start(va, format);
  2034b4:	f9002bea 	str	x10, [sp, #80]
{
  2034b8:	aa0003ea 	mov	x10, x0
  va_start(va, format);
  2034bc:	290b2fe9 	stp	w9, w11, [sp, #88]
{
  2034c0:	aa0103e9 	mov	x9, x1
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
  2034c4:	a9443fee 	ldp	x14, x15, [sp, #64]
  2034c8:	9100c3e1 	add	x1, sp, #0x30
  2034cc:	a94537ec 	ldp	x12, x13, [sp, #80]
  2034d0:	d0ffffe0 	adrp	x0, 201000 <init+0x20>
  2034d4:	91364000 	add	x0, x0, #0xd90
  2034d8:	a9013fee 	stp	x14, x15, [sp, #16]
  2034dc:	a90237ec 	stp	x12, x13, [sp, #32]
  const out_fct_wrap_type out_fct_wrap = { out, arg };
  2034e0:	a90327ea 	stp	x10, x9, [sp, #48]
{
  2034e4:	3d801be0 	str	q0, [sp, #96]
  2034e8:	3d801fe1 	str	q1, [sp, #112]
  2034ec:	3d8023e2 	str	q2, [sp, #128]
  2034f0:	3d8027e3 	str	q3, [sp, #144]
  2034f4:	3d802be4 	str	q4, [sp, #160]
  2034f8:	3d802fe5 	str	q5, [sp, #176]
  2034fc:	3d8033e6 	str	q6, [sp, #192]
  203500:	3d8037e7 	str	q7, [sp, #208]
  203504:	a90e93e3 	stp	x3, x4, [sp, #232]
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
  203508:	910043e4 	add	x4, sp, #0x10
  20350c:	aa0803e3 	mov	x3, x8
{
  203510:	a90f9be5 	stp	x5, x6, [sp, #248]
  203514:	f90087e7 	str	x7, [sp, #264]
  const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
  203518:	97fffc0a 	bl	202540 <_vsnprintf>
  va_end(va);
  return ret;
}
  20351c:	a8d17bfd 	ldp	x29, x30, [sp], #272
  203520:	d65f03c0 	ret
	...

0000000000203530 <_assert_fail>:
 */

#include <sddf/util/printf.h>

void _assert_fail(const char  *assertion, const char  *file, unsigned int line, const char  *function)
{
  203530:	2a0203e5 	mov	w5, w2
  203534:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
  203538:	aa0103e4 	mov	x4, x1
  20353c:	910003fd 	mov	x29, sp
    sddf_dprintf("Failed assertion '%s' at %s:%u in function %s\n", assertion, file, line, function);
  203540:	aa0003e1 	mov	x1, x0
  203544:	aa0403e2 	mov	x2, x4
  203548:	aa0303e4 	mov	x4, x3
  20354c:	90000000 	adrp	x0, 203000 <_vsnprintf+0xac0>
  203550:	91296000 	add	x0, x0, #0xa58
  203554:	2a0503e3 	mov	w3, w5
  203558:	97ffff3a 	bl	203240 <sddf_printf_>
    __builtin_trap();
  20355c:	d4207d00 	brk	#0x3e8

0000000000203560 <_sddf_putchar>:

static char string_buffer[MAX_STRING_LENGTH + 1];
static uint32_t local_tail;

void _sddf_putchar(char character)
{
  203560:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    string_buffer[local_tail] = character;
  203564:	90000021 	adrp	x1, 207000 <__global_pointer$+0x27e0>
  203568:	911d4021 	add	x1, x1, #0x750
{
  20356c:	910003fd 	mov	x29, sp
  203570:	f9000bf3 	str	x19, [sp, #16]
    string_buffer[local_tail] = character;
  203574:	90000033 	adrp	x19, 207000 <__global_pointer$+0x27e0>
  203578:	b9474263 	ldr	w3, [x19, #1856]
{
  20357c:	12001c00 	and	w0, w0, #0xff
    local_tail++;
  203580:	11000462 	add	w2, w3, #0x1
  203584:	b9074262 	str	w2, [x19, #1856]

    if (character == FLUSH_CHAR || local_tail == MAX_STRING_LENGTH) {
  203588:	7140045f 	cmp	w2, #0x1, lsl #12
    string_buffer[local_tail] = character;
  20358c:	38234820 	strb	w0, [x1, w3, uxtw]
    if (character == FLUSH_CHAR || local_tail == MAX_STRING_LENGTH) {
  203590:	7a4a1804 	ccmp	w0, #0xa, #0x4, ne	// ne = any
  203594:	540000a1 	b.ne	2035a8 <_sddf_putchar+0x48>  // b.any
        string_buffer[local_tail] = '\0';
        microkit_dbg_puts(string_buffer);
  203598:	aa0103e0 	mov	x0, x1
        string_buffer[local_tail] = '\0';
  20359c:	3822483f 	strb	wzr, [x1, w2, uxtw]
        microkit_dbg_puts(string_buffer);
  2035a0:	97fff784 	bl	2013b0 <microkit_dbg_puts>
        local_tail = 0;
  2035a4:	b907427f 	str	wzr, [x19, #1856]
    }
  2035a8:	f9400bf3 	ldr	x19, [sp, #16]
  2035ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
  2035b0:	d65f03c0 	ret
  2035b4:	00000000 	udf	#0

00000000002035b8 <__FUNCTION__.5>:
  2035b8:	636f7270 5f737365 75716572 73747365     process_requests
	...

00000000002035d0 <__FUNCTION__.2>:
  2035d0:	5f707261 6c706572 00000079 00000000     arp_reply.......

00000000002035e0 <__FUNCTION__.3>:
  2035e0:	636f7270 5f737365 70736572 65736e6f     process_response
  2035f0:	00000073 00000000                       s.......

00000000002035f8 <__FUNCTION__.1>:
  2035f8:	74696e69 00000000                       init....

0000000000203600 <__FUNCTION__.0>:
  203600:	5f74656e 66667562 5f737265 74696e69     net_buffers_init
	...
  203620:	ff9f00e0 ff9fff9f ff9fff9f ff9fff9f     ................
  203630:	ff9fff9f ff9fff9f ff9fff9f ff9fff9f     ................
  203640:	ff9fff9f ff9fff9f ff9fff9f ff9fff9f     ................
  203650:	ff9fff9f ff9fff9f ff9fff9f ff9fff9f     ................
  203660:	00ab0093 ff9f0093 ff9fff9f ff9fff9f     ................
  203670:	ff9fff9f ff9fff9f ff9fff9f ff9fff9f     ................
  203680:	ff9fff9f 0184ff9f ff9fff9f ff9fff9f     ................
  203690:	ff9fff9f ff9fff9f 0184ff9f 018400bd     ................
  2036a0:	00ab0093 00000093 00000000 00000000     ................

00000000002036b0 <pow10.0>:
  2036b0:	00000000 3ff00000 00000000 40240000     .......?......$@
  2036c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  2036d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  2036e0:	00000000 412e8480 00000000 416312d0     .......A......cA
  2036f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
