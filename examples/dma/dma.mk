#
# Copyright 2025, UNSW
#
# SPDX-License-Identifier: BSD-2-Clause
#
# This Makefile is copied into the build directory
# and operated on from there.
#

ifeq ($(strip $(MICROKIT_SDK)),)
$(error MICROKIT_SDK must be specified)
endif

ifeq ($(strip $(SDDF)),)
$(error SDDF must be specified)
endif

BUILD_DIR ?= build
MICROKIT_CONFIG ?= debug
IMAGE_FILE = loader.img
REPORT_FILE = report.txt

CC := clang
LD := ld.lld
AS := llvm-as
AR := llvm-ar
RANLIB := llvm-ranlib
OBJCOPY := llvm-objcopy
DTC := dtc
PYTHON ?= python3

MICROKIT_TOOL := $(MICROKIT_SDK)/bin/microkit

ifeq ($(strip $(MICROKIT_BOARD)), zcu102)
	DRIVER_DIR := zynqmp
	CPU := cortex-a53
else
$(error Unsupported MICROKIT_BOARD given)
endif

TOP := ${SDDF}/examples/dma
METAPROGRAM := $(TOP)/meta.py
UTIL := $(SDDF)/util
DMA_DRIVER := $(SDDF)/drivers/dma/$(DRIVER_DIR)
BOARD_DIR := $(MICROKIT_SDK)/board/$(MICROKIT_BOARD)/$(MICROKIT_CONFIG)
SYSTEM_FILE := dma.system
DTS := $(SDDF)/dts/$(MICROKIT_BOARD).dts
DTB := $(MICROKIT_BOARD).dtb
ARCH := ${shell grep 'CONFIG_SEL4_ARCH  ' $(BOARD_DIR)/include/kernel/gen_config.h | cut -d' ' -f4}
SDDF_CUSTOM_LIBC := 1
QEMU := qemu-system-$(ARCH)

IMAGES := dma_driver.elf \
	  client.elf
CFLAGS := -ffreestanding \
	  -g3 -O3 -Wall \
	  -Wno-unused-function -Werror \
	  -MD \
	  --std=gnu23
LDFLAGS := -L$(BOARD_DIR)/lib -L$(SDDF)/lib
LIBS := --start-group -lmicrokit -Tmicrokit.ld libsddf_util_debug.a --end-group

ifeq ($(ARCH),aarch64)
	TARGET_TRIPLE := aarch64-none-elf
	CFLAGS += -mcpu=$(CPU) -mstrict-align
else ifeq ($(ARCH),riscv64)
	TARGET_TRIPLE := riscv64-unknown-elf
	CFLAGS += -march=rv64imafdc
endif
CFLAGS += -I$(BOARD_DIR)/include \
	-I${TOP}/include	\
	-I${SDDF}/include \
	-I${SDDF}/include/microkit \
	$(CFLAGS_ARCH)

ifeq ($(strip $(LLVM)),False)
  CC := $(TARGET_TRIPLE)-gcc
  LD := $(TARGET_TRIPLE)-ld
  AS := $(TARGET_TRIPLE)-as
  AR := $(TARGET_TRIPLE)-ar
  RANLIB := $(TARGET_TRIPLE)-ranlib
  OBJCOPY := $(TARGET_TRIPLE)-objcopy
  CFLAGS += -fanalyzer \
  	-Wno-analyzer-infinite-recursion \
	-Wno-analyzer-null-dereference
else
  CFLAGS += -target $(TARGET_TRIPLE)
endif

CHECK_FLAGS_BOARD_MD5 := .board_cflags-$(shell echo -- ${CFLAGS} ${MICROKIT_SDK} ${MICROKIT_BOARD} ${MICROKIT_CONFIG} | shasum | sed 's/ *-//')

${CHECK_FLAGS_BOARD_MD5}:
	-rm -f .board_cflags-*
	touch $@

${IMAGES}: libsddf_util_debug.a ${CHECK_FLAGS_BOARD_MD5}

include ${SDDF}/util/util.mk
include ${DMA_DRIVER}/dma_driver.mk

%.elf: %.o
	${LD} -o $@ ${LDFLAGS} $< ${LIBS}

client.elf: client.o
	$(LD) $(LDFLAGS) $^ $(LIBS) -o $@

client.o: ${TOP}/client.c ${CHECK_FLAGS_BOARD_MD5}
	$(CC) $(CFLAGS) -c -o $@ $<

$(DTB): $(DTS)
	dtc -q -I dts -O dtb $(DTS) > $(DTB)

# TODO: system file is not generated by sdfgen due the lack of dma device class support
# $(SYSTEM_FILE): $(METAPROGRAM) $(IMAGES) $(DTB)
# 	$(PYTHON) $(METAPROGRAM) --sddf $(SDDF) --board $(MICROKIT_BOARD) --dtb $(DTB) --output . --sdf $(SYSTEM_FILE)
$(SYSTEM_FILE): $(TOP)/dma.system
	cp $(TOP)/dma.system $@

$(IMAGE_FILE) $(REPORT_FILE): $(IMAGES) $(SYSTEM_FILE)
	MICROKIT_SDK=${MICROKIT_SDK} $(MICROKIT_TOOL) $(SYSTEM_FILE) --search-path $(BUILD_DIR) --board $(MICROKIT_BOARD) --config $(MICROKIT_CONFIG) -o $(IMAGE_FILE) -r $(REPORT_FILE)

# TODO
# qemu: ${IMAGE_FILE}
# 	$(QEMU) -m size=2G -nographic -serial mon:stdio -d guest_errors $(QEMU_ARCH_ARGS)

clean::
	${RM} -f *.elf
	find . -name '*.[od]' | xargs ${RM} -f

clobber:: clean
	${RM} -f ${IMAGE_FILE} ${REPORT_FILE}
