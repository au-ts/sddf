# Generated by Gemini 2.5 Pro with my modification(This line is added by Cheng Li)
#
# Copyright 2023, Colias Group, LLC
#
# SPDX-License-Identifier: BSD-2-Clause
#

# ===============================================================================
#                             CONFIGURABLE VARIABLES
# ===============================================================================
MICROKIT_SDK ?= /home/li/Sel4/microkit-sdk-2.0.1
BOARD ?= rockpro64
MICROKIT_CONFIG ?= debug
RUST_OPTIMIZATION ?= debug
SDDF :=$(abspath ../..)


# ===============================================================================
#                             DERIVED VARIABLES
# ===============================================================================
# --- Directories ---
BUILD_DIR := $(SDDF)
PWM_DRIVER_DIR := $(SDDF)/drivers/pwm
THERMAL_DRIVER_DIR := $(SDDF)/drivers/thermal
RUST_TARGET_DIR := target
RUST_TARGET_ARCH_DIR := aarch64-sel4-microkit-minimal

# --- Microkit SDK paths ---
MICROKIT_TOOL := $(MICROKIT_SDK)/bin/microkit
MICROKIT_BOARD_DIR := $(MICROKIT_SDK)/board/$(BOARD)/$(MICROKIT_CONFIG)
SEL4_INCLUDE_DIRS := $(abspath $(MICROKIT_BOARD_DIR)/include)

# --- Source paths for the compiled ELF files from Cargo ---
PWM_ELF_SRC := $(PWM_DRIVER_DIR)/$(RUST_TARGET_DIR)/$(RUST_TARGET_ARCH_DIR)/$(RUST_OPTIMIZATION)/pwm_driver
THERMAL_SENSOR_ELF_SRC := $(THERMAL_DRIVER_DIR)/$(RUST_TARGET_DIR)/$(RUST_TARGET_ARCH_DIR)/$(RUST_OPTIMIZATION)/thermal_sensor_driver
GOVERNOR_ELF_SRC := ./$(RUST_TARGET_DIR)/$(RUST_TARGET_ARCH_DIR)/$(RUST_OPTIMIZATION)/thermal_governor

# --- Final image and report files (will be placed in BUILD_DIR) ---
IMAGE_FILE := $(BUILD_DIR)/loader.img
REPORT_FILE := $(BUILD_DIR)/report.txt

# --- Cargo build flags ---
CARGO_FLAGS := \
	-Z build-std=core,alloc,compiler_builtins \
	-Z build-std-features=compiler-builtins-mem \
	--target support/targets/aarch64-sel4-microkit-minimal.json \
	$(if $(filter release,$(RUST_OPTIMIZATION)),--release)

# Set environment for Cargo
CARGO_ENV := SEL4_INCLUDE_DIRS=$(SEL4_INCLUDE_DIRS)


# ===============================================================================
#                                     TARGETS
# ===============================================================================
.PHONY: all build clean build-governor build-pwm build-thermal-sensor

# --- Default Target ---
all: build

# --- Main Build Target ---
build: $(IMAGE_FILE)
	@echo "Build finished successfully."
	@echo "Image:   $(IMAGE_FILE)"
	@echo "Report:  $(REPORT_FILE)"

# --- Clean Target ---
clean:
	@echo "Cleaning build artifacts..."
	@cargo clean --manifest-path $(PWM_DRIVER_DIR)/Cargo.toml
	@cargo clean --manifest-path $(THERMAL_DRIVER_DIR)/Cargo.toml
	@cargo clean --manifest-path ./Cargo.toml
	@rm -rf $(BUILD_DIR)
	@echo "Clean complete."

# --- Helper Target to create the build directory ---
$(BUILD_DIR):
	@echo "Creating build directory: $@"
	@mkdir -p $@

# ===============================================================================
#                       BUILD & LINKING LOGIC (PHONY Approach)
# ===============================================================================

# --- Final Linking Step: Create the bootable image and report ---
# This now depends on our PHONY build targets. This ensures that cargo is
# always run before the linking step attempts to find the ELF files.
$(IMAGE_FILE) $(REPORT_FILE): build-governor build-pwm build-thermal-sensor ./thermal.system | $(BUILD_DIR)
	@echo "Linking ELF files into final image..."
	$(MICROKIT_TOOL) \
		./thermal.system \
		--board $(BOARD) \
		--config $(MICROKIT_CONFIG) \
		--search-path $(dir $(GOVERNOR_ELF_SRC)) \
		--search-path $(dir $(PWM_ELF_SRC)) \
		--search-path $(dir $(THERMAL_SENSOR_ELF_SRC)) \
		-o $(IMAGE_FILE) \
		-r $(REPORT_FILE)

# --- PHONY Rules to build each component ---
# Because these are .PHONY, their commands will ALWAYS run when `make` is invoked.
# We delegate the "is it up-to-date?" check entirely to `cargo`, which is what we want.

build-governor:
	@echo "Building thermal_governor..."
	@$(CARGO_ENV) cargo build --manifest-path ./Cargo.toml $(CARGO_FLAGS)

build-pwm:
	@echo "Building pwm_driver..."
	@$(CARGO_ENV) cargo build --manifest-path $(PWM_DRIVER_DIR)/Cargo.toml $(CARGO_FLAGS)

build-thermal-sensor:
	@echo "Building thermal_sensor_driver..."
	@$(CARGO_ENV) cargo build --manifest-path $(THERMAL_DRIVER_DIR)/Cargo.toml $(CARGO_FLAGS)